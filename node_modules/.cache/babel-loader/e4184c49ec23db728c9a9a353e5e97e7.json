{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar constraintMapping = require('./constraint_mapping');\n\nvar endPlus = require('./end_plus');\n\nmodule.exports = function emptyPathinfo(contours, plotinfo, cd0) {\n  var contoursFinal = contours.type === 'constraint' ? constraintMapping[contours._operation](contours.value) : contours;\n  var cs = contoursFinal.size;\n  var pathinfo = [];\n  var end = endPlus(contoursFinal);\n  var carpet = cd0.trace._carpetTrace;\n  var basePathinfo = carpet ? {\n    // store axes so we can convert to px\n    xaxis: carpet.aaxis,\n    yaxis: carpet.baxis,\n    // full data arrays to use for interpolation\n    x: cd0.a,\n    y: cd0.b\n  } : {\n    xaxis: plotinfo.xaxis,\n    yaxis: plotinfo.yaxis,\n    x: cd0.x,\n    y: cd0.y\n  };\n\n  for (var ci = contoursFinal.start; ci < end; ci += cs) {\n    pathinfo.push(Lib.extendFlat({\n      level: ci,\n      // all the cells with nontrivial marching index\n      crossings: {},\n      // starting points on the edges of the lattice for each contour\n      starts: [],\n      // all unclosed paths (may have less items than starts,\n      // if a path is closed by rounding)\n      edgepaths: [],\n      // all closed paths\n      paths: [],\n      z: cd0.z,\n      smoothing: cd0.trace.line.smoothing\n    }, basePathinfo));\n\n    if (pathinfo.length > 1000) {\n      Lib.warn('Too many contours, clipping at 1000', contours);\n      break;\n    }\n  }\n\n  return pathinfo;\n};","map":null,"metadata":{},"sourceType":"script"}