{"ast":null,"code":"/*eslint new-cap:0*/\nvar dtype = require('dtype');\n\nmodule.exports = flattenVertexData;\n\nfunction flattenVertexData(data, output, offset) {\n  if (!data) throw new TypeError('must specify data as first parameter');\n  offset = +(offset || 0) | 0;\n\n  if (Array.isArray(data) && data[0] && typeof data[0][0] === 'number') {\n    var dim = data[0].length;\n    var length = data.length * dim;\n    var i, j, k, l; // no output specified, create a new typed array\n\n    if (!output || typeof output === 'string') {\n      output = new (dtype(output || 'float32'))(length + offset);\n    }\n\n    var dstLength = output.length - offset;\n\n    if (length !== dstLength) {\n      throw new Error('source length ' + length + ' (' + dim + 'x' + data.length + ')' + ' does not match destination length ' + dstLength);\n    }\n\n    for (i = 0, k = offset; i < data.length; i++) {\n      for (j = 0; j < dim; j++) {\n        output[k++] = data[i][j] === null ? NaN : data[i][j];\n      }\n    }\n  } else {\n    if (!output || typeof output === 'string') {\n      // no output, create a new one\n      var Ctor = dtype(output || 'float32'); // handle arrays separately due to possible nulls\n\n      if (Array.isArray(data) || output === 'array') {\n        output = new Ctor(data.length + offset);\n\n        for (i = 0, k = offset, l = output.length; k < l; k++, i++) {\n          output[k] = data[i] === null ? NaN : data[i];\n        }\n      } else {\n        if (offset === 0) {\n          output = new Ctor(data);\n        } else {\n          output = new Ctor(data.length + offset);\n          output.set(data, offset);\n        }\n      }\n    } else {\n      // store output in existing array\n      output.set(data, offset);\n    }\n  }\n\n  return output;\n}","map":null,"metadata":{},"sourceType":"script"}