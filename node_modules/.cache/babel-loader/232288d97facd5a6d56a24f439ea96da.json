{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\n\nfunction calculateAxisErrors(data, params, scaleFactor, axis) {\n  if (!params || !params.visible) return null;\n  var computeError = Registry.getComponentMethod('errorbars', 'makeComputeError')(params);\n  var result = new Array(data.length);\n\n  for (var i = 0; i < data.length; i++) {\n    var errors = computeError(+data[i], i);\n\n    if (axis.type === 'log') {\n      var point = axis.c2l(data[i]);\n      var min = data[i] - errors[0];\n      var max = data[i] + errors[1];\n      result[i] = [(axis.c2l(min, true) - point) * scaleFactor, (axis.c2l(max, true) - point) * scaleFactor]; // Keep track of the lower error bound which isn't negative!\n\n      if (min > 0) {\n        var lower = axis.c2l(min);\n        if (!axis._lowerLogErrorBound) axis._lowerLogErrorBound = lower;\n        axis._lowerErrorBound = Math.min(axis._lowerLogErrorBound, lower);\n      }\n    } else {\n      result[i] = [-errors[0] * scaleFactor, errors[1] * scaleFactor];\n    }\n  }\n\n  return result;\n}\n\nfunction dataLength(array) {\n  for (var i = 0; i < array.length; i++) {\n    if (array[i]) return array[i].length;\n  }\n\n  return 0;\n}\n\nfunction calculateErrors(data, scaleFactor, sceneLayout) {\n  var errors = [calculateAxisErrors(data.x, data.error_x, scaleFactor[0], sceneLayout.xaxis), calculateAxisErrors(data.y, data.error_y, scaleFactor[1], sceneLayout.yaxis), calculateAxisErrors(data.z, data.error_z, scaleFactor[2], sceneLayout.zaxis)];\n  var n = dataLength(errors);\n  if (n === 0) return null;\n  var errorBounds = new Array(n);\n\n  for (var i = 0; i < n; i++) {\n    var bound = [[0, 0, 0], [0, 0, 0]];\n\n    for (var j = 0; j < 3; j++) {\n      if (errors[j]) {\n        for (var k = 0; k < 2; k++) {\n          bound[k][j] = errors[j][i][k];\n        }\n      }\n    }\n\n    errorBounds[i] = bound;\n  }\n\n  return errorBounds;\n}\n\nmodule.exports = calculateErrors;","map":null,"metadata":{},"sourceType":"script"}