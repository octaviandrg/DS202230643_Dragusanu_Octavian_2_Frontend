{"ast":null,"code":"'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar fxAttrs = require('../../components/fx/layout_attributes');\n\nvar Scene = require('./scene');\n\nvar getSubplotData = require('../get_data').getSubplotData;\n\nvar Lib = require('../../lib');\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar GL3D = 'gl3d';\nvar SCENE = 'scene';\nexports.name = GL3D;\nexports.attr = SCENE;\nexports.idRoot = SCENE;\nexports.idRegex = exports.attrRegex = Lib.counterRegex('scene');\nexports.attributes = require('./layout/attributes');\nexports.layoutAttributes = require('./layout/layout_attributes');\nexports.baseLayoutAttrOverrides = overrideAll({\n  hoverlabel: fxAttrs.hoverlabel\n}, 'plot', 'nested');\nexports.supplyLayoutDefaults = require('./layout/defaults');\n\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var sceneIds = fullLayout._subplots[GL3D];\n\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneId = sceneIds[i];\n    var fullSceneData = getSubplotData(fullData, GL3D, sceneId);\n    var sceneLayout = fullLayout[sceneId];\n    var camera = sceneLayout.camera;\n    var scene = sceneLayout._scene;\n\n    if (!scene) {\n      scene = new Scene({\n        id: sceneId,\n        graphDiv: gd,\n        container: gd.querySelector('.gl-container'),\n        staticPlot: gd._context.staticPlot,\n        plotGlPixelRatio: gd._context.plotGlPixelRatio,\n        camera: camera\n      }, fullLayout); // set ref to Scene instance\n\n      sceneLayout._scene = scene;\n    } // save 'initial' camera view settings for modebar button\n\n\n    if (!scene.viewInitial) {\n      scene.viewInitial = {\n        up: {\n          x: camera.up.x,\n          y: camera.up.y,\n          z: camera.up.z\n        },\n        eye: {\n          x: camera.eye.x,\n          y: camera.eye.y,\n          z: camera.eye.z\n        },\n        center: {\n          x: camera.center.x,\n          y: camera.center.y,\n          z: camera.center.z\n        }\n      };\n    }\n\n    scene.plot(fullSceneData, fullLayout, gd.layout);\n  }\n};\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldSceneKeys = oldFullLayout._subplots[GL3D] || [];\n\n  for (var i = 0; i < oldSceneKeys.length; i++) {\n    var oldSceneKey = oldSceneKeys[i];\n\n    if (!newFullLayout[oldSceneKey] && !!oldFullLayout[oldSceneKey]._scene) {\n      oldFullLayout[oldSceneKey]._scene.destroy();\n\n      if (oldFullLayout._infolayer) {\n        oldFullLayout._infolayer.selectAll('.annotation-' + oldSceneKey).remove();\n      }\n    }\n  }\n};\n\nexports.toSVG = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots[GL3D];\n  var size = fullLayout._size;\n\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneLayout = fullLayout[sceneIds[i]];\n    var domain = sceneLayout.domain;\n    var scene = sceneLayout._scene;\n    var imageData = scene.toImage('png');\n\n    var image = fullLayout._glimages.append('svg:image');\n\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      x: size.l + size.w * domain.x[0],\n      y: size.t + size.h * (1 - domain.y[1]),\n      width: size.w * (domain.x[1] - domain.x[0]),\n      height: size.h * (domain.y[1] - domain.y[0]),\n      preserveAspectRatio: 'none'\n    });\n    scene.destroy();\n  }\n}; // clean scene ids, 'scene1' -> 'scene'\n\n\nexports.cleanId = function cleanId(id) {\n  if (!id.match(/^scene[0-9]*$/)) return;\n  var sceneNum = id.substr(5);\n  if (sceneNum === '1') sceneNum = '';\n  return SCENE + sceneNum;\n};\n\nexports.updateFx = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[GL3D];\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotObj = fullLayout[subplotIds[i]]._scene;\n    subplotObj.updateFx(fullLayout.dragmode, fullLayout.hovermode);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}