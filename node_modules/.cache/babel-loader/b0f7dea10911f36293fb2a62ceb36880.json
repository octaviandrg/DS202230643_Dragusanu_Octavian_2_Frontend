{"ast":null,"code":"'use strict';\n/*\n * Compute the tangent vector according to catmull-rom cubic splines (centripetal,\n * I think). That differs from the control point in two ways:\n *   1. It is a vector, not a position relative to the point\n *   2. the vector is longer than the position relative to p1 by a factor of 3\n *\n * Close to the boundaries, we'll use these as *quadratic control points, so that\n * to make a nice grid, we'll need to divide the tangent by 2 instead of 3. (The\n * math works out this way if you work through the bezier derivatives)\n */\n\nvar CatmullRomExp = 0.5;\n\nmodule.exports = function makeControlPoints(p0, p1, p2, smoothness) {\n  var d1x = p0[0] - p1[0];\n  var d1y = p0[1] - p1[1];\n  var d2x = p2[0] - p1[0];\n  var d2y = p2[1] - p1[1];\n  var d1a = Math.pow(d1x * d1x + d1y * d1y, CatmullRomExp / 2);\n  var d2a = Math.pow(d2x * d2x + d2y * d2y, CatmullRomExp / 2);\n  var numx = (d2a * d2a * d1x - d1a * d1a * d2x) * smoothness;\n  var numy = (d2a * d2a * d1y - d1a * d1a * d2y) * smoothness;\n  var denom1 = d2a * (d1a + d2a) * 3;\n  var denom2 = d1a * (d1a + d2a) * 3;\n  return [[p1[0] + (denom1 && numx / denom1), p1[1] + (denom1 && numy / denom1)], [p1[0] - (denom2 && numx / denom2), p1[1] - (denom2 && numy / denom2)]];\n};","map":null,"metadata":{},"sourceType":"script"}