{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar Colorscale = require('../../components/colorscale');\n\nvar Drawing = require('../../components/drawing');\n\nvar makeBlank = require('../../lib/geojson_utils').makeBlank;\n\nvar geoUtils = require('../../lib/geo_location_utils');\n/* N.B.\n *\n * We fetch the GeoJSON files \"ourselves\" (during\n * mapbox.prototype.fetchMapData) where they are stored in a global object\n * named `PlotlyGeoAssets` (same as for topojson files in `geo` subplots).\n *\n * Mapbox does allow using URLs as geojson sources, but does NOT allow filtering\n * features by feature `id` that are not numbers (more info in:\n * https://github.com/mapbox/mapbox-gl-js/issues/8088).\n */\n\n\nfunction convert(calcTrace) {\n  var trace = calcTrace[0].trace;\n  var isVisible = trace.visible === true && trace._length !== 0;\n  var fill = {\n    layout: {\n      visibility: 'none'\n    },\n    paint: {}\n  };\n  var line = {\n    layout: {\n      visibility: 'none'\n    },\n    paint: {}\n  };\n  var opts = trace._opts = {\n    fill: fill,\n    line: line,\n    geojson: makeBlank()\n  };\n  if (!isVisible) return opts;\n  var features = geoUtils.extractTraceFeature(calcTrace);\n  if (!features) return opts;\n  var sclFunc = Colorscale.makeColorScaleFuncFromTrace(trace);\n  var marker = trace.marker;\n  var markerLine = marker.line || {};\n  var opacityFn;\n\n  if (Lib.isArrayOrTypedArray(marker.opacity)) {\n    opacityFn = function opacityFn(d) {\n      var mo = d.mo;\n      return isNumeric(mo) ? +Lib.constrain(mo, 0, 1) : 0;\n    };\n  }\n\n  var lineColorFn;\n\n  if (Lib.isArrayOrTypedArray(markerLine.color)) {\n    lineColorFn = function lineColorFn(d) {\n      return d.mlc;\n    };\n  }\n\n  var lineWidthFn;\n\n  if (Lib.isArrayOrTypedArray(markerLine.width)) {\n    lineWidthFn = function lineWidthFn(d) {\n      return d.mlw;\n    };\n  }\n\n  for (var i = 0; i < calcTrace.length; i++) {\n    var cdi = calcTrace[i];\n    var fOut = cdi.fOut;\n\n    if (fOut) {\n      var props = fOut.properties;\n      props.fc = sclFunc(cdi.z);\n      if (opacityFn) props.mo = opacityFn(cdi);\n      if (lineColorFn) props.mlc = lineColorFn(cdi);\n      if (lineWidthFn) props.mlw = lineWidthFn(cdi);\n      cdi.ct = props.ct;\n      cdi._polygons = geoUtils.feature2polygons(fOut);\n    }\n  }\n\n  var opacitySetting = opacityFn ? {\n    type: 'identity',\n    property: 'mo'\n  } : marker.opacity;\n  Lib.extendFlat(fill.paint, {\n    'fill-color': {\n      type: 'identity',\n      property: 'fc'\n    },\n    'fill-opacity': opacitySetting\n  });\n  Lib.extendFlat(line.paint, {\n    'line-color': lineColorFn ? {\n      type: 'identity',\n      property: 'mlc'\n    } : markerLine.color,\n    'line-width': lineWidthFn ? {\n      type: 'identity',\n      property: 'mlw'\n    } : markerLine.width,\n    'line-opacity': opacitySetting\n  });\n  fill.layout.visibility = 'visible';\n  line.layout.visibility = 'visible';\n  opts.geojson = {\n    type: 'FeatureCollection',\n    features: features\n  };\n  convertOnSelect(calcTrace);\n  return opts;\n}\n\nfunction convertOnSelect(calcTrace) {\n  var trace = calcTrace[0].trace;\n  var opts = trace._opts;\n  var opacitySetting;\n\n  if (trace.selectedpoints) {\n    var fns = Drawing.makeSelectedPointStyleFns(trace);\n\n    for (var i = 0; i < calcTrace.length; i++) {\n      var cdi = calcTrace[i];\n\n      if (cdi.fOut) {\n        cdi.fOut.properties.mo2 = fns.selectedOpacityFn(cdi);\n      }\n    }\n\n    opacitySetting = {\n      type: 'identity',\n      property: 'mo2'\n    };\n  } else {\n    opacitySetting = Lib.isArrayOrTypedArray(trace.marker.opacity) ? {\n      type: 'identity',\n      property: 'mo'\n    } : trace.marker.opacity;\n  }\n\n  Lib.extendFlat(opts.fill.paint, {\n    'fill-opacity': opacitySetting\n  });\n  Lib.extendFlat(opts.line.paint, {\n    'line-opacity': opacitySetting\n  });\n  return opts;\n}\n\nmodule.exports = {\n  convert: convert,\n  convertOnSelect: convertOnSelect\n};","map":null,"metadata":{},"sourceType":"script"}