{"ast":null,"code":"'use strict';\n\nvar glPlot3d = require('../../../stackgl_modules').gl_plot3d;\n\nvar createCamera = glPlot3d.createCamera;\nvar createPlot = glPlot3d.createScene;\n\nvar getContext = require('webgl-context');\n\nvar passiveSupported = require('has-passive-events');\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar preserveDrawingBuffer = Lib.preserveDrawingBuffer();\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar Fx = require('../../components/fx');\n\nvar str2RGBAarray = require('../../lib/str2rgbarray');\n\nvar showNoWebGlMsg = require('../../lib/show_no_webgl_msg');\n\nvar project = require('./project');\n\nvar createAxesOptions = require('./layout/convert');\n\nvar createSpikeOptions = require('./layout/spikes');\n\nvar computeTickMarks = require('./layout/tick_marks');\n\nvar STATIC_CANVAS, STATIC_CONTEXT;\n\nfunction Scene(options, fullLayout) {\n  // create sub container for plot\n  var sceneContainer = document.createElement('div');\n  var plotContainer = options.container; // keep a ref to the graph div to fire hover+click events\n\n  this.graphDiv = options.graphDiv; // create SVG container for hover text\n\n  var svgContainer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svgContainer.style.position = 'absolute';\n  svgContainer.style.top = svgContainer.style.left = '0px';\n  svgContainer.style.width = svgContainer.style.height = '100%';\n  svgContainer.style['z-index'] = 20;\n  svgContainer.style['pointer-events'] = 'none';\n  sceneContainer.appendChild(svgContainer);\n  this.svgContainer = svgContainer; // Tag the container with the sceneID\n\n  sceneContainer.id = options.id;\n  sceneContainer.style.position = 'absolute';\n  sceneContainer.style.top = sceneContainer.style.left = '0px';\n  sceneContainer.style.width = sceneContainer.style.height = '100%';\n  plotContainer.appendChild(sceneContainer);\n  this.fullLayout = fullLayout;\n  this.id = options.id || 'scene';\n  this.fullSceneLayout = fullLayout[this.id]; // Saved from last call to plot()\n\n  this.plotArgs = [[], {}, {}];\n  /*\n   * Move this to calc step? Why does it work here?\n   */\n\n  this.axesOptions = createAxesOptions(fullLayout, fullLayout[this.id]);\n  this.spikeOptions = createSpikeOptions(fullLayout[this.id]);\n  this.container = sceneContainer;\n  this.staticMode = !!options.staticPlot;\n  this.pixelRatio = this.pixelRatio || options.plotGlPixelRatio || 2; // Coordinate rescaling\n\n  this.dataScale = [1, 1, 1];\n  this.contourLevels = [[], [], []];\n  this.convertAnnotations = Registry.getComponentMethod('annotations3d', 'convert');\n  this.drawAnnotations = Registry.getComponentMethod('annotations3d', 'draw');\n  this.initializeGLPlot();\n}\n\nvar proto = Scene.prototype;\n\nproto.prepareOptions = function () {\n  var scene = this;\n  var opts = {\n    canvas: scene.canvas,\n    gl: scene.gl,\n    glOptions: {\n      preserveDrawingBuffer: preserveDrawingBuffer,\n      premultipliedAlpha: true,\n      antialias: true\n    },\n    container: scene.container,\n    axes: scene.axesOptions,\n    spikes: scene.spikeOptions,\n    pickRadius: 10,\n    snapToData: true,\n    autoScale: true,\n    autoBounds: false,\n    cameraObject: scene.camera,\n    pixelRatio: scene.pixelRatio\n  }; // for static plots, we reuse the WebGL context\n  //  as WebKit doesn't collect them reliably\n\n  if (scene.staticMode) {\n    if (!STATIC_CONTEXT) {\n      STATIC_CANVAS = document.createElement('canvas');\n      STATIC_CONTEXT = getContext({\n        canvas: STATIC_CANVAS,\n        preserveDrawingBuffer: true,\n        premultipliedAlpha: true,\n        antialias: true\n      });\n\n      if (!STATIC_CONTEXT) {\n        throw new Error('error creating static canvas/context for image server');\n      }\n    }\n\n    opts.gl = STATIC_CONTEXT;\n    opts.canvas = STATIC_CANVAS;\n  }\n\n  return opts;\n};\n\nvar firstInit = true;\n\nproto.tryCreatePlot = function () {\n  var scene = this;\n  var opts = scene.prepareOptions();\n  var success = true;\n\n  try {\n    scene.glplot = createPlot(opts);\n  } catch (e) {\n    if (scene.staticMode || !firstInit || preserveDrawingBuffer) {\n      success = false;\n    } else {\n      // try second time\n      // enable preserveDrawingBuffer setup\n      // in case is-mobile not detecting the right device\n      Lib.warn(['webgl setup failed possibly due to', 'false preserveDrawingBuffer config.', 'The mobile/tablet device may not be detected by is-mobile module.', 'Enabling preserveDrawingBuffer in second attempt to create webgl scene...'].join(' '));\n\n      try {\n        // invert preserveDrawingBuffer\n        preserveDrawingBuffer = opts.glOptions.preserveDrawingBuffer = true;\n        scene.glplot = createPlot(opts);\n      } catch (e) {\n        // revert changes to preserveDrawingBuffer\n        preserveDrawingBuffer = opts.glOptions.preserveDrawingBuffer = false;\n        success = false;\n      }\n    }\n  }\n\n  firstInit = false;\n  return success;\n};\n\nproto.initializeGLCamera = function () {\n  var scene = this;\n  var cameraData = scene.fullSceneLayout.camera;\n  var isOrtho = cameraData.projection.type === 'orthographic';\n  scene.camera = createCamera(scene.container, {\n    center: [cameraData.center.x, cameraData.center.y, cameraData.center.z],\n    eye: [cameraData.eye.x, cameraData.eye.y, cameraData.eye.z],\n    up: [cameraData.up.x, cameraData.up.y, cameraData.up.z],\n    _ortho: isOrtho,\n    zoomMin: 0.01,\n    zoomMax: 100,\n    mode: 'orbit'\n  });\n};\n\nproto.initializeGLPlot = function () {\n  var scene = this;\n  scene.initializeGLCamera();\n  var success = scene.tryCreatePlot();\n  /*\n  * createPlot will throw when webgl is not enabled in the client.\n  * Lets return an instance of the module with all functions noop'd.\n  * The destroy method - which will remove the container from the DOM\n  * is overridden with a function that removes the container only.\n  */\n\n  if (!success) return showNoWebGlMsg(scene); // List of scene objects\n\n  scene.traces = {};\n  scene.make4thDimension();\n  var gd = scene.graphDiv;\n  var layout = gd.layout;\n\n  var makeUpdate = function makeUpdate() {\n    var update = {};\n\n    if (scene.isCameraChanged(layout)) {\n      // camera updates\n      update[scene.id + '.camera'] = scene.getCamera();\n    }\n\n    if (scene.isAspectChanged(layout)) {\n      // scene updates\n      update[scene.id + '.aspectratio'] = scene.glplot.getAspectratio();\n\n      if (layout[scene.id].aspectmode !== 'manual') {\n        scene.fullSceneLayout.aspectmode = layout[scene.id].aspectmode = update[scene.id + '.aspectmode'] = 'manual';\n      }\n    }\n\n    return update;\n  };\n\n  var relayoutCallback = function relayoutCallback(scene) {\n    if (scene.fullSceneLayout.dragmode === false) return;\n    var update = makeUpdate();\n    scene.saveLayout(layout);\n    scene.graphDiv.emit('plotly_relayout', update);\n  };\n\n  if (scene.glplot.canvas) {\n    scene.glplot.canvas.addEventListener('mouseup', function () {\n      relayoutCallback(scene);\n    });\n    scene.glplot.canvas.addEventListener('wheel', function (e) {\n      if (gd._context._scrollZoom.gl3d) {\n        if (scene.camera._ortho) {\n          var s = e.deltaX > e.deltaY ? 1.1 : 1.0 / 1.1;\n          var o = scene.glplot.getAspectratio();\n          scene.glplot.setAspectratio({\n            x: s * o.x,\n            y: s * o.y,\n            z: s * o.z\n          });\n        }\n\n        relayoutCallback(scene);\n      }\n    }, passiveSupported ? {\n      passive: false\n    } : false);\n    scene.glplot.canvas.addEventListener('mousemove', function () {\n      if (scene.fullSceneLayout.dragmode === false) return;\n      if (scene.camera.mouseListener.buttons === 0) return;\n      var update = makeUpdate();\n      scene.graphDiv.emit('plotly_relayouting', update);\n    });\n\n    if (!scene.staticMode) {\n      scene.glplot.canvas.addEventListener('webglcontextlost', function (event) {\n        if (gd && gd.emit) {\n          gd.emit('plotly_webglcontextlost', {\n            event: event,\n            layer: scene.id\n          });\n        }\n      }, false);\n    }\n  }\n\n  scene.glplot.oncontextloss = function () {\n    scene.recoverContext();\n  };\n\n  scene.glplot.onrender = function () {\n    scene.render();\n  };\n\n  return true;\n};\n\nproto.render = function () {\n  var scene = this;\n  var gd = scene.graphDiv;\n  var trace; // update size of svg container\n\n  var svgContainer = scene.svgContainer;\n  var clientRect = scene.container.getBoundingClientRect();\n\n  gd._fullLayout._calcInverseTransform(gd);\n\n  var scaleX = gd._fullLayout._invScaleX;\n  var scaleY = gd._fullLayout._invScaleY;\n  var width = clientRect.width * scaleX;\n  var height = clientRect.height * scaleY;\n  svgContainer.setAttributeNS(null, 'viewBox', '0 0 ' + width + ' ' + height);\n  svgContainer.setAttributeNS(null, 'width', width);\n  svgContainer.setAttributeNS(null, 'height', height);\n  computeTickMarks(scene);\n  scene.glplot.axes.update(scene.axesOptions); // check if pick has changed\n\n  var keys = Object.keys(scene.traces);\n  var lastPicked = null;\n  var selection = scene.glplot.selection;\n\n  for (var i = 0; i < keys.length; ++i) {\n    trace = scene.traces[keys[i]];\n\n    if (trace.data.hoverinfo !== 'skip' && trace.handlePick(selection)) {\n      lastPicked = trace;\n    }\n\n    if (trace.setContourLevels) trace.setContourLevels();\n  }\n\n  function formatter(axLetter, val, hoverformat) {\n    var ax = scene.fullSceneLayout[axLetter + 'axis'];\n\n    if (ax.type !== 'log') {\n      val = ax.d2l(val);\n    }\n\n    return Axes.hoverLabelText(ax, val, hoverformat);\n  }\n\n  if (lastPicked !== null) {\n    var pdata = project(scene.glplot.cameraParams, selection.dataCoordinate);\n    trace = lastPicked.data;\n    var traceNow = gd._fullData[trace.index];\n    var ptNumber = selection.index;\n    var labels = {\n      xLabel: formatter('x', selection.traceCoordinate[0], trace.xhoverformat),\n      yLabel: formatter('y', selection.traceCoordinate[1], trace.yhoverformat),\n      zLabel: formatter('z', selection.traceCoordinate[2], trace.zhoverformat)\n    };\n    var hoverinfo = Fx.castHoverinfo(traceNow, scene.fullLayout, ptNumber);\n    var hoverinfoParts = (hoverinfo || '').split('+');\n    var isHoverinfoAll = hoverinfo && hoverinfo === 'all';\n\n    if (!traceNow.hovertemplate && !isHoverinfoAll) {\n      if (hoverinfoParts.indexOf('x') === -1) labels.xLabel = undefined;\n      if (hoverinfoParts.indexOf('y') === -1) labels.yLabel = undefined;\n      if (hoverinfoParts.indexOf('z') === -1) labels.zLabel = undefined;\n      if (hoverinfoParts.indexOf('text') === -1) selection.textLabel = undefined;\n      if (hoverinfoParts.indexOf('name') === -1) lastPicked.name = undefined;\n    }\n\n    var tx;\n    var vectorTx = [];\n\n    if (trace.type === 'cone' || trace.type === 'streamtube') {\n      labels.uLabel = formatter('x', selection.traceCoordinate[3], trace.uhoverformat);\n\n      if (isHoverinfoAll || hoverinfoParts.indexOf('u') !== -1) {\n        vectorTx.push('u: ' + labels.uLabel);\n      }\n\n      labels.vLabel = formatter('y', selection.traceCoordinate[4], trace.vhoverformat);\n\n      if (isHoverinfoAll || hoverinfoParts.indexOf('v') !== -1) {\n        vectorTx.push('v: ' + labels.vLabel);\n      }\n\n      labels.wLabel = formatter('z', selection.traceCoordinate[5], trace.whoverformat);\n\n      if (isHoverinfoAll || hoverinfoParts.indexOf('w') !== -1) {\n        vectorTx.push('w: ' + labels.wLabel);\n      }\n\n      labels.normLabel = selection.traceCoordinate[6].toPrecision(3);\n\n      if (isHoverinfoAll || hoverinfoParts.indexOf('norm') !== -1) {\n        vectorTx.push('norm: ' + labels.normLabel);\n      }\n\n      if (trace.type === 'streamtube') {\n        labels.divergenceLabel = selection.traceCoordinate[7].toPrecision(3);\n\n        if (isHoverinfoAll || hoverinfoParts.indexOf('divergence') !== -1) {\n          vectorTx.push('divergence: ' + labels.divergenceLabel);\n        }\n      }\n\n      if (selection.textLabel) {\n        vectorTx.push(selection.textLabel);\n      }\n\n      tx = vectorTx.join('<br>');\n    } else if (trace.type === 'isosurface' || trace.type === 'volume') {\n      labels.valueLabel = Axes.hoverLabelText(scene._mockAxis, scene._mockAxis.d2l(selection.traceCoordinate[3]), trace.valuehoverformat);\n      vectorTx.push('value: ' + labels.valueLabel);\n\n      if (selection.textLabel) {\n        vectorTx.push(selection.textLabel);\n      }\n\n      tx = vectorTx.join('<br>');\n    } else {\n      tx = selection.textLabel;\n    }\n\n    var pointData = {\n      x: selection.traceCoordinate[0],\n      y: selection.traceCoordinate[1],\n      z: selection.traceCoordinate[2],\n      data: traceNow._input,\n      fullData: traceNow,\n      curveNumber: traceNow.index,\n      pointNumber: ptNumber\n    };\n    Fx.appendArrayPointValue(pointData, traceNow, ptNumber);\n\n    if (trace._module.eventData) {\n      pointData = traceNow._module.eventData(pointData, selection, traceNow, {}, ptNumber);\n    }\n\n    var eventData = {\n      points: [pointData]\n    };\n\n    if (scene.fullSceneLayout.hovermode) {\n      var bbox = [];\n      Fx.loneHover({\n        trace: traceNow,\n        x: (0.5 + 0.5 * pdata[0] / pdata[3]) * width,\n        y: (0.5 - 0.5 * pdata[1] / pdata[3]) * height,\n        xLabel: labels.xLabel,\n        yLabel: labels.yLabel,\n        zLabel: labels.zLabel,\n        text: tx,\n        name: lastPicked.name,\n        color: Fx.castHoverOption(traceNow, ptNumber, 'bgcolor') || lastPicked.color,\n        borderColor: Fx.castHoverOption(traceNow, ptNumber, 'bordercolor'),\n        fontFamily: Fx.castHoverOption(traceNow, ptNumber, 'font.family'),\n        fontSize: Fx.castHoverOption(traceNow, ptNumber, 'font.size'),\n        fontColor: Fx.castHoverOption(traceNow, ptNumber, 'font.color'),\n        nameLength: Fx.castHoverOption(traceNow, ptNumber, 'namelength'),\n        textAlign: Fx.castHoverOption(traceNow, ptNumber, 'align'),\n        hovertemplate: Lib.castOption(traceNow, ptNumber, 'hovertemplate'),\n        hovertemplateLabels: Lib.extendFlat({}, pointData, labels),\n        eventData: [pointData]\n      }, {\n        container: svgContainer,\n        gd: gd,\n        inOut_bbox: bbox\n      });\n      pointData.bbox = bbox[0];\n    }\n\n    if (selection.buttons && selection.distance < 5) {\n      gd.emit('plotly_click', eventData);\n    } else {\n      gd.emit('plotly_hover', eventData);\n    }\n\n    this.oldEventData = eventData;\n  } else {\n    Fx.loneUnhover(svgContainer);\n    if (this.oldEventData) gd.emit('plotly_unhover', this.oldEventData);\n    this.oldEventData = undefined;\n  }\n\n  scene.drawAnnotations(scene);\n};\n\nproto.recoverContext = function () {\n  var scene = this;\n  scene.glplot.dispose();\n\n  var tryRecover = function tryRecover() {\n    if (scene.glplot.gl.isContextLost()) {\n      requestAnimationFrame(tryRecover);\n      return;\n    }\n\n    if (!scene.initializeGLPlot()) {\n      Lib.error('Catastrophic and unrecoverable WebGL error. Context lost.');\n      return;\n    }\n\n    scene.plot.apply(scene, scene.plotArgs);\n  };\n\n  requestAnimationFrame(tryRecover);\n};\n\nvar axisProperties = ['xaxis', 'yaxis', 'zaxis'];\n\nfunction computeTraceBounds(scene, trace, bounds) {\n  var fullSceneLayout = scene.fullSceneLayout;\n\n  for (var d = 0; d < 3; d++) {\n    var axisName = axisProperties[d];\n    var axLetter = axisName.charAt(0);\n    var ax = fullSceneLayout[axisName];\n    var coords = trace[axLetter];\n    var calendar = trace[axLetter + 'calendar'];\n    var len = trace['_' + axLetter + 'length'];\n\n    if (!Lib.isArrayOrTypedArray(coords)) {\n      bounds[0][d] = Math.min(bounds[0][d], 0);\n      bounds[1][d] = Math.max(bounds[1][d], len - 1);\n    } else {\n      var v;\n\n      for (var i = 0; i < (len || coords.length); i++) {\n        if (Lib.isArrayOrTypedArray(coords[i])) {\n          for (var j = 0; j < coords[i].length; ++j) {\n            v = ax.d2l(coords[i][j], 0, calendar);\n\n            if (!isNaN(v) && isFinite(v)) {\n              bounds[0][d] = Math.min(bounds[0][d], v);\n              bounds[1][d] = Math.max(bounds[1][d], v);\n            }\n          }\n        } else {\n          v = ax.d2l(coords[i], 0, calendar);\n\n          if (!isNaN(v) && isFinite(v)) {\n            bounds[0][d] = Math.min(bounds[0][d], v);\n            bounds[1][d] = Math.max(bounds[1][d], v);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction computeAnnotationBounds(scene, bounds) {\n  var fullSceneLayout = scene.fullSceneLayout;\n  var annotations = fullSceneLayout.annotations || [];\n\n  for (var d = 0; d < 3; d++) {\n    var axisName = axisProperties[d];\n    var axLetter = axisName.charAt(0);\n    var ax = fullSceneLayout[axisName];\n\n    for (var j = 0; j < annotations.length; j++) {\n      var ann = annotations[j];\n\n      if (ann.visible) {\n        var pos = ax.r2l(ann[axLetter]);\n\n        if (!isNaN(pos) && isFinite(pos)) {\n          bounds[0][d] = Math.min(bounds[0][d], pos);\n          bounds[1][d] = Math.max(bounds[1][d], pos);\n        }\n      }\n    }\n  }\n}\n\nproto.plot = function (sceneData, fullLayout, layout) {\n  var scene = this; // Save parameters\n\n  scene.plotArgs = [sceneData, fullLayout, layout];\n  if (scene.glplot.contextLost) return;\n  var data, trace;\n  var i, j, axis, axisType;\n  var fullSceneLayout = fullLayout[scene.id];\n  var sceneLayout = layout[scene.id]; // Update layout\n\n  scene.fullLayout = fullLayout;\n  scene.fullSceneLayout = fullSceneLayout;\n  scene.axesOptions.merge(fullLayout, fullSceneLayout);\n  scene.spikeOptions.merge(fullSceneLayout); // Update camera and camera mode\n\n  scene.setViewport(fullSceneLayout);\n  scene.updateFx(fullSceneLayout.dragmode, fullSceneLayout.hovermode);\n  scene.camera.enableWheel = scene.graphDiv._context._scrollZoom.gl3d; // Update scene background\n\n  scene.glplot.setClearColor(str2RGBAarray(fullSceneLayout.bgcolor)); // Update axes functions BEFORE updating traces\n\n  scene.setConvert(axis); // Convert scene data\n\n  if (!sceneData) sceneData = [];else if (!Array.isArray(sceneData)) sceneData = [sceneData]; // Compute trace bounding box\n\n  var dataBounds = [[Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]];\n\n  for (i = 0; i < sceneData.length; ++i) {\n    data = sceneData[i];\n    if (data.visible !== true || data._length === 0) continue;\n    computeTraceBounds(this, data, dataBounds);\n  }\n\n  computeAnnotationBounds(this, dataBounds);\n  var dataScale = [1, 1, 1];\n\n  for (j = 0; j < 3; ++j) {\n    if (dataBounds[1][j] === dataBounds[0][j]) {\n      dataScale[j] = 1.0;\n    } else {\n      dataScale[j] = 1.0 / (dataBounds[1][j] - dataBounds[0][j]);\n    }\n  } // Save scale\n\n\n  scene.dataScale = dataScale; // after computeTraceBounds where ax._categories are filled in\n\n  scene.convertAnnotations(this); // Update traces\n\n  for (i = 0; i < sceneData.length; ++i) {\n    data = sceneData[i];\n\n    if (data.visible !== true || data._length === 0) {\n      continue;\n    }\n\n    trace = scene.traces[data.uid];\n\n    if (trace) {\n      if (trace.data.type === data.type) {\n        trace.update(data);\n      } else {\n        trace.dispose();\n        trace = data._module.plot(this, data);\n        scene.traces[data.uid] = trace;\n      }\n    } else {\n      trace = data._module.plot(this, data);\n      scene.traces[data.uid] = trace;\n    }\n\n    trace.name = data.name;\n  } // Remove empty traces\n\n\n  var traceIds = Object.keys(scene.traces);\n\n  traceIdLoop: for (i = 0; i < traceIds.length; ++i) {\n    for (j = 0; j < sceneData.length; ++j) {\n      if (sceneData[j].uid === traceIds[i] && sceneData[j].visible === true && sceneData[j]._length !== 0) {\n        continue traceIdLoop;\n      }\n    }\n\n    trace = scene.traces[traceIds[i]];\n    trace.dispose();\n    delete scene.traces[traceIds[i]];\n  } // order object per trace index\n\n\n  scene.glplot.objects.sort(function (a, b) {\n    return a._trace.data.index - b._trace.data.index;\n  }); // Update ranges (needs to be called *after* objects are added due to updates)\n\n  var sceneBounds = [[0, 0, 0], [0, 0, 0]];\n  var axisDataRange = [];\n  var axisTypeRatios = {};\n\n  for (i = 0; i < 3; ++i) {\n    axis = fullSceneLayout[axisProperties[i]];\n    axisType = axis.type;\n\n    if (axisType in axisTypeRatios) {\n      axisTypeRatios[axisType].acc *= dataScale[i];\n      axisTypeRatios[axisType].count += 1;\n    } else {\n      axisTypeRatios[axisType] = {\n        acc: dataScale[i],\n        count: 1\n      };\n    }\n\n    if (axis.autorange) {\n      sceneBounds[0][i] = Infinity;\n      sceneBounds[1][i] = -Infinity;\n      var objects = scene.glplot.objects;\n      var annotations = scene.fullSceneLayout.annotations || [];\n\n      var axLetter = axis._name.charAt(0);\n\n      for (j = 0; j < objects.length; j++) {\n        var obj = objects[j];\n        var objBounds = obj.bounds;\n        var pad = obj._trace.data._pad || 0;\n\n        if (obj.constructor.name === 'ErrorBars' && axis._lowerLogErrorBound) {\n          sceneBounds[0][i] = Math.min(sceneBounds[0][i], axis._lowerLogErrorBound);\n        } else {\n          sceneBounds[0][i] = Math.min(sceneBounds[0][i], objBounds[0][i] / dataScale[i] - pad);\n        }\n\n        sceneBounds[1][i] = Math.max(sceneBounds[1][i], objBounds[1][i] / dataScale[i] + pad);\n      }\n\n      for (j = 0; j < annotations.length; j++) {\n        var ann = annotations[j]; // N.B. not taking into consideration the arrowhead\n\n        if (ann.visible) {\n          var pos = axis.r2l(ann[axLetter]);\n          sceneBounds[0][i] = Math.min(sceneBounds[0][i], pos);\n          sceneBounds[1][i] = Math.max(sceneBounds[1][i], pos);\n        }\n      }\n\n      if ('rangemode' in axis && axis.rangemode === 'tozero') {\n        sceneBounds[0][i] = Math.min(sceneBounds[0][i], 0);\n        sceneBounds[1][i] = Math.max(sceneBounds[1][i], 0);\n      }\n\n      if (sceneBounds[0][i] > sceneBounds[1][i]) {\n        sceneBounds[0][i] = -1;\n        sceneBounds[1][i] = 1;\n      } else {\n        var d = sceneBounds[1][i] - sceneBounds[0][i];\n        sceneBounds[0][i] -= d / 32.0;\n        sceneBounds[1][i] += d / 32.0;\n      }\n\n      if (axis.autorange === 'reversed') {\n        // swap bounds:\n        var tmp = sceneBounds[0][i];\n        sceneBounds[0][i] = sceneBounds[1][i];\n        sceneBounds[1][i] = tmp;\n      }\n    } else {\n      var range = axis.range;\n      sceneBounds[0][i] = axis.r2l(range[0]);\n      sceneBounds[1][i] = axis.r2l(range[1]);\n    }\n\n    if (sceneBounds[0][i] === sceneBounds[1][i]) {\n      sceneBounds[0][i] -= 1;\n      sceneBounds[1][i] += 1;\n    }\n\n    axisDataRange[i] = sceneBounds[1][i] - sceneBounds[0][i]; // Update plot bounds\n\n    scene.glplot.setBounds(i, {\n      min: sceneBounds[0][i] * dataScale[i],\n      max: sceneBounds[1][i] * dataScale[i]\n    });\n  }\n  /*\n   * Dynamically set the aspect ratio depending on the users aspect settings\n   */\n\n\n  var aspectRatio;\n  var aspectmode = fullSceneLayout.aspectmode;\n\n  if (aspectmode === 'cube') {\n    aspectRatio = [1, 1, 1];\n  } else if (aspectmode === 'manual') {\n    var userRatio = fullSceneLayout.aspectratio;\n    aspectRatio = [userRatio.x, userRatio.y, userRatio.z];\n  } else if (aspectmode === 'auto' || aspectmode === 'data') {\n    var axesScaleRatio = [1, 1, 1]; // Compute axis scale per category\n\n    for (i = 0; i < 3; ++i) {\n      axis = fullSceneLayout[axisProperties[i]];\n      axisType = axis.type;\n      var axisRatio = axisTypeRatios[axisType];\n      axesScaleRatio[i] = Math.pow(axisRatio.acc, 1.0 / axisRatio.count) / dataScale[i];\n    }\n\n    if (aspectmode === 'data') {\n      aspectRatio = axesScaleRatio;\n    } else {\n      // i.e. 'auto' option\n      if (Math.max.apply(null, axesScaleRatio) / Math.min.apply(null, axesScaleRatio) <= 4) {\n        // USE DATA MODE WHEN AXIS RANGE DIMENSIONS ARE RELATIVELY EQUAL\n        aspectRatio = axesScaleRatio;\n      } else {\n        // USE EQUAL MODE WHEN AXIS RANGE DIMENSIONS ARE HIGHLY UNEQUAL\n        aspectRatio = [1, 1, 1];\n      }\n    }\n  } else {\n    throw new Error('scene.js aspectRatio was not one of the enumerated types');\n  }\n  /*\n   * Write aspect Ratio back to user data and fullLayout so that it is modifies as user\n   * manipulates the aspectmode settings and the fullLayout is up-to-date.\n   */\n\n\n  fullSceneLayout.aspectratio.x = sceneLayout.aspectratio.x = aspectRatio[0];\n  fullSceneLayout.aspectratio.y = sceneLayout.aspectratio.y = aspectRatio[1];\n  fullSceneLayout.aspectratio.z = sceneLayout.aspectratio.z = aspectRatio[2];\n  /*\n   * Finally assign the computed aspecratio to the glplot module. This will have an effect\n   * on the next render cycle.\n   */\n\n  scene.glplot.setAspectratio(fullSceneLayout.aspectratio); // save 'initial' aspectratio & aspectmode view settings for modebar buttons\n\n  if (!scene.viewInitial.aspectratio) {\n    scene.viewInitial.aspectratio = {\n      x: fullSceneLayout.aspectratio.x,\n      y: fullSceneLayout.aspectratio.y,\n      z: fullSceneLayout.aspectratio.z\n    };\n  }\n\n  if (!scene.viewInitial.aspectmode) {\n    scene.viewInitial.aspectmode = fullSceneLayout.aspectmode;\n  } // Update frame position for multi plots\n\n\n  var domain = fullSceneLayout.domain || null;\n  var size = fullLayout._size || null;\n\n  if (domain && size) {\n    var containerStyle = scene.container.style;\n    containerStyle.position = 'absolute';\n    containerStyle.left = size.l + domain.x[0] * size.w + 'px';\n    containerStyle.top = size.t + (1 - domain.y[1]) * size.h + 'px';\n    containerStyle.width = size.w * (domain.x[1] - domain.x[0]) + 'px';\n    containerStyle.height = size.h * (domain.y[1] - domain.y[0]) + 'px';\n  } // force redraw so that promise is returned when rendering is completed\n\n\n  scene.glplot.redraw();\n};\n\nproto.destroy = function () {\n  var scene = this;\n  if (!scene.glplot) return;\n  scene.camera.mouseListener.enabled = false;\n  scene.container.removeEventListener('wheel', scene.camera.wheelListener);\n  scene.camera = null;\n  scene.glplot.dispose();\n  scene.container.parentNode.removeChild(scene.container);\n  scene.glplot = null;\n}; // getCameraArrays :: plotly_coords -> gl-plot3d_coords\n// inverse of getLayoutCamera\n\n\nfunction getCameraArrays(camera) {\n  return [[camera.eye.x, camera.eye.y, camera.eye.z], [camera.center.x, camera.center.y, camera.center.z], [camera.up.x, camera.up.y, camera.up.z]];\n} // getLayoutCamera :: gl-plot3d_coords -> plotly_coords\n// inverse of getCameraArrays\n\n\nfunction getLayoutCamera(camera) {\n  return {\n    up: {\n      x: camera.up[0],\n      y: camera.up[1],\n      z: camera.up[2]\n    },\n    center: {\n      x: camera.center[0],\n      y: camera.center[1],\n      z: camera.center[2]\n    },\n    eye: {\n      x: camera.eye[0],\n      y: camera.eye[1],\n      z: camera.eye[2]\n    },\n    projection: {\n      type: camera._ortho === true ? 'orthographic' : 'perspective'\n    }\n  };\n} // get camera position in plotly coords from 'gl-plot3d' coords\n\n\nproto.getCamera = function () {\n  var scene = this;\n  scene.camera.view.recalcMatrix(scene.camera.view.lastT());\n  return getLayoutCamera(scene.camera);\n}; // set gl-plot3d camera position and scene aspects with a set of plotly coords\n\n\nproto.setViewport = function (sceneLayout) {\n  var scene = this;\n  var cameraData = sceneLayout.camera;\n  scene.camera.lookAt.apply(this, getCameraArrays(cameraData));\n  scene.glplot.setAspectratio(sceneLayout.aspectratio);\n  var newOrtho = cameraData.projection.type === 'orthographic';\n  var oldOrtho = scene.camera._ortho;\n\n  if (newOrtho !== oldOrtho) {\n    scene.glplot.redraw(); // TODO: figure out why we need to redraw here?\n\n    scene.glplot.clearRGBA();\n    scene.glplot.dispose();\n    scene.initializeGLPlot();\n  }\n};\n\nproto.isCameraChanged = function (layout) {\n  var scene = this;\n  var cameraData = scene.getCamera();\n  var cameraNestedProp = Lib.nestedProperty(layout, scene.id + '.camera');\n  var cameraDataLastSave = cameraNestedProp.get();\n\n  function same(x, y, i, j) {\n    var vectors = ['up', 'center', 'eye'];\n    var components = ['x', 'y', 'z'];\n    return y[vectors[i]] && x[vectors[i]][components[j]] === y[vectors[i]][components[j]];\n  }\n\n  var changed = false;\n\n  if (cameraDataLastSave === undefined) {\n    changed = true;\n  } else {\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        if (!same(cameraData, cameraDataLastSave, i, j)) {\n          changed = true;\n          break;\n        }\n      }\n    }\n\n    if (!cameraDataLastSave.projection || cameraData.projection && cameraData.projection.type !== cameraDataLastSave.projection.type) {\n      changed = true;\n    }\n  }\n\n  return changed;\n};\n\nproto.isAspectChanged = function (layout) {\n  var scene = this;\n  var aspectData = scene.glplot.getAspectratio();\n  var aspectNestedProp = Lib.nestedProperty(layout, scene.id + '.aspectratio');\n  var aspectDataLastSave = aspectNestedProp.get();\n  return aspectDataLastSave === undefined || aspectDataLastSave.x !== aspectData.x || aspectDataLastSave.y !== aspectData.y || aspectDataLastSave.z !== aspectData.z;\n}; // save camera to user layout (i.e. gd.layout)\n\n\nproto.saveLayout = function (layout) {\n  var scene = this;\n  var fullLayout = scene.fullLayout;\n  var cameraData;\n  var cameraNestedProp;\n  var cameraDataLastSave;\n  var aspectData;\n  var aspectNestedProp;\n  var aspectDataLastSave;\n  var cameraChanged = scene.isCameraChanged(layout);\n  var aspectChanged = scene.isAspectChanged(layout);\n  var hasChanged = cameraChanged || aspectChanged;\n\n  if (hasChanged) {\n    var preGUI = {};\n\n    if (cameraChanged) {\n      cameraData = scene.getCamera();\n      cameraNestedProp = Lib.nestedProperty(layout, scene.id + '.camera');\n      cameraDataLastSave = cameraNestedProp.get();\n      preGUI[scene.id + '.camera'] = cameraDataLastSave;\n    }\n\n    if (aspectChanged) {\n      aspectData = scene.glplot.getAspectratio();\n      aspectNestedProp = Lib.nestedProperty(layout, scene.id + '.aspectratio');\n      aspectDataLastSave = aspectNestedProp.get();\n      preGUI[scene.id + '.aspectratio'] = aspectDataLastSave;\n    }\n\n    Registry.call('_storeDirectGUIEdit', layout, fullLayout._preGUI, preGUI);\n\n    if (cameraChanged) {\n      cameraNestedProp.set(cameraData);\n      var cameraFullNP = Lib.nestedProperty(fullLayout, scene.id + '.camera');\n      cameraFullNP.set(cameraData);\n    }\n\n    if (aspectChanged) {\n      aspectNestedProp.set(aspectData);\n      var aspectFullNP = Lib.nestedProperty(fullLayout, scene.id + '.aspectratio');\n      aspectFullNP.set(aspectData);\n      scene.glplot.redraw();\n    }\n  }\n\n  return hasChanged;\n};\n\nproto.updateFx = function (dragmode, hovermode) {\n  var scene = this;\n  var camera = scene.camera;\n\n  if (camera) {\n    // rotate and orbital are synonymous\n    if (dragmode === 'orbit') {\n      camera.mode = 'orbit';\n      camera.keyBindingMode = 'rotate';\n    } else if (dragmode === 'turntable') {\n      camera.up = [0, 0, 1];\n      camera.mode = 'turntable';\n      camera.keyBindingMode = 'rotate'; // The setter for camera.mode animates the transition to z-up,\n      // but only if we *don't* explicitly set z-up earlier via the\n      // relayout. So push `up` back to layout & fullLayout manually now.\n\n      var gd = scene.graphDiv;\n      var fullLayout = gd._fullLayout;\n      var fullCamera = scene.fullSceneLayout.camera;\n      var x = fullCamera.up.x;\n      var y = fullCamera.up.y;\n      var z = fullCamera.up.z; // only push `up` back to (full)layout if it's going to change\n\n      if (z / Math.sqrt(x * x + y * y + z * z) < 0.999) {\n        var attr = scene.id + '.camera.up';\n        var zUp = {\n          x: 0,\n          y: 0,\n          z: 1\n        };\n        var edits = {};\n        edits[attr] = zUp;\n        var layout = gd.layout;\n        Registry.call('_storeDirectGUIEdit', layout, fullLayout._preGUI, edits);\n        fullCamera.up = zUp;\n        Lib.nestedProperty(layout, attr).set(zUp);\n      }\n    } else {\n      // none rotation modes [pan or zoom]\n      camera.keyBindingMode = dragmode;\n    }\n  } // to put dragmode and hovermode on the same grounds from relayout\n\n\n  scene.fullSceneLayout.hovermode = hovermode;\n};\n\nfunction flipPixels(pixels, w, h) {\n  for (var i = 0, q = h - 1; i < q; ++i, --q) {\n    for (var j = 0; j < w; ++j) {\n      for (var k = 0; k < 4; ++k) {\n        var a = 4 * (w * i + j) + k;\n        var b = 4 * (w * q + j) + k;\n        var tmp = pixels[a];\n        pixels[a] = pixels[b];\n        pixels[b] = tmp;\n      }\n    }\n  }\n}\n\nfunction correctRGB(pixels, w, h) {\n  for (var i = 0; i < h; ++i) {\n    for (var j = 0; j < w; ++j) {\n      var k = 4 * (w * i + j);\n      var a = pixels[k + 3]; // alpha\n\n      if (a > 0) {\n        var q = 255 / a;\n\n        for (var l = 0; l < 3; ++l) {\n          // RGB\n          pixels[k + l] = Math.min(q * pixels[k + l], 255);\n        }\n      }\n    }\n  }\n}\n\nproto.toImage = function (format) {\n  var scene = this;\n  if (!format) format = 'png';\n  if (scene.staticMode) scene.container.appendChild(STATIC_CANVAS); // Force redraw\n\n  scene.glplot.redraw(); // Grab context and yank out pixels\n\n  var gl = scene.glplot.gl;\n  var w = gl.drawingBufferWidth;\n  var h = gl.drawingBufferHeight;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  var pixels = new Uint8Array(w * h * 4);\n  gl.readPixels(0, 0, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n  flipPixels(pixels, w, h);\n  correctRGB(pixels, w, h);\n  var canvas = document.createElement('canvas');\n  canvas.width = w;\n  canvas.height = h;\n  var context = canvas.getContext('2d', {\n    willReadFrequently: true\n  });\n  var imageData = context.createImageData(w, h);\n  imageData.data.set(pixels);\n  context.putImageData(imageData, 0, 0);\n  var dataURL;\n\n  switch (format) {\n    case 'jpeg':\n      dataURL = canvas.toDataURL('image/jpeg');\n      break;\n\n    case 'webp':\n      dataURL = canvas.toDataURL('image/webp');\n      break;\n\n    default:\n      dataURL = canvas.toDataURL('image/png');\n  }\n\n  if (scene.staticMode) scene.container.removeChild(STATIC_CANVAS);\n  return dataURL;\n};\n\nproto.setConvert = function () {\n  var scene = this;\n\n  for (var i = 0; i < 3; i++) {\n    var ax = scene.fullSceneLayout[axisProperties[i]];\n    Axes.setConvert(ax, scene.fullLayout);\n    ax.setScale = Lib.noop;\n  }\n};\n\nproto.make4thDimension = function () {\n  var scene = this;\n  var gd = scene.graphDiv;\n  var fullLayout = gd._fullLayout; // mock axis for hover formatting\n\n  scene._mockAxis = {\n    type: 'linear',\n    showexponent: 'all',\n    exponentformat: 'B'\n  };\n  Axes.setConvert(scene._mockAxis, fullLayout);\n};\n\nmodule.exports = Scene;","map":null,"metadata":{},"sourceType":"script"}