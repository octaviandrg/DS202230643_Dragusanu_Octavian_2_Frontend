{"ast":null,"code":"var minLengthValidator = function minLengthValidator(value, minLength) {\n  return value.length >= minLength;\n};\n\nvar requiredValidator = function requiredValidator(value) {\n  return value.trim() !== '';\n};\n\nvar emailValidator = function emailValidator(value) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(value).toLowerCase());\n};\n\nvar validate = function validate(value, rules) {\n  var isValid = true;\n\n  for (var rule in rules) {\n    switch (rule) {\n      case 'minLength':\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n\n      case 'isRequired':\n        isValid = isValid && requiredValidator(value);\n        break;\n\n      case 'emailValidator':\n        isValid = isValid && emailValidator(value);\n        break;\n\n      default:\n        isValid = true;\n    }\n  }\n\n  return isValid;\n};\n\nexport default validate;","map":{"version":3,"sources":["/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/src/client/components/validators/client-validators.js"],"names":["minLengthValidator","value","minLength","length","requiredValidator","trim","emailValidator","re","test","String","toLowerCase","validate","rules","isValid","rule"],"mappings":"AACA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,SAAR,EAAsB;AAC7C,SAAOD,KAAK,CAACE,MAAN,IAAgBD,SAAvB;AACH,CAFD;;AAIA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAH,KAAK,EAAI;AAC/B,SAAOA,KAAK,CAACI,IAAN,OAAiB,EAAxB;AACH,CAFD;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAL,KAAK,EAAI;AAC5B,MAAMM,EAAE,GAAG,qJAAX;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACR,KAAD,CAAN,CAAcS,WAAd,EAAR,CAAP;AACH,CAHD;;AAKA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACV,KAAD,EAAQW,KAAR,EAAkB;AAC/B,MAAIC,OAAO,GAAG,IAAd;;AAEA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AAEpB,YAAQE,IAAR;AACI,WAAK,WAAL;AAAkBD,QAAAA,OAAO,GAAGA,OAAO,IAAIb,kBAAkB,CAACC,KAAD,EAAQW,KAAK,CAACE,IAAD,CAAb,CAAvC;AACA;;AAElB,WAAK,YAAL;AAAmBD,QAAAA,OAAO,GAAGA,OAAO,IAAIT,iBAAiB,CAACH,KAAD,CAAtC;AACA;;AAEnB,WAAK,gBAAL;AAAuBY,QAAAA,OAAO,GAAGA,OAAO,IAAIP,cAAc,CAACL,KAAD,CAAnC;AACA;;AAEvB;AAASY,QAAAA,OAAO,GAAG,IAAV;AAVb;AAaH;;AAED,SAAOA,OAAP;AACH,CArBD;;AAuBA,eAAeF,QAAf","sourcesContent":["\nconst minLengthValidator = (value, minLength) => {\n    return value.length >= minLength;\n};\n\nconst requiredValidator = value => {\n    return value.trim() !== '';\n};\n\nconst emailValidator = value => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(value).toLowerCase());\n};\n\nconst validate = (value, rules) => {\n    let isValid = true;\n\n    for (let rule in rules) {\n\n        switch (rule) {\n            case 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]);\n                              break;\n\n            case 'isRequired': isValid = isValid && requiredValidator(value);\n                               break;\n\n            case 'emailValidator': isValid = isValid && emailValidator(value);\n                                   break;\n\n            default: isValid = true;\n        }\n\n    }\n\n    return isValid;\n};\n\nexport default validate;\n"]},"metadata":{},"sourceType":"module"}