{"ast":null,"code":"'use strict';\n\nvar setGroupPositions = require('../bar/cross_trace_calc').setGroupPositions;\n\nmodule.exports = function crossTraceCalc(gd, plotinfo) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var calcdata = gd.calcdata;\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  var waterfalls = [];\n  var waterfallsVert = [];\n  var waterfallsHorz = [];\n  var cd, i;\n\n  for (i = 0; i < fullData.length; i++) {\n    var fullTrace = fullData[i];\n\n    if (fullTrace.visible === true && fullTrace.xaxis === xa._id && fullTrace.yaxis === ya._id && fullTrace.type === 'waterfall') {\n      cd = calcdata[i];\n\n      if (fullTrace.orientation === 'h') {\n        waterfallsHorz.push(cd);\n      } else {\n        waterfallsVert.push(cd);\n      }\n\n      waterfalls.push(cd);\n    }\n  }\n\n  var opts = {\n    mode: fullLayout.waterfallmode,\n    norm: fullLayout.waterfallnorm,\n    gap: fullLayout.waterfallgap,\n    groupgap: fullLayout.waterfallgroupgap\n  };\n  setGroupPositions(gd, xa, ya, waterfallsVert, opts);\n  setGroupPositions(gd, ya, xa, waterfallsHorz, opts);\n\n  for (i = 0; i < waterfalls.length; i++) {\n    cd = waterfalls[i];\n\n    for (var j = 0; j < cd.length; j++) {\n      var di = cd[j];\n\n      if (di.isSum === false) {\n        di.s0 += j === 0 ? 0 : cd[j - 1].s;\n      }\n\n      if (j + 1 < cd.length) {\n        cd[j].nextP0 = cd[j + 1].p0;\n        cd[j].nextS0 = cd[j + 1].s0;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}