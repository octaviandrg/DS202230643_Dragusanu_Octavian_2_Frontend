{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar mesh3dAttrs = require('../mesh3d/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n  x: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the x coordinates of the vector field.'\n  },\n  y: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the y coordinates of the vector field.'\n  },\n  z: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: 'Sets the z coordinates of the vector field.'\n  },\n  u: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the x components of the vector field.'\n  },\n  v: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the y components of the vector field.'\n  },\n  w: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the z components of the vector field.'\n  },\n  starts: {\n    x: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the x components of the starting position of the streamtubes'].join(' ')\n    },\n    y: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the y components of the starting position of the streamtubes'].join(' ')\n    },\n    z: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the z components of the starting position of the streamtubes'].join(' ')\n    },\n    editType: 'calc'\n  },\n  maxdisplayed: {\n    valType: 'integer',\n    min: 0,\n    dflt: 1000,\n    editType: 'calc',\n    description: ['The maximum number of displayed segments in a streamtube.'].join(' ')\n  },\n  // TODO\n  //\n  // Should add 'absolute' (like cone traces have), but currently gl-streamtube3d's\n  // `absoluteTubeSize` doesn't behave well enough for our needs.\n  //\n  // 'fixed' would be a nice addition to plot stream 'lines', see\n  // https://github.com/plotly/plotly.js/commit/812be20750e21e0a1831975001c248d365850f73#r29129877\n  //\n  // sizemode: {\n  //     valType: 'enumerated',\n  //     values: ['scaled', 'absolute', 'fixed'],\n  //     dflt: 'scaled',\n  //     editType: 'calc',\n  //     description: [\n  //         'Sets the mode by which the streamtubes are sized.'\n  //     ].join(' ')\n  // },\n  sizeref: {\n    valType: 'number',\n    editType: 'calc',\n    min: 0,\n    dflt: 1,\n    description: ['The scaling factor for the streamtubes.', 'The default is 1, which avoids two max divergence tubes from touching', 'at adjacent starting positions.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: ['Sets a text element associated with this trace.', 'If trace `hoverinfo` contains a *text* flag,', 'this text element will be seen in all hover labels.', 'Note that streamtube traces do not support array `text` values.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'calc'\n  }, {\n    keys: ['tubex', 'tubey', 'tubez', 'tubeu', 'tubev', 'tubew', 'norm', 'divergence']\n  }),\n  uhoverformat: axisHoverFormat('u', 1),\n  vhoverformat: axisHoverFormat('v', 1),\n  whoverformat: axisHoverFormat('w', 1),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z'),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n};\nextendFlat(attrs, colorScaleAttrs('', {\n  colorAttr: 'u/v/w norm',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}));\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function (k) {\n  attrs[k] = mesh3dAttrs[k];\n});\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n  editType: 'calc',\n  flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'divergence', 'text', 'name'],\n  dflt: 'x+y+z+norm+text+name'\n});\nattrs.transforms = undefined;\nmodule.exports = attrs;","map":null,"metadata":{},"sourceType":"script"}