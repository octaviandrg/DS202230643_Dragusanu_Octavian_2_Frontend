{"ast":null,"code":"'use strict';\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar Lib = require('../../lib');\n\nvar convertColumnData = require('../heatmap/convert_column_xyz');\n\nvar clean2dArray = require('../heatmap/clean_2d_array');\n\nvar interp2d = require('../heatmap/interp2d');\n\nvar findEmpties = require('../heatmap/find_empties');\n\nvar makeBoundArray = require('../heatmap/make_bound_array');\n\nvar supplyDefaults = require('./defaults');\n\nvar lookupCarpet = require('../carpet/lookup_carpetid');\n\nvar setContours = require('../contour/set_contours'); // most is the same as heatmap calc, then adjust it\n// though a few things inside heatmap calc still look for\n// contour maps, because the makeBoundArray calls are too entangled\n\n\nmodule.exports = function calc(gd, trace) {\n  var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n  if (!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n\n  if (!trace.a || !trace.b) {\n    // Look up the original incoming carpet data:\n    var carpetdata = gd.data[carpet.index]; // Look up the incoming trace data, *except* perform a shallow\n    // copy so that we're not actually modifying it when we use it\n    // to supply defaults:\n\n    var tracedata = gd.data[trace.index]; // var tracedata = extendFlat({}, gd.data[trace.index]);\n    // If the data is not specified\n\n    if (!tracedata.a) tracedata.a = carpetdata.a;\n    if (!tracedata.b) tracedata.b = carpetdata.b;\n    supplyDefaults(tracedata, trace, trace._defaultColor, gd._fullLayout);\n  }\n\n  var cd = heatmappishCalc(gd, trace);\n  setContours(trace, trace._z);\n  return cd;\n};\n\nfunction heatmappishCalc(gd, trace) {\n  // prepare the raw data\n  // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n  var carpet = trace._carpetTrace;\n  var aax = carpet.aaxis;\n  var bax = carpet.baxis;\n  var a, a0, da, b, b0, db, z; // cancel minimum tick spacings (only applies to bars and boxes)\n\n  aax._minDtick = 0;\n  bax._minDtick = 0;\n  if (Lib.isArray1D(trace.z)) convertColumnData(trace, aax, bax, 'a', 'b', ['z']);\n  a = trace._a = trace._a || trace.a;\n  b = trace._b = trace._b || trace.b;\n  a = a ? aax.makeCalcdata(trace, '_a') : [];\n  b = b ? bax.makeCalcdata(trace, '_b') : [];\n  a0 = trace.a0 || 0;\n  da = trace.da || 1;\n  b0 = trace.b0 || 0;\n  db = trace.db || 1;\n  z = trace._z = clean2dArray(trace._z || trace.z, trace.transpose);\n  trace._emptypoints = findEmpties(z);\n  interp2d(z, trace._emptypoints); // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n\n  var xlen = Lib.maxRowLength(z);\n  var xIn = trace.xtype === 'scaled' ? '' : a;\n  var xArray = makeBoundArray(trace, xIn, a0, da, xlen, aax);\n  var yIn = trace.ytype === 'scaled' ? '' : b;\n  var yArray = makeBoundArray(trace, yIn, b0, db, z.length, bax);\n  var cd0 = {\n    a: xArray,\n    b: yArray,\n    z: z\n  };\n\n  if (trace.contours.type === 'levels' && trace.contours.coloring !== 'none') {\n    // auto-z and autocolorscale if applicable\n    colorscaleCalc(gd, trace, {\n      vals: z,\n      containerStr: '',\n      cLetter: 'z'\n    });\n  }\n\n  return [cd0];\n}","map":null,"metadata":{},"sourceType":"script"}