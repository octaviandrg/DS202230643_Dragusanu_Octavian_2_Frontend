{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar constants = require('./constants');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar maxRowLength = require('../../lib').maxRowLength;\n\nvar getImageSize = require('./helpers').getImageSize;\n\nmodule.exports = function calc(gd, trace) {\n  var h;\n  var w;\n\n  if (trace._hasZ) {\n    h = trace.z.length;\n    w = maxRowLength(trace.z);\n  } else if (trace._hasSource) {\n    var size = getImageSize(trace.source);\n    h = size.height;\n    w = size.width;\n  }\n\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var x0 = xa.d2c(trace.x0) - trace.dx / 2;\n  var y0 = ya.d2c(trace.y0) - trace.dy / 2; // Set axis range\n\n  var i;\n  var xrange = [x0, x0 + w * trace.dx];\n  var yrange = [y0, y0 + h * trace.dy];\n  if (xa && xa.type === 'log') for (i = 0; i < w; i++) {\n    xrange.push(x0 + i * trace.dx);\n  }\n  if (ya && ya.type === 'log') for (i = 0; i < h; i++) {\n    yrange.push(y0 + i * trace.dy);\n  }\n  trace._extremes[xa._id] = Axes.findExtremes(xa, xrange);\n  trace._extremes[ya._id] = Axes.findExtremes(ya, yrange);\n  trace._scaler = makeScaler(trace);\n  var cd0 = {\n    x0: x0,\n    y0: y0,\n    z: trace.z,\n    w: w,\n    h: h\n  };\n  return [cd0];\n};\n\nfunction scale(zero, ratio, min, max) {\n  return function (c) {\n    return Lib.constrain((c - zero) * ratio, min, max);\n  };\n}\n\nfunction constrain(min, max) {\n  return function (c) {\n    return Lib.constrain(c, min, max);\n  };\n} // Generate a function to scale color components according to zmin/zmax and the colormodel\n\n\nfunction makeScaler(trace) {\n  var cr = constants.colormodel[trace.colormodel];\n  var colormodel = cr.colormodel || trace.colormodel;\n  var n = colormodel.length;\n  trace._sArray = []; // Loop over all color components\n\n  for (var k = 0; k < n; k++) {\n    if (cr.min[k] !== trace.zmin[k] || cr.max[k] !== trace.zmax[k]) {\n      trace._sArray.push(scale(trace.zmin[k], (cr.max[k] - cr.min[k]) / (trace.zmax[k] - trace.zmin[k]), cr.min[k], cr.max[k]));\n    } else {\n      trace._sArray.push(constrain(cr.min[k], cr.max[k]));\n    }\n  }\n\n  return function (pixel) {\n    var c = pixel.slice(0, n);\n\n    for (var k = 0; k < n; k++) {\n      var ck = c[k];\n      if (!isNumeric(ck)) return false;\n      c[k] = trace._sArray[k](ck);\n    }\n\n    return c;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}