{"ast":null,"code":"'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar line = extendFlat({\n  editType: 'calc'\n}, colorScaleAttrs('line', {\n  editTypeOverride: 'calc'\n}), {\n  shape: {\n    valType: 'enumerated',\n    values: ['linear', 'hspline'],\n    dflt: 'linear',\n    editType: 'plot',\n    description: ['Sets the shape of the paths.', 'If `linear`, paths are composed of straight lines.', 'If `hspline`, paths are composed of horizontal curved splines'].join(' ')\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'plot',\n    arrayOk: false\n  }, {\n    keys: ['count', 'probability'],\n    description: ['This value here applies when hovering over lines.'].join(' ')\n  })\n});\nmodule.exports = {\n  domain: domainAttrs({\n    name: 'parcats',\n    trace: true,\n    editType: 'calc'\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['count', 'probability'],\n    editType: 'plot',\n    arrayOk: false\n  }),\n  hoveron: {\n    valType: 'enumerated',\n    values: ['category', 'color', 'dimension'],\n    dflt: 'category',\n    editType: 'plot',\n    description: ['Sets the hover interaction mode for the parcats diagram.', 'If `category`, hover interaction take place per category.', 'If `color`, hover interactions take place per color per category.', 'If `dimension`, hover interactions take place across all categories per dimension.'].join(' ')\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'plot',\n    arrayOk: false\n  }, {\n    keys: ['count', 'probability', 'category', 'categorycount', 'colorcount', 'bandcolorcount'],\n    description: ['This value here applies when hovering over dimensions.', 'Note that `*categorycount`, *colorcount* and *bandcolorcount*', 'are only available when `hoveron` contains the *color* flag'].join(' ')\n  }),\n  arrangement: {\n    valType: 'enumerated',\n    values: ['perpendicular', 'freeform', 'fixed'],\n    dflt: 'perpendicular',\n    editType: 'plot',\n    description: ['Sets the drag interaction mode for categories and dimensions.', 'If `perpendicular`, the categories can only move along a line perpendicular to the paths.', 'If `freeform`, the categories can freely move on the plane.', 'If `fixed`, the categories and dimensions are stationary.'].join(' ')\n  },\n  bundlecolors: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'plot',\n    description: 'Sort paths so that like colors are bundled together within each category.'\n  },\n  sortpaths: {\n    valType: 'enumerated',\n    values: ['forward', 'backward'],\n    dflt: 'forward',\n    editType: 'plot',\n    description: ['Sets the path sorting algorithm.', 'If `forward`, sort paths based on dimension categories from left to right.', 'If `backward`, sort paths based on dimensions categories from right to left.'].join(' ')\n  },\n  labelfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the font for the `dimension` labels.'\n  }),\n  tickfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the font for the `category` labels.'\n  }),\n  dimensions: {\n    _isLinkedToArray: 'dimension',\n    label: {\n      valType: 'string',\n      editType: 'calc',\n      description: 'The shown name of the dimension.'\n    },\n    categoryorder: {\n      valType: 'enumerated',\n      values: ['trace', 'category ascending', 'category descending', 'array'],\n      dflt: 'trace',\n      editType: 'calc',\n      description: ['Specifies the ordering logic for the categories in the dimension.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.', 'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'].join(' ')\n    },\n    categoryarray: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the order in which categories in this dimension appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')\n    },\n    ticktext: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets alternative tick labels for the categories in this dimension.', 'Only has an effect if `categoryorder` is set to *array*.', 'Should be an array the same length as `categoryarray`', 'Used with `categoryorder`.'].join(' ')\n    },\n    values: {\n      valType: 'data_array',\n      dflt: [],\n      editType: 'calc',\n      description: ['Dimension values. `values[n]` represents the category value of the `n`th point in the dataset,', 'therefore the `values` vector for all dimensions must be the same (longer vectors', 'will be truncated).'].join(' ')\n    },\n    displayindex: {\n      valType: 'integer',\n      editType: 'calc',\n      description: ['The display index of dimension, from left to right, zero indexed, defaults to dimension', 'index.'].join(' ')\n    },\n    editType: 'calc',\n    description: 'The dimensions (variables) of the parallel categories diagram.',\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'calc',\n      description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n    }\n  },\n  line: line,\n  counts: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    arrayOk: true,\n    editType: 'calc',\n    description: ['The number of observations represented by each state. Defaults to 1 so that each state represents', 'one observation'].join(' ')\n  },\n  // Hide unsupported top-level properties from plot-schema\n  customdata: undefined,\n  hoverlabel: undefined,\n  ids: undefined,\n  legendgroup: undefined,\n  legendrank: undefined,\n  opacity: undefined,\n  selectedpoints: undefined,\n  showlegend: undefined\n};","map":null,"metadata":{},"sourceType":"script"}