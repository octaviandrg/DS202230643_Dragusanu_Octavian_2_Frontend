{"ast":null,"code":"'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar Lib = require('../../lib');\n\nmodule.exports = function setContours(trace, vals) {\n  var contours = trace.contours; // check if we need to auto-choose contour levels\n\n  if (trace.autocontour) {\n    // N.B. do not try to use coloraxis cmin/cmax,\n    // these values here are meant to remain \"per-trace\" for now\n    var zmin = trace.zmin;\n    var zmax = trace.zmax;\n\n    if (trace.zauto || zmin === undefined) {\n      zmin = Lib.aggNums(Math.min, null, vals);\n    }\n\n    if (trace.zauto || zmax === undefined) {\n      zmax = Lib.aggNums(Math.max, null, vals);\n    }\n\n    var dummyAx = autoContours(zmin, zmax, trace.ncontours);\n    contours.size = dummyAx.dtick;\n    contours.start = Axes.tickFirst(dummyAx);\n    dummyAx.range.reverse();\n    contours.end = Axes.tickFirst(dummyAx);\n    if (contours.start === zmin) contours.start += contours.size;\n    if (contours.end === zmax) contours.end -= contours.size; // if you set a small ncontours, *and* the ends are exactly on zmin/zmax\n    // there's an edge case where start > end now. Make sure there's at least\n    // one meaningful contour, put it midway between the crossed values\n\n    if (contours.start > contours.end) {\n      contours.start = contours.end = (contours.start + contours.end) / 2;\n    } // copy auto-contour info back to the source data.\n    // previously we copied the whole contours object back, but that had\n    // other info (coloring, showlines) that should be left to supplyDefaults\n\n\n    if (!trace._input.contours) trace._input.contours = {};\n    Lib.extendFlat(trace._input.contours, {\n      start: contours.start,\n      end: contours.end,\n      size: contours.size\n    });\n    trace._input.autocontour = true;\n  } else if (contours.type !== 'constraint') {\n    // sanity checks on manually-supplied start/end/size\n    var start = contours.start;\n    var end = contours.end;\n    var inputContours = trace._input.contours;\n\n    if (start > end) {\n      contours.start = inputContours.start = end;\n      end = contours.end = inputContours.end = start;\n      start = contours.start;\n    }\n\n    if (!(contours.size > 0)) {\n      var sizeOut;\n      if (start === end) sizeOut = 1;else sizeOut = autoContours(start, end, trace.ncontours).dtick;\n      inputContours.size = contours.size = sizeOut;\n    }\n  }\n};\n/*\n * autoContours: make a dummy axis object with dtick we can use\n * as contours.size, and if needed we can use Axes.tickFirst\n * with this axis object to calculate the start and end too\n *\n * start: the value to start the contours at\n * end: the value to end at (must be > start)\n * ncontours: max number of contours to make, like roughDTick\n *\n * returns: an axis object\n */\n\n\nfunction autoContours(start, end, ncontours) {\n  var dummyAx = {\n    type: 'linear',\n    range: [start, end]\n  };\n  Axes.autoTicks(dummyAx, (end - start) / (ncontours || 15));\n  return dummyAx;\n}","map":null,"metadata":{},"sourceType":"script"}