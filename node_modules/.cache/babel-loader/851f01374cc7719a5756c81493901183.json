{"ast":null,"code":"var tarjan = require('strongly-connected-components');\n\nmodule.exports = function findCircuits(edges, cb) {\n  var circuits = []; // Output\n\n  var stack = [];\n  var blocked = [];\n  var B = {};\n  var Ak = [];\n  var s;\n\n  function unblock(u) {\n    blocked[u] = false;\n\n    if (B.hasOwnProperty(u)) {\n      Object.keys(B[u]).forEach(function (w) {\n        delete B[u][w];\n\n        if (blocked[w]) {\n          unblock(w);\n        }\n      });\n    }\n  }\n\n  function circuit(v) {\n    var found = false;\n    stack.push(v);\n    blocked[v] = true; // L1\n\n    var i;\n    var w;\n\n    for (i = 0; i < Ak[v].length; i++) {\n      w = Ak[v][i];\n\n      if (w === s) {\n        output(s, stack);\n        found = true;\n      } else if (!blocked[w]) {\n        found = circuit(w);\n      }\n    } // L2\n\n\n    if (found) {\n      unblock(v);\n    } else {\n      for (i = 0; i < Ak[v].length; i++) {\n        w = Ak[v][i];\n        var entry = B[w];\n\n        if (!entry) {\n          entry = {};\n          B[w] = entry;\n        }\n\n        entry[w] = true;\n      }\n    }\n\n    stack.pop();\n    return found;\n  }\n\n  function output(start, stack) {\n    var cycle = [].concat(stack).concat(start);\n\n    if (cb) {\n      cb(cycle);\n    } else {\n      circuits.push(cycle);\n    }\n  }\n\n  function subgraph(minId) {\n    // Remove edges with indice smaller than minId\n    for (var i = 0; i < edges.length; i++) {\n      if (i < minId || !edges[i]) edges[i] = [];\n      edges[i] = edges[i].filter(function (i) {\n        return i >= minId;\n      });\n    }\n  }\n\n  function adjacencyStructureSCC(from) {\n    // Make subgraph starting from vertex minId\n    subgraph(from);\n    var g = edges; // Find strongly connected components using Tarjan algorithm\n\n    var sccs = tarjan(g); // Filter out trivial connected components (ie. made of one node)\n\n    var ccs = sccs.components.filter(function (scc) {\n      return scc.length > 1;\n    }); // Find least vertex\n\n    var leastVertex = Infinity;\n    var leastVertexComponent;\n\n    for (var i = 0; i < ccs.length; i++) {\n      for (var j = 0; j < ccs[i].length; j++) {\n        if (ccs[i][j] < leastVertex) {\n          leastVertex = ccs[i][j];\n          leastVertexComponent = i;\n        }\n      }\n    }\n\n    var cc = ccs[leastVertexComponent];\n    if (!cc) return false; // Return the adjacency list of first component\n\n    var adjList = edges.map(function (l, index) {\n      if (cc.indexOf(index) === -1) return [];\n      return l.filter(function (i) {\n        return cc.indexOf(i) !== -1;\n      });\n    });\n    return {\n      leastVertex: leastVertex,\n      adjList: adjList\n    };\n  }\n\n  s = 0;\n  var n = edges.length;\n\n  while (s < n) {\n    // find strong component with least vertex in\n    // subgraph starting from vertex `s`\n    var p = adjacencyStructureSCC(s); // Its least vertex\n\n    s = p.leastVertex; // Its adjacency list\n\n    Ak = p.adjList;\n\n    if (Ak) {\n      for (var i = 0; i < Ak.length; i++) {\n        for (var j = 0; j < Ak[i].length; j++) {\n          var vertexId = Ak[i][j];\n          blocked[+vertexId] = false;\n          B[vertexId] = {};\n        }\n      }\n\n      circuit(s);\n      s = s + 1;\n    } else {\n      s = n;\n    }\n  }\n\n  if (cb) {\n    return;\n  } else {\n    return circuits;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}