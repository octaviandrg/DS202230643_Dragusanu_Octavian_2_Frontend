{"ast":null,"code":"/** @module  gl-util/context */\n'use strict';\n\nvar pick = require('pick-by-alias');\n\nmodule.exports = function setContext(o) {\n  if (!o) o = {};else if (typeof o === 'string') o = {\n    container: o // HTMLCanvasElement\n\n  };\n\n  if (isCanvas(o)) {\n    o = {\n      container: o\n    };\n  } // HTMLElement\n  else if (isElement(o)) {\n      o = {\n        container: o\n      };\n    } // WebGLContext\n    else if (isContext(o)) {\n        o = {\n          gl: o\n        };\n      } // options object\n      else {\n          o = pick(o, {\n            container: 'container target element el canvas holder parent parentNode wrapper use ref root node',\n            gl: 'gl context webgl glContext',\n            attrs: 'attributes attrs contextAttributes',\n            pixelRatio: 'pixelRatio pxRatio px ratio pxratio pixelratio',\n            width: 'w width',\n            height: 'h height'\n          }, true);\n        }\n\n  if (!o.pixelRatio) o.pixelRatio = global.pixelRatio || 1; // make sure there is container and canvas\n\n  if (o.gl) {\n    return o.gl;\n  }\n\n  if (o.canvas) {\n    o.container = o.canvas.parentNode;\n  }\n\n  if (o.container) {\n    if (typeof o.container === 'string') {\n      var c = document.querySelector(o.container);\n      if (!c) throw Error('Element ' + o.container + ' is not found');\n      o.container = c;\n    }\n\n    if (isCanvas(o.container)) {\n      o.canvas = o.container;\n      o.container = o.canvas.parentNode;\n    } else if (!o.canvas) {\n      o.canvas = createCanvas();\n      o.container.appendChild(o.canvas);\n      resize(o);\n    }\n  } // blank new canvas\n  else if (!o.canvas) {\n      if (typeof document !== 'undefined') {\n        o.container = document.body || document.documentElement;\n        o.canvas = createCanvas();\n        o.container.appendChild(o.canvas);\n        resize(o);\n      } else {\n        throw Error('Not DOM environment. Use headless-gl.');\n      }\n    } // make sure there is context\n\n\n  if (!o.gl) {\n    ['webgl', 'experimental-webgl', 'webgl-experimental'].some(function (c) {\n      try {\n        o.gl = o.canvas.getContext(c, o.attrs);\n      } catch (e) {\n        /* no-op */\n      }\n\n      return o.gl;\n    });\n  }\n\n  return o.gl;\n};\n\nfunction resize(o) {\n  if (o.container) {\n    if (o.container == document.body) {\n      if (!document.body.style.width) o.canvas.width = o.width || o.pixelRatio * global.innerWidth;\n      if (!document.body.style.height) o.canvas.height = o.height || o.pixelRatio * global.innerHeight;\n    } else {\n      var bounds = o.container.getBoundingClientRect();\n      o.canvas.width = o.width || bounds.right - bounds.left;\n      o.canvas.height = o.height || bounds.bottom - bounds.top;\n    }\n  }\n}\n\nfunction isCanvas(e) {\n  return typeof e.getContext === 'function' && 'width' in e && 'height' in e;\n}\n\nfunction isElement(e) {\n  return typeof e.nodeName === 'string' && typeof e.appendChild === 'function' && typeof e.getBoundingClientRect === 'function';\n}\n\nfunction isContext(e) {\n  return typeof e.drawArrays === 'function' || typeof e.drawElements === 'function';\n}\n\nfunction createCanvas() {\n  var canvas = document.createElement('canvas');\n  canvas.style.position = 'absolute';\n  canvas.style.top = 0;\n  canvas.style.left = 0;\n  return canvas;\n}","map":null,"metadata":{},"sourceType":"script"}