{"ast":null,"code":"'use strict';\n\nvar Color = require('../../components/color');\n\nvar Template = require('../../plot_api/plot_template');\n\nvar Lib = require('../../lib');\n\nvar handleSubplotDefaults = require('../subplot_defaults');\n\nvar handleTickLabelDefaults = require('../cartesian/tick_label_defaults');\n\nvar handlePrefixSuffixDefaults = require('../cartesian/prefix_suffix_defaults');\n\nvar handleTickMarkDefaults = require('../cartesian/tick_mark_defaults');\n\nvar handleTickValueDefaults = require('../cartesian/tick_value_defaults');\n\nvar handleLineGridDefaults = require('../cartesian/line_grid_defaults');\n\nvar layoutAttributes = require('./layout_attributes');\n\nvar axesNames = ['aaxis', 'baxis', 'caxis'];\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    type: 'ternary',\n    attributes: layoutAttributes,\n    handleDefaults: handleTernaryDefaults,\n    font: layoutOut.font,\n    paper_bgcolor: layoutOut.paper_bgcolor\n  });\n};\n\nfunction handleTernaryDefaults(ternaryLayoutIn, ternaryLayoutOut, coerce, options) {\n  var bgColor = coerce('bgcolor');\n  var sum = coerce('sum');\n  options.bgColor = Color.combine(bgColor, options.paper_bgcolor);\n  var axName, containerIn, containerOut; // TODO: allow most (if not all) axis attributes to be set\n  // in the outer container and used as defaults in the individual axes?\n\n  for (var j = 0; j < axesNames.length; j++) {\n    axName = axesNames[j];\n    containerIn = ternaryLayoutIn[axName] || {};\n    containerOut = Template.newContainer(ternaryLayoutOut, axName);\n    containerOut._name = axName;\n    handleAxisDefaults(containerIn, containerOut, options, ternaryLayoutOut);\n  } // if the min values contradict each other, set them all to default (0)\n  // and delete *all* the inputs so the user doesn't get confused later by\n  // changing one and having them all change.\n\n\n  var aaxis = ternaryLayoutOut.aaxis;\n  var baxis = ternaryLayoutOut.baxis;\n  var caxis = ternaryLayoutOut.caxis;\n\n  if (aaxis.min + baxis.min + caxis.min >= sum) {\n    aaxis.min = 0;\n    baxis.min = 0;\n    caxis.min = 0;\n    if (ternaryLayoutIn.aaxis) delete ternaryLayoutIn.aaxis.min;\n    if (ternaryLayoutIn.baxis) delete ternaryLayoutIn.baxis.min;\n    if (ternaryLayoutIn.caxis) delete ternaryLayoutIn.caxis.min;\n  }\n}\n\nfunction handleAxisDefaults(containerIn, containerOut, options, ternaryLayoutOut) {\n  var axAttrs = layoutAttributes[containerOut._name];\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(containerIn, containerOut, axAttrs, attr, dflt);\n  }\n\n  coerce('uirevision', ternaryLayoutOut.uirevision);\n  containerOut.type = 'linear'; // no other types allowed for ternary\n\n  var dfltColor = coerce('color'); // if axis.color was provided, use it for fonts too; otherwise,\n  // inherit from global font color in case that was provided.\n\n  var dfltFontColor = dfltColor !== axAttrs.color.dflt ? dfltColor : options.font.color;\n  var axName = containerOut._name;\n  var letterUpper = axName.charAt(0).toUpperCase();\n  var dfltTitle = 'Component ' + letterUpper;\n  var title = coerce('title.text', dfltTitle);\n  containerOut._hovertitle = title === dfltTitle ? title : letterUpper;\n  Lib.coerceFont(coerce, 'title.font', {\n    family: options.font.family,\n    size: Lib.bigFont(options.font.size),\n    color: dfltFontColor\n  }); // range is just set by 'min' - max is determined by the other axes mins\n\n  coerce('min');\n  handleTickValueDefaults(containerIn, containerOut, coerce, 'linear');\n  handlePrefixSuffixDefaults(containerIn, containerOut, coerce, 'linear');\n  handleTickLabelDefaults(containerIn, containerOut, coerce, 'linear');\n  handleTickMarkDefaults(containerIn, containerOut, coerce, {\n    outerTicks: true\n  });\n  var showTickLabels = coerce('showticklabels');\n\n  if (showTickLabels) {\n    Lib.coerceFont(coerce, 'tickfont', {\n      family: options.font.family,\n      size: options.font.size,\n      color: dfltFontColor\n    });\n    coerce('tickangle');\n    coerce('tickformat');\n  }\n\n  handleLineGridDefaults(containerIn, containerOut, coerce, {\n    dfltColor: dfltColor,\n    bgColor: options.bgColor,\n    // default grid color is darker here (60%, vs cartesian default ~91%)\n    // because the grid is not square so the eye needs heavier cues to follow\n    blend: 60,\n    showLine: true,\n    showGrid: true,\n    noZeroLine: true,\n    attributes: axAttrs\n  });\n  coerce('hoverformat');\n  coerce('layer');\n}","map":null,"metadata":{},"sourceType":"script"}