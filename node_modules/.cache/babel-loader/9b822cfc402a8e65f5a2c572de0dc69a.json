{"ast":null,"code":"'use strict';\n\nvar Axes = require('../cartesian/axes');\n\nvar str2RGBArray = require('../../lib/str2rgbarray');\n\nfunction Axes2DOptions(scene) {\n  this.scene = scene;\n  this.gl = scene.gl;\n  this.pixelRatio = scene.pixelRatio;\n  this.screenBox = [0, 0, 1, 1];\n  this.viewBox = [0, 0, 1, 1];\n  this.dataBox = [-1, -1, 1, 1];\n  this.borderLineEnable = [false, false, false, false];\n  this.borderLineWidth = [1, 1, 1, 1];\n  this.borderLineColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.ticks = [[], []];\n  this.tickEnable = [true, true, false, false];\n  this.tickPad = [15, 15, 15, 15];\n  this.tickAngle = [0, 0, 0, 0];\n  this.tickColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.tickMarkLength = [0, 0, 0, 0];\n  this.tickMarkWidth = [0, 0, 0, 0];\n  this.tickMarkColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.labels = ['x', 'y'];\n  this.labelEnable = [true, true, false, false];\n  this.labelAngle = [0, Math.PI / 2, 0, 3.0 * Math.PI / 2];\n  this.labelPad = [15, 15, 15, 15];\n  this.labelSize = [12, 12];\n  this.labelFont = ['sans-serif', 'sans-serif'];\n  this.labelColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.title = '';\n  this.titleEnable = true;\n  this.titleCenter = [0, 0, 0, 0];\n  this.titleAngle = 0;\n  this.titleColor = [0, 0, 0, 1];\n  this.titleFont = 'sans-serif';\n  this.titleSize = 18;\n  this.gridLineEnable = [true, true];\n  this.gridLineColor = [[0, 0, 0, 0.5], [0, 0, 0, 0.5]];\n  this.gridLineWidth = [1, 1];\n  this.zeroLineEnable = [true, true];\n  this.zeroLineWidth = [1, 1];\n  this.zeroLineColor = [[0, 0, 0, 1], [0, 0, 0, 1]];\n  this.borderColor = [0, 0, 0, 0];\n  this.backgroundColor = [0, 0, 0, 0];\n  this.static = this.scene.staticPlot;\n}\n\nvar proto = Axes2DOptions.prototype;\nvar AXES = ['xaxis', 'yaxis'];\n\nproto.merge = function (options) {\n  // titles are rendered in SVG\n  this.titleEnable = false;\n  this.backgroundColor = str2RGBArray(options.plot_bgcolor);\n  var axisName, ax, axTitle, axMirror;\n  var hasAxisInDfltPos, hasAxisInAltrPos, hasSharedAxis, mirrorLines, mirrorTicks;\n  var i, j;\n\n  for (i = 0; i < 2; ++i) {\n    axisName = AXES[i];\n    var axisLetter = axisName.charAt(0); // get options relevant to this subplot,\n    // '_name' is e.g. xaxis, xaxis2, yaxis, yaxis4 ...\n\n    ax = options[this.scene[axisName]._name];\n    axTitle = ax.title.text === this.scene.fullLayout._dfltTitle[axisLetter] ? '' : ax.title.text;\n\n    for (j = 0; j <= 2; j += 2) {\n      this.labelEnable[i + j] = false;\n      this.labels[i + j] = axTitle;\n      this.labelColor[i + j] = str2RGBArray(ax.title.font.color);\n      this.labelFont[i + j] = ax.title.font.family;\n      this.labelSize[i + j] = ax.title.font.size;\n      this.labelPad[i + j] = this.getLabelPad(axisName, ax);\n      this.tickEnable[i + j] = false;\n      this.tickColor[i + j] = str2RGBArray((ax.tickfont || {}).color);\n      this.tickAngle[i + j] = ax.tickangle === 'auto' ? 0 : Math.PI * -ax.tickangle / 180;\n      this.tickPad[i + j] = this.getTickPad(ax);\n      this.tickMarkLength[i + j] = 0;\n      this.tickMarkWidth[i + j] = ax.tickwidth || 0;\n      this.tickMarkColor[i + j] = str2RGBArray(ax.tickcolor);\n      this.borderLineEnable[i + j] = false;\n      this.borderLineColor[i + j] = str2RGBArray(ax.linecolor);\n      this.borderLineWidth[i + j] = ax.linewidth || 0;\n    }\n\n    hasSharedAxis = this.hasSharedAxis(ax);\n    hasAxisInDfltPos = this.hasAxisInDfltPos(axisName, ax) && !hasSharedAxis;\n    hasAxisInAltrPos = this.hasAxisInAltrPos(axisName, ax) && !hasSharedAxis;\n    axMirror = ax.mirror || false;\n    mirrorLines = hasSharedAxis ? String(axMirror).indexOf('all') !== -1 : // 'all' or 'allticks'\n    !!axMirror; // all but false\n\n    mirrorTicks = hasSharedAxis ? axMirror === 'allticks' : String(axMirror).indexOf('ticks') !== -1; // 'ticks' or 'allticks'\n    // Axis titles and tick labels can only appear of one side of the scene\n    //  and are never show on subplots that share existing axes.\n\n    if (hasAxisInDfltPos) this.labelEnable[i] = true;else if (hasAxisInAltrPos) this.labelEnable[i + 2] = true;\n    if (hasAxisInDfltPos) this.tickEnable[i] = ax.showticklabels;else if (hasAxisInAltrPos) this.tickEnable[i + 2] = ax.showticklabels; // Grid lines and ticks can appear on both sides of the scene\n    //  and can appear on subplot that share existing axes via `ax.mirror`.\n\n    if (hasAxisInDfltPos || mirrorLines) this.borderLineEnable[i] = ax.showline;\n    if (hasAxisInAltrPos || mirrorLines) this.borderLineEnable[i + 2] = ax.showline;\n    if (hasAxisInDfltPos || mirrorTicks) this.tickMarkLength[i] = this.getTickMarkLength(ax);\n    if (hasAxisInAltrPos || mirrorTicks) this.tickMarkLength[i + 2] = this.getTickMarkLength(ax);\n    this.gridLineEnable[i] = ax.showgrid;\n    this.gridLineColor[i] = str2RGBArray(ax.gridcolor);\n    this.gridLineWidth[i] = ax.gridwidth;\n    this.zeroLineEnable[i] = ax.zeroline;\n    this.zeroLineColor[i] = str2RGBArray(ax.zerolinecolor);\n    this.zeroLineWidth[i] = ax.zerolinewidth;\n  }\n}; // is an axis shared with an already-drawn subplot ?\n\n\nproto.hasSharedAxis = function (ax) {\n  var scene = this.scene;\n  var subplotIds = scene.fullLayout._subplots.gl2d;\n  var list = Axes.findSubplotsWithAxis(subplotIds, ax); // if index === 0, then the subplot is already drawn as subplots\n  // are drawn in order.\n\n  return list.indexOf(scene.id) !== 0;\n}; // has an axis in default position (i.e. bottom/left) ?\n\n\nproto.hasAxisInDfltPos = function (axisName, ax) {\n  var axSide = ax.side;\n  if (axisName === 'xaxis') return axSide === 'bottom';else if (axisName === 'yaxis') return axSide === 'left';\n}; // has an axis in alternate position (i.e. top/right) ?\n\n\nproto.hasAxisInAltrPos = function (axisName, ax) {\n  var axSide = ax.side;\n  if (axisName === 'xaxis') return axSide === 'top';else if (axisName === 'yaxis') return axSide === 'right';\n};\n\nproto.getLabelPad = function (axisName, ax) {\n  var offsetBase = 1.5;\n  var fontSize = ax.title.font.size;\n  var showticklabels = ax.showticklabels;\n\n  if (axisName === 'xaxis') {\n    return ax.side === 'top' ? -10 + fontSize * (offsetBase + (showticklabels ? 1 : 0)) : -10 + fontSize * (offsetBase + (showticklabels ? 0.5 : 0));\n  } else if (axisName === 'yaxis') {\n    return ax.side === 'right' ? 10 + fontSize * (offsetBase + (showticklabels ? 1 : 0.5)) : 10 + fontSize * (offsetBase + (showticklabels ? 0.5 : 0));\n  }\n};\n\nproto.getTickPad = function (ax) {\n  return ax.ticks === 'outside' ? 10 + ax.ticklen : 15;\n};\n\nproto.getTickMarkLength = function (ax) {\n  if (!ax.ticks) return 0;\n  var ticklen = ax.ticklen;\n  return ax.ticks === 'inside' ? -ticklen : ticklen;\n};\n\nfunction createAxes2D(scene) {\n  return new Axes2DOptions(scene);\n}\n\nmodule.exports = createAxes2D;","map":null,"metadata":{},"sourceType":"script"}