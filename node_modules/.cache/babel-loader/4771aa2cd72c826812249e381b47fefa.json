{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar handleXYZDefaults = require('../heatmap/xyz_defaults');\n\nvar attributes = require('./attributes');\n\nvar handleConstraintDefaults = require('../contour/constraint_defaults');\n\nvar handleContoursDefaults = require('../contour/contours_defaults');\n\nvar handleStyleDefaults = require('../contour/style_defaults');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  function coerce2(attr) {\n    return Lib.coerce2(traceIn, traceOut, attributes, attr);\n  }\n\n  coerce('carpet'); // If either a or b is not present, then it's not a valid trace *unless* the carpet\n  // axis has the a or b values we're looking for. So if these are not found, just defer\n  // that decision until the calc step.\n  //\n  // NB: the calc step will modify the original data input by assigning whichever of\n  // a or b are missing. This is necessary because panning goes right from supplyDefaults\n  // to plot (skipping calc). That means on subsequent updates, this *will* need to be\n  // able to find a and b.\n  //\n  // The long-term proper fix is that this should perhaps use underscored attributes to\n  // at least modify the user input to a slightly lesser extent. Fully removing the\n  // input mutation is challenging. The underscore approach is not currently taken since\n  // it requires modification to all of the functions below that expect the coerced\n  // attribute name to match the property name -- except '_a' !== 'a' so that is not\n  // straightforward.\n\n  if (traceIn.a && traceIn.b) {\n    var len = handleXYZDefaults(traceIn, traceOut, coerce, layout, 'a', 'b');\n\n    if (!len) {\n      traceOut.visible = false;\n      return;\n    }\n\n    coerce('text');\n    var isConstraint = coerce('contours.type') === 'constraint';\n\n    if (isConstraint) {\n      handleConstraintDefaults(traceIn, traceOut, coerce, layout, defaultColor, {\n        hasHover: false\n      });\n    } else {\n      handleContoursDefaults(traceIn, traceOut, coerce, coerce2);\n      handleStyleDefaults(traceIn, traceOut, coerce, layout, {\n        hasHover: false\n      });\n    }\n  } else {\n    traceOut._defaultColor = defaultColor;\n    traceOut._length = null;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}