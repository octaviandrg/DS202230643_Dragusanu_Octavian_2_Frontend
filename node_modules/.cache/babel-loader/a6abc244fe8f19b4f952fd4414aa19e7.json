{"ast":null,"code":"'use strict';\n\nvar str2RgbaArray = require('../../../lib/str2rgbarray');\n\nvar Lib = require('../../../lib');\n\nvar AXES_NAMES = ['xaxis', 'yaxis', 'zaxis'];\n\nfunction AxesOptions() {\n  this.bounds = [[-10, -10, -10], [10, 10, 10]];\n  this.ticks = [[], [], []];\n  this.tickEnable = [true, true, true];\n  this.tickFont = ['sans-serif', 'sans-serif', 'sans-serif'];\n  this.tickSize = [12, 12, 12];\n  this.tickAngle = [0, 0, 0];\n  this.tickColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.tickPad = [18, 18, 18];\n  this.labels = ['x', 'y', 'z'];\n  this.labelEnable = [true, true, true];\n  this.labelFont = ['Open Sans', 'Open Sans', 'Open Sans'];\n  this.labelSize = [20, 20, 20];\n  this.labelColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.labelPad = [30, 30, 30];\n  this.lineEnable = [true, true, true];\n  this.lineMirror = [false, false, false];\n  this.lineWidth = [1, 1, 1];\n  this.lineColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.lineTickEnable = [true, true, true];\n  this.lineTickMirror = [false, false, false];\n  this.lineTickLength = [10, 10, 10];\n  this.lineTickWidth = [1, 1, 1];\n  this.lineTickColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.gridEnable = [true, true, true];\n  this.gridWidth = [1, 1, 1];\n  this.gridColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.zeroEnable = [true, true, true];\n  this.zeroLineColor = [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]];\n  this.zeroLineWidth = [2, 2, 2];\n  this.backgroundEnable = [true, true, true];\n  this.backgroundColor = [[0.8, 0.8, 0.8, 0.5], [0.8, 0.8, 0.8, 0.5], [0.8, 0.8, 0.8, 0.5]]; // some default values are stored for applying model transforms\n\n  this._defaultTickPad = this.tickPad.slice();\n  this._defaultLabelPad = this.labelPad.slice();\n  this._defaultLineTickLength = this.lineTickLength.slice();\n}\n\nvar proto = AxesOptions.prototype;\n\nproto.merge = function (fullLayout, sceneLayout) {\n  var opts = this;\n\n  for (var i = 0; i < 3; ++i) {\n    var axes = sceneLayout[AXES_NAMES[i]];\n\n    if (!axes.visible) {\n      opts.tickEnable[i] = false;\n      opts.labelEnable[i] = false;\n      opts.lineEnable[i] = false;\n      opts.lineTickEnable[i] = false;\n      opts.gridEnable[i] = false;\n      opts.zeroEnable[i] = false;\n      opts.backgroundEnable[i] = false;\n      continue;\n    } // Axes labels\n\n\n    opts.labels[i] = fullLayout._meta ? Lib.templateString(axes.title.text, fullLayout._meta) : axes.title.text;\n\n    if ('font' in axes.title) {\n      if (axes.title.font.color) opts.labelColor[i] = str2RgbaArray(axes.title.font.color);\n      if (axes.title.font.family) opts.labelFont[i] = axes.title.font.family;\n      if (axes.title.font.size) opts.labelSize[i] = axes.title.font.size;\n    } // Lines\n\n\n    if ('showline' in axes) opts.lineEnable[i] = axes.showline;\n    if ('linecolor' in axes) opts.lineColor[i] = str2RgbaArray(axes.linecolor);\n    if ('linewidth' in axes) opts.lineWidth[i] = axes.linewidth;\n    if ('showgrid' in axes) opts.gridEnable[i] = axes.showgrid;\n    if ('gridcolor' in axes) opts.gridColor[i] = str2RgbaArray(axes.gridcolor);\n    if ('gridwidth' in axes) opts.gridWidth[i] = axes.gridwidth; // Remove zeroline if axis type is log\n    // otherwise the zeroline is incorrectly drawn at 1 on log axes\n\n    if (axes.type === 'log') opts.zeroEnable[i] = false;else if ('zeroline' in axes) opts.zeroEnable[i] = axes.zeroline;\n    if ('zerolinecolor' in axes) opts.zeroLineColor[i] = str2RgbaArray(axes.zerolinecolor);\n    if ('zerolinewidth' in axes) opts.zeroLineWidth[i] = axes.zerolinewidth; // tick lines\n\n    if ('ticks' in axes && !!axes.ticks) opts.lineTickEnable[i] = true;else opts.lineTickEnable[i] = false;\n\n    if ('ticklen' in axes) {\n      opts.lineTickLength[i] = opts._defaultLineTickLength[i] = axes.ticklen;\n    }\n\n    if ('tickcolor' in axes) opts.lineTickColor[i] = str2RgbaArray(axes.tickcolor);\n    if ('tickwidth' in axes) opts.lineTickWidth[i] = axes.tickwidth;\n\n    if ('tickangle' in axes) {\n      opts.tickAngle[i] = axes.tickangle === 'auto' ? -3600 : // i.e. special number to set auto option\n      Math.PI * -axes.tickangle / 180;\n    } // tick labels\n\n\n    if ('showticklabels' in axes) opts.tickEnable[i] = axes.showticklabels;\n\n    if ('tickfont' in axes) {\n      if (axes.tickfont.color) opts.tickColor[i] = str2RgbaArray(axes.tickfont.color);\n      if (axes.tickfont.family) opts.tickFont[i] = axes.tickfont.family;\n      if (axes.tickfont.size) opts.tickSize[i] = axes.tickfont.size;\n    }\n\n    if ('mirror' in axes) {\n      if (['ticks', 'all', 'allticks'].indexOf(axes.mirror) !== -1) {\n        opts.lineTickMirror[i] = true;\n        opts.lineMirror[i] = true;\n      } else if (axes.mirror === true) {\n        opts.lineTickMirror[i] = false;\n        opts.lineMirror[i] = true;\n      } else {\n        opts.lineTickMirror[i] = false;\n        opts.lineMirror[i] = false;\n      }\n    } else opts.lineMirror[i] = false; // grid background\n\n\n    if ('showbackground' in axes && axes.showbackground !== false) {\n      opts.backgroundEnable[i] = true;\n      opts.backgroundColor[i] = str2RgbaArray(axes.backgroundcolor);\n    } else opts.backgroundEnable[i] = false;\n  }\n};\n\nfunction createAxesOptions(fullLayout, sceneLayout) {\n  var result = new AxesOptions();\n  result.merge(fullLayout, sceneLayout);\n  return result;\n}\n\nmodule.exports = createAxesOptions;","map":null,"metadata":{},"sourceType":"script"}