{"ast":null,"code":"/** @module  color-normalize */\n'use strict';\n\nvar rgba = require('color-rgba');\n\nvar clamp = require('clamp');\n\nvar dtype = require('dtype');\n\nmodule.exports = function normalize(color, type) {\n  if (type === 'float' || !type) type = 'array';\n  if (type === 'uint') type = 'uint8';\n  if (type === 'uint_clamped') type = 'uint8_clamped';\n  var Ctor = dtype(type);\n  var output = new Ctor(4);\n  var normalize = type !== 'uint8' && type !== 'uint8_clamped'; // attempt to parse non-array arguments\n\n  if (!color.length || typeof color === 'string') {\n    color = rgba(color);\n    color[0] /= 255;\n    color[1] /= 255;\n    color[2] /= 255;\n  } // 0, 1 are possible contradictory values for Arrays:\n  // [1,1,1] input gives [1,1,1] output instead of [1/255,1/255,1/255], which may be collision if input is meant to be uint.\n  // converting [1,1,1] to [1/255,1/255,1/255] in case of float input gives larger mistake since [1,1,1] float is frequent edge value, whereas [0,1,1], [1,1,1] etc. uint inputs are relatively rare\n\n\n  if (isInt(color)) {\n    output[0] = color[0];\n    output[1] = color[1];\n    output[2] = color[2];\n    output[3] = color[3] != null ? color[3] : 255;\n\n    if (normalize) {\n      output[0] /= 255;\n      output[1] /= 255;\n      output[2] /= 255;\n      output[3] /= 255;\n    }\n\n    return output;\n  }\n\n  if (!normalize) {\n    output[0] = clamp(Math.floor(color[0] * 255), 0, 255);\n    output[1] = clamp(Math.floor(color[1] * 255), 0, 255);\n    output[2] = clamp(Math.floor(color[2] * 255), 0, 255);\n    output[3] = color[3] == null ? 255 : clamp(Math.floor(color[3] * 255), 0, 255);\n  } else {\n    output[0] = color[0];\n    output[1] = color[1];\n    output[2] = color[2];\n    output[3] = color[3] != null ? color[3] : 1;\n  }\n\n  return output;\n};\n\nfunction isInt(color) {\n  if (color instanceof Uint8Array || color instanceof Uint8ClampedArray) return true;\n  if (Array.isArray(color) && (color[0] > 1 || color[0] === 0) && (color[1] > 1 || color[1] === 0) && (color[2] > 1 || color[2] === 0) && (!color[3] || color[3] > 1)) return true;\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}