{"ast":null,"code":"'use strict';\n\nvar dragHelpers = require('../../dragelement/helpers');\n\nvar selectMode = dragHelpers.selectMode;\n\nvar handleOutline = require('../../shapes/handle_outline');\n\nvar clearOutline = handleOutline.clearOutline;\n\nvar helpers = require('../../shapes/draw_newshape/helpers');\n\nvar readPaths = helpers.readPaths;\nvar writePaths = helpers.writePaths;\nvar fixDatesForPaths = helpers.fixDatesForPaths;\n\nmodule.exports = function newSelections(outlines, dragOptions) {\n  if (!outlines.length) return;\n  var e = outlines[0][0]; // pick first\n\n  if (!e) return;\n  var d = e.getAttribute('d');\n  var gd = dragOptions.gd;\n  var newStyle = gd._fullLayout.newselection;\n  var plotinfo = dragOptions.plotinfo;\n  var xaxis = plotinfo.xaxis;\n  var yaxis = plotinfo.yaxis;\n  var isActiveSelection = dragOptions.isActiveSelection;\n  var dragmode = dragOptions.dragmode;\n  var selections = (gd.layout || {}).selections || [];\n\n  if (!selectMode(dragmode) && isActiveSelection !== undefined) {\n    var id = gd._fullLayout._activeSelectionIndex;\n\n    if (id < selections.length) {\n      switch (gd._fullLayout.selections[id].type) {\n        case 'rect':\n          dragmode = 'select';\n          break;\n\n        case 'path':\n          dragmode = 'lasso';\n          break;\n      }\n    }\n  }\n\n  var polygons = readPaths(d, gd, plotinfo, isActiveSelection);\n  var newSelection = {\n    xref: xaxis._id,\n    yref: yaxis._id,\n    opacity: newStyle.opacity,\n    line: {\n      color: newStyle.line.color,\n      width: newStyle.line.width,\n      dash: newStyle.line.dash\n    }\n  };\n  var cell; // rect can be in one cell\n  // only define cell if there is single cell\n\n  if (polygons.length === 1) cell = polygons[0];\n\n  if (cell && cell.length === 5 && // ensure we only have 4 corners for a rect\n  dragmode === 'select') {\n    newSelection.type = 'rect';\n    newSelection.x0 = cell[0][1];\n    newSelection.y0 = cell[0][2];\n    newSelection.x1 = cell[2][1];\n    newSelection.y1 = cell[2][2];\n  } else {\n    newSelection.type = 'path';\n    if (xaxis && yaxis) fixDatesForPaths(polygons, xaxis, yaxis);\n    newSelection.path = writePaths(polygons);\n    cell = null;\n  }\n\n  clearOutline(gd);\n  var editHelpers = dragOptions.editHelpers;\n  var modifyItem = (editHelpers || {}).modifyItem;\n  var allSelections = [];\n\n  for (var q = 0; q < selections.length; q++) {\n    var beforeEdit = gd._fullLayout.selections[q];\n\n    if (!beforeEdit) {\n      allSelections[q] = beforeEdit;\n      continue;\n    }\n\n    allSelections[q] = beforeEdit._input;\n\n    if (isActiveSelection !== undefined && q === gd._fullLayout._activeSelectionIndex) {\n      var afterEdit = newSelection;\n\n      switch (beforeEdit.type) {\n        case 'rect':\n          modifyItem('x0', afterEdit.x0);\n          modifyItem('x1', afterEdit.x1);\n          modifyItem('y0', afterEdit.y0);\n          modifyItem('y1', afterEdit.y1);\n          break;\n\n        case 'path':\n          modifyItem('path', afterEdit.path);\n          break;\n      }\n    }\n  }\n\n  if (isActiveSelection === undefined) {\n    allSelections.push(newSelection); // add new selection\n\n    return allSelections;\n  }\n\n  return editHelpers ? editHelpers.getUpdateObj() : {};\n};","map":null,"metadata":{},"sourceType":"script"}