{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Taiwanese (Minguo) calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n\nvar gregorianCalendar = main.instance();\n/** Implementation of the Taiwanese calendar.\n    See http://en.wikipedia.org/wiki/Minguo_calendar.\n    @class TaiwanCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\nfunction TaiwanCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nTaiwanCalendar.prototype = new main.baseCalendar();\nassign(TaiwanCalendar.prototype, {\n  /** The calendar name.\n      @memberof TaiwanCalendar */\n  name: 'Taiwan',\n\n  /** Julian date of start of Taiwan epoch: 1 January 1912 CE (Gregorian).\n      @memberof TaiwanCalendar */\n  jdEpoch: 2419402.5,\n\n  /** Difference in years between Taiwan and Gregorian calendars.\n      @memberof TaiwanCalendar */\n  yearsOffset: 1911,\n\n  /** Days per month in a common year.\n      @memberof TaiwanCalendar */\n  daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof TaiwanCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof TaiwanCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof TaiwanCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof TaiwanCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof TaiwanCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Taiwan',\n      epochs: ['BROC', 'ROC'],\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n      digits: null,\n      dateFormat: 'yyyy/mm/dd',\n      firstDay: 1,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    var year = this._t2gYear(date.year());\n\n    return gregorianCalendar.leapYear(year);\n  },\n\n  /** Determine the week of the year for a date - ISO 8601.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    var year = this._t2gYear(date.year());\n\n    return gregorianCalendar.weekOfYear(year, date.month(), date.day());\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 2 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof TaiwanCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    var year = this._t2gYear(date.year());\n\n    return gregorianCalendar.toJD(year, date.month(), date.day());\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof TaiwanCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    var date = gregorianCalendar.fromJD(jd);\n\n    var year = this._g2tYear(date.year());\n\n    return this.newDate(year, date.month(), date.day());\n  },\n\n  /** Convert Taiwanese to Gregorian year.\n      @memberof TaiwanCalendar\n      @private\n      @param year {number} The Taiwanese year.\n      @return {number} The corresponding Gregorian year. */\n  _t2gYear: function _t2gYear(year) {\n    return year + this.yearsOffset + (year >= -this.yearsOffset && year <= -1 ? 1 : 0);\n  },\n\n  /** Convert Gregorian to Taiwanese year.\n      @memberof TaiwanCalendar\n      @private\n      @param year {number} The Gregorian year.\n      @return {number} The corresponding Taiwanese year. */\n  _g2tYear: function _g2tYear(year) {\n    return year - this.yearsOffset - (year >= 1 && year <= this.yearsOffset ? 1 : 0);\n  }\n}); // Taiwan calendar implementation\n\nmain.calendars.taiwan = TaiwanCalendar;","map":null,"metadata":{},"sourceType":"script"}