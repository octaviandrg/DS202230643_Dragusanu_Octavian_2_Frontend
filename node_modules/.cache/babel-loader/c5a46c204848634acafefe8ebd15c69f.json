{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Persian calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Persian or Jalali calendar.\n    Based on code from <a href=\"http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php\">http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php</a>.\n    See also <a href=\"http://en.wikipedia.org/wiki/Iranian_calendar\">http://en.wikipedia.org/wiki/Iranian_calendar</a>.\n    @class PersianCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction PersianCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nPersianCalendar.prototype = new main.baseCalendar();\nassign(PersianCalendar.prototype, {\n  /** The calendar name.\n      @memberof PersianCalendar */\n  name: 'Persian',\n\n  /** Julian date of start of Persian epoch: 19 March 622 CE.\n      @memberof PersianCalendar */\n  jdEpoch: 1948320.5,\n\n  /** Days per month in a common year.\n      @memberof PersianCalendar */\n  daysPerMonth: [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof PersianCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof PersianCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof PersianCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof PersianCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof PersianCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Persian',\n      epochs: ['BP', 'AP'],\n      monthNames: ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Day', 'Bahman', 'Esfand'],\n      monthNamesShort: ['Far', 'Ord', 'Kho', 'Tir', 'Mor', 'Sha', 'Meh', 'Aba', 'Aza', 'Day', 'Bah', 'Esf'],\n      dayNames: ['Yekshambe', 'Doshambe', 'Seshambe', 'Chæharshambe', 'Panjshambe', 'Jom\\'e', 'Shambe'],\n      dayNamesShort: ['Yek', 'Do', 'Se', 'Chæ', 'Panj', 'Jom', 'Sha'],\n      dayNamesMin: ['Ye', 'Do', 'Se', 'Ch', 'Pa', 'Jo', 'Sh'],\n      digits: null,\n      dateFormat: 'yyyy/mm/dd',\n      firstDay: 6,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    return ((date.year() - (date.year() > 0 ? 474 : 473)) % 2820 + 474 + 38) * 682 % 2816 < 682;\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Saturday of this week starting on Saturday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-((checkDate.dayOfWeek() + 1) % 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return this.dayOfWeek(year, month, day) !== 5;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof PersianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year();\n    month = date.month();\n    day = date.day();\n    var epBase = year - (year >= 0 ? 474 : 473);\n    var epYear = 474 + mod(epBase, 2820);\n    return day + (month <= 7 ? (month - 1) * 31 : (month - 1) * 30 + 6) + Math.floor((epYear * 682 - 110) / 2816) + (epYear - 1) * 365 + Math.floor(epBase / 2820) * 1029983 + this.jdEpoch - 1;\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof PersianCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd) + 0.5;\n    var depoch = jd - this.toJD(475, 1, 1);\n    var cycle = Math.floor(depoch / 1029983);\n    var cyear = mod(depoch, 1029983);\n    var ycycle = 2820;\n\n    if (cyear !== 1029982) {\n      var aux1 = Math.floor(cyear / 366);\n      var aux2 = mod(cyear, 366);\n      ycycle = Math.floor((2134 * aux1 + 2816 * aux2 + 2815) / 1028522) + aux1 + 1;\n    }\n\n    var year = ycycle + 2820 * cycle + 474;\n    year = year <= 0 ? year - 1 : year;\n    var yday = jd - this.toJD(year, 1, 1) + 1;\n    var month = yday <= 186 ? Math.ceil(yday / 31) : Math.ceil((yday - 6) / 30);\n    var day = jd - this.toJD(year, month, 1) + 1;\n    return this.newDate(year, month, day);\n  }\n}); // Modulus function which works for non-integers.\n\nfunction mod(a, b) {\n  return a - b * Math.floor(a / b);\n} // Persian (Jalali) calendar implementation\n\n\nmain.calendars.persian = PersianCalendar;\nmain.calendars.jalali = PersianCalendar;","map":null,"metadata":{},"sourceType":"script"}