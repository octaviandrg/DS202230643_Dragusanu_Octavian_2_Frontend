{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar mesh3dAttrs = require('../mesh3d/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar attrs = {\n  x: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the x coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the y coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the z coordinates of the vector field', 'and of the displayed cones.'].join(' ')\n  },\n  u: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the x components of the vector field.'\n  },\n  v: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the y components of the vector field.'\n  },\n  w: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the z components of the vector field.'\n  },\n  // TODO add way to specify cone positions independently of the vector field\n  // provided, similar to MATLAB's coneplot Cx/Cy/Cz meshgrids,\n  // see https://www.mathworks.com/help/matlab/ref/coneplot.html\n  //\n  // Alternatively, if our goal is only to 'fill in gaps' in the vector data,\n  // we could try to extend the heatmap 'connectgaps' algorithm to 3D.\n  // From AJ: this particular algorithm which amounts to a Poisson equation,\n  // both for interpolation and extrapolation - is the right one to use for\n  // cones too.  It makes a field with zero divergence, which is a good\n  // baseline assumption for vector fields.\n  //\n  // cones: {\n  //     // potential attributes to add:\n  //     //\n  //     // - meshmode: 'cartesian-product', 'pts', 'grid'\n  //     //\n  //     // under `meshmode: 'grid'`\n  //     // - (x|y|z)grid.start\n  //     // - (x|y|z)grid.end\n  //     // - (x|y|z)grid.size\n  //\n  //     x: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the x coordinates of the cones to be displayed.'\n  //     },\n  //     y: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the y coordinates of the cones to be displayed.'\n  //     },\n  //     z: {\n  //         valType: 'data_array',\n  //         editType: 'calc',\n  //         description: 'Sets the z coordinates of the cones to be displayed.'\n  //     },\n  //\n  //     editType: 'calc',\n  //     description: [\n  //         'By setting `cones.x`, `cones.y` and `cones.z` to 1D arrays,',\n  //         'plotly creates a mesh using the cartesian product of those 3 arrays.'\n  //     ].join(' ')\n  // },\n  sizemode: {\n    valType: 'enumerated',\n    values: ['scaled', 'absolute'],\n    editType: 'calc',\n    dflt: 'scaled',\n    description: ['Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar', '(normalized by the max u/v/w norm in the vector field) or as', '*absolute* value (in the same units as the vector field).'].join(' ')\n  },\n  sizeref: {\n    valType: 'number',\n    editType: 'calc',\n    min: 0,\n    description: ['Adjusts the cone size scaling.', 'The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`.', 'This factor (computed internally) corresponds to the minimum \"time\" to travel across', 'two successive x/y/z positions at the average velocity of those two successive positions.', 'All cones in a given trace use the same factor.', 'With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5*', 'With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field,', 'its the default value is half the sample\\'s maximum vector norm.'].join(' ')\n  },\n  anchor: {\n    valType: 'enumerated',\n    editType: 'calc',\n    values: ['tip', 'tail', 'cm', 'center'],\n    dflt: 'cm',\n    description: ['Sets the cones\\' anchor with respect to their x/y/z positions.', 'Note that *cm* denote the cone\\'s center of mass which corresponds to', '1/4 from the tail to tip.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Sets the text elements associated with the cones.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'calc'\n  }, {\n    keys: ['norm']\n  }),\n  uhoverformat: axisHoverFormat('u', 1),\n  vhoverformat: axisHoverFormat('v', 1),\n  whoverformat: axisHoverFormat('w', 1),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z'),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n};\nextendFlat(attrs, colorScaleAttrs('', {\n  colorAttr: 'u/v/w norm',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}));\nvar fromMesh3d = ['opacity', 'lightposition', 'lighting'];\nfromMesh3d.forEach(function (k) {\n  attrs[k] = mesh3dAttrs[k];\n});\nattrs.hoverinfo = extendFlat({}, baseAttrs.hoverinfo, {\n  editType: 'calc',\n  flags: ['x', 'y', 'z', 'u', 'v', 'w', 'norm', 'text', 'name'],\n  dflt: 'x+y+z+norm+text+name'\n});\nattrs.transforms = undefined;\nmodule.exports = attrs;","map":null,"metadata":{},"sourceType":"script"}