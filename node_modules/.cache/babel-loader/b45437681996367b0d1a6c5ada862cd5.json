{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar subTypes = require('../scatter/subtypes');\n\nvar handleMarkerDefaults = require('../scatter/marker_defaults');\n\nvar handleLineDefaults = require('../scatter/line_defaults');\n\nvar handleLineShapeDefaults = require('../scatter/line_shape_defaults');\n\nvar handleTextDefaults = require('../scatter/text_defaults');\n\nvar handleFillColorDefaults = require('../scatter/fillcolor_defaults');\n\nvar PTS_LINESONLY = require('../scatter/constants').PTS_LINESONLY;\n\nvar attributes = require('./attributes');\n\nfunction supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var len = handleRThetaDefaults(traceIn, traceOut, layout, coerce);\n\n  if (!len) {\n    traceOut.visible = false;\n    return;\n  }\n\n  coerce('thetaunit');\n  coerce('mode', len < PTS_LINESONLY ? 'lines+markers' : 'lines');\n  coerce('text');\n  coerce('hovertext');\n  if (traceOut.hoveron !== 'fills') coerce('hovertemplate');\n\n  if (subTypes.hasLines(traceOut)) {\n    handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce, {\n      backoff: true\n    });\n    handleLineShapeDefaults(traceIn, traceOut, coerce);\n    coerce('connectgaps');\n  }\n\n  if (subTypes.hasMarkers(traceOut)) {\n    handleMarkerDefaults(traceIn, traceOut, defaultColor, layout, coerce, {\n      gradient: true\n    });\n  }\n\n  if (subTypes.hasText(traceOut)) {\n    coerce('texttemplate');\n    handleTextDefaults(traceIn, traceOut, layout, coerce);\n  }\n\n  var dfltHoverOn = [];\n\n  if (subTypes.hasMarkers(traceOut) || subTypes.hasText(traceOut)) {\n    coerce('cliponaxis');\n    coerce('marker.maxdisplayed');\n    dfltHoverOn.push('points');\n  }\n\n  coerce('fill');\n\n  if (traceOut.fill !== 'none') {\n    handleFillColorDefaults(traceIn, traceOut, defaultColor, coerce);\n    if (!subTypes.hasLines(traceOut)) handleLineShapeDefaults(traceIn, traceOut, coerce);\n  }\n\n  if (traceOut.fill === 'tonext' || traceOut.fill === 'toself') {\n    dfltHoverOn.push('fills');\n  }\n\n  coerce('hoveron', dfltHoverOn.join('+') || 'points');\n  Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n}\n\nfunction handleRThetaDefaults(traceIn, traceOut, layout, coerce) {\n  var r = coerce('r');\n  var theta = coerce('theta');\n  var len;\n\n  if (r) {\n    if (theta) {\n      len = Math.min(r.length, theta.length);\n    } else {\n      len = r.length;\n      coerce('theta0');\n      coerce('dtheta');\n    }\n  } else {\n    if (!theta) return 0;\n    len = traceOut.theta.length;\n    coerce('r0');\n    coerce('dr');\n  }\n\n  traceOut._length = len;\n  return len;\n}\n\nmodule.exports = {\n  handleRThetaDefaults: handleRThetaDefaults,\n  supplyDefaults: supplyDefaults\n};","map":null,"metadata":{},"sourceType":"script"}