{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar convert = require('./convert');\n\nvar LAYER_PREFIX = require('../../plots/mapbox/constants').traceLayerPrefix;\n\nvar ORDER = {\n  cluster: ['cluster', 'clusterCount', 'circle'],\n  nonCluster: ['fill', 'line', 'circle', 'symbol']\n};\n\nfunction ScatterMapbox(subplot, uid, clusterEnabled) {\n  this.type = 'scattermapbox';\n  this.subplot = subplot;\n  this.uid = uid;\n  this.clusterEnabled = clusterEnabled;\n  this.sourceIds = {\n    fill: 'source-' + uid + '-fill',\n    line: 'source-' + uid + '-line',\n    circle: 'source-' + uid + '-circle',\n    symbol: 'source-' + uid + '-symbol',\n    cluster: 'source-' + uid + '-circle',\n    clusterCount: 'source-' + uid + '-circle'\n  };\n  this.layerIds = {\n    fill: LAYER_PREFIX + uid + '-fill',\n    line: LAYER_PREFIX + uid + '-line',\n    circle: LAYER_PREFIX + uid + '-circle',\n    symbol: LAYER_PREFIX + uid + '-symbol',\n    cluster: LAYER_PREFIX + uid + '-cluster',\n    clusterCount: LAYER_PREFIX + uid + '-cluster-count'\n  }; // We could merge the 'fill' source with the 'line' source and\n  // the 'circle' source with the 'symbol' source if ever having\n  // for up-to 4 sources per 'scattermapbox' traces becomes a problem.\n  // previous 'below' value,\n  // need this to update it properly\n\n  this.below = null;\n}\n\nvar proto = ScatterMapbox.prototype;\n\nproto.addSource = function (k, opts, cluster) {\n  var sourceOpts = {\n    type: 'geojson',\n    data: opts.geojson\n  };\n\n  if (cluster && cluster.enabled) {\n    Lib.extendFlat(sourceOpts, {\n      cluster: true,\n      clusterMaxZoom: cluster.maxzoom\n    });\n  }\n\n  this.subplot.map.addSource(this.sourceIds[k], sourceOpts);\n};\n\nproto.setSourceData = function (k, opts) {\n  this.subplot.map.getSource(this.sourceIds[k]).setData(opts.geojson);\n};\n\nproto.addLayer = function (k, opts, below) {\n  var source = {\n    type: opts.type,\n    id: this.layerIds[k],\n    source: this.sourceIds[k],\n    layout: opts.layout,\n    paint: opts.paint\n  };\n\n  if (opts.filter) {\n    source.filter = opts.filter;\n  }\n\n  this.subplot.addLayer(source, below);\n};\n\nproto.update = function update(calcTrace) {\n  var trace = calcTrace[0].trace;\n  var subplot = this.subplot;\n  var map = subplot.map;\n  var optsAll = convert(subplot.gd, calcTrace);\n  var below = subplot.belowLookup['trace-' + this.uid];\n  var i, k, opts;\n  var hasCluster = !!(trace.cluster && trace.cluster.enabled);\n  var hadCluster = !!this.clusterEnabled;\n\n  if (below !== this.below) {\n    var order = ORDER.nonCluster;\n\n    for (i = order.length - 1; i >= 0; i--) {\n      k = order[i];\n      map.removeLayer(this.layerIds[k]);\n    }\n\n    for (i = 0; i < order.length; i++) {\n      k = order[i];\n      opts = optsAll[k];\n      this.addLayer(k, opts, below);\n    }\n\n    this.below = below;\n  } else if (hasCluster && !hadCluster) {\n    for (i = ORDER.nonCluster.length - 1; i >= 0; i--) {\n      k = ORDER.nonCluster[i];\n      map.removeLayer(this.layerIds[k]);\n      map.removeSource(this.sourceIds[k]);\n    }\n\n    this.addSource('circle', optsAll.circle, trace.cluster);\n\n    for (i = 0; i < ORDER.cluster.length; i++) {\n      k = ORDER.cluster[i];\n      opts = optsAll[k];\n      this.addLayer(k, opts, below);\n    }\n\n    this.clusterEnabled = hasCluster;\n  } else if (!hasCluster && hadCluster) {\n    for (i = 0; i < ORDER.cluster.length; i++) {\n      k = ORDER.cluster[i];\n      map.removeLayer(this.layerIds[k]);\n    }\n\n    map.removeSource(this.sourceIds.circle);\n\n    for (i = 0; i < ORDER.nonCluster.length; i++) {\n      k = ORDER.nonCluster[i];\n      opts = optsAll[k];\n      this.addSource(k, opts, trace.cluster);\n      this.addLayer(k, opts, below);\n    }\n\n    this.clusterEnabled = hasCluster;\n  } // link ref for quick update during selections\n\n\n  calcTrace[0].trace._glTrace = this;\n};\n\nproto.dispose = function dispose() {\n  var map = this.subplot.map;\n  var order = this.clusterEnabled ? ORDER.cluster : ORDER.nonCluster;\n\n  for (var i = order.length - 1; i >= 0; i--) {\n    var k = order[i];\n    map.removeLayer(this.layerIds[k]);\n    map.removeSource(this.sourceIds[k]);\n  }\n};\n\nmodule.exports = function createScatterMapbox(subplot, calcTrace) {\n  var trace = calcTrace[0].trace;\n  var hasCluster = trace.cluster && trace.cluster.enabled;\n  var scatterMapbox = new ScatterMapbox(subplot, trace.uid, hasCluster);\n  var optsAll = convert(subplot.gd, calcTrace);\n  var below = scatterMapbox.below = subplot.belowLookup['trace-' + trace.uid];\n  var i, k, opts;\n\n  if (hasCluster) {\n    scatterMapbox.addSource('circle', optsAll.circle, trace.cluster);\n\n    for (i = 0; i < ORDER.cluster.length; i++) {\n      k = ORDER.cluster[i];\n      opts = optsAll[k];\n      scatterMapbox.addLayer(k, opts, below);\n    }\n  } else {\n    for (i = 0; i < ORDER.nonCluster.length; i++) {\n      k = ORDER.nonCluster[i];\n      opts = optsAll[k];\n      scatterMapbox.addSource(k, opts, trace.cluster);\n      scatterMapbox.addLayer(k, opts, below);\n    }\n  } // link ref for quick update during selections\n\n\n  calcTrace[0].trace._glTrace = scatterMapbox;\n  return scatterMapbox;\n};","map":null,"metadata":{},"sourceType":"script"}