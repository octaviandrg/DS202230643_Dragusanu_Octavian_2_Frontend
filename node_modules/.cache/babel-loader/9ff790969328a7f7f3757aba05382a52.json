{"ast":null,"code":"'use strict';\n\nvar barAttrs = require('../bar/attributes');\n\nvar lineAttrs = require('../scatter/attributes').line;\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar Color = require('../../components/color');\n\nmodule.exports = {\n  x: barAttrs.x,\n  x0: barAttrs.x0,\n  dx: barAttrs.dx,\n  y: barAttrs.y,\n  y0: barAttrs.y0,\n  dy: barAttrs.dy,\n  xperiod: barAttrs.xperiod,\n  yperiod: barAttrs.yperiod,\n  xperiod0: barAttrs.xperiod0,\n  yperiod0: barAttrs.yperiod0,\n  xperiodalignment: barAttrs.xperiodalignment,\n  yperiodalignment: barAttrs.yperiodalignment,\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  hovertext: barAttrs.hovertext,\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['name', 'x', 'y', 'text', 'percent initial', 'percent previous', 'percent total']\n  }),\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'percent initial', 'percent previous', 'percent total', 'value'],\n    extras: ['none'],\n    editType: 'plot',\n    arrayOk: false,\n    description: ['Determines which trace information appear on the graph.', 'In the case of having multiple funnels, percentages & totals', 'are computed separately (per trace).'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label', 'value'])\n  }),\n  text: barAttrs.text,\n  textposition: barAttrs.textposition,\n  insidetextanchor: extendFlat({}, barAttrs.insidetextanchor, {\n    dflt: 'middle'\n  }),\n  textangle: extendFlat({}, barAttrs.textangle, {\n    dflt: 0\n  }),\n  textfont: barAttrs.textfont,\n  insidetextfont: barAttrs.insidetextfont,\n  outsidetextfont: barAttrs.outsidetextfont,\n  constraintext: barAttrs.constraintext,\n  cliponaxis: barAttrs.cliponaxis,\n  orientation: extendFlat({}, barAttrs.orientation, {\n    description: ['Sets the orientation of the funnels.', 'With *v* (*h*), the value of the each bar spans', 'along the vertical (horizontal).', 'By default funnels are tend to be oriented horizontally;', 'unless only *y* array is presented or orientation is set to *v*.', 'Also regarding graphs including only \\'horizontal\\' funnels,', '*autorange* on the *y-axis* are set to *reversed*.'].join(' ')\n  }),\n  offset: extendFlat({}, barAttrs.offset, {\n    arrayOk: false\n  }),\n  width: extendFlat({}, barAttrs.width, {\n    arrayOk: false\n  }),\n  marker: funnelMarker(),\n  connector: {\n    fillcolor: {\n      valType: 'color',\n      editType: 'style',\n      description: ['Sets the fill color.'].join(' ')\n    },\n    line: {\n      color: extendFlat({}, lineAttrs.color, {\n        dflt: Color.defaultLine\n      }),\n      width: extendFlat({}, lineAttrs.width, {\n        dflt: 0,\n        editType: 'plot'\n      }),\n      dash: lineAttrs.dash,\n      editType: 'style'\n    },\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: ['Determines if connector regions and lines are drawn.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  offsetgroup: barAttrs.offsetgroup,\n  alignmentgroup: barAttrs.alignmentgroup\n};\n\nfunction funnelMarker() {\n  var marker = extendFlat({}, barAttrs.marker);\n  delete marker.pattern;\n  return marker;\n}","map":null,"metadata":{},"sourceType":"script"}