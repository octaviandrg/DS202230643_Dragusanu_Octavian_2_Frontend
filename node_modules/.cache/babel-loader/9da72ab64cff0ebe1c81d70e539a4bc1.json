{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar isDateTime = Lib.isDateTime;\nvar cleanNumber = Lib.cleanNumber;\nvar round = Math.round;\n\nmodule.exports = function autoType(array, calendar, opts) {\n  var a = array;\n  var noMultiCategory = opts.noMultiCategory;\n  if (isArrayOrTypedArray(a) && !a.length) return '-';\n  if (!noMultiCategory && multiCategory(a)) return 'multicategory';\n\n  if (noMultiCategory && Array.isArray(a[0])) {\n    // no need to flat typed arrays here\n    var b = [];\n\n    for (var i = 0; i < a.length; i++) {\n      if (isArrayOrTypedArray(a[i])) {\n        for (var j = 0; j < a[i].length; j++) {\n          b.push(a[i][j]);\n        }\n      }\n    }\n\n    a = b;\n  }\n\n  if (moreDates(a, calendar)) return 'date';\n  var convertNumeric = opts.autotypenumbers !== 'strict'; // compare against strict, just in case autotypenumbers was not provided in opts\n\n  if (category(a, convertNumeric)) return 'category';\n  if (linearOK(a, convertNumeric)) return 'linear';\n  return '-';\n};\n\nfunction hasTypeNumber(v, convertNumeric) {\n  return convertNumeric ? isNumeric(v) : typeof v === 'number';\n} // is there at least one number in array? If not, we should leave\n// ax.type empty so it can be autoset later\n\n\nfunction linearOK(a, convertNumeric) {\n  var len = a.length;\n\n  for (var i = 0; i < len; i++) {\n    if (hasTypeNumber(a[i], convertNumeric)) return true;\n  }\n\n  return false;\n} // does the array a have mostly dates rather than numbers?\n// note: some values can be neither (such as blanks, text)\n// 2- or 4-digit integers can be both, so require twice as many\n// dates as non-dates, to exclude cases with mostly 2 & 4 digit\n// numbers and a few dates\n// as with categories, consider DISTINCT values only.\n\n\nfunction moreDates(a, calendar) {\n  var len = a.length;\n  var inc = getIncrement(len);\n  var dats = 0;\n  var nums = 0;\n  var seen = {};\n\n  for (var f = 0; f < len; f += inc) {\n    var i = round(f);\n    var ai = a[i];\n    var stri = String(ai);\n    if (seen[stri]) continue;\n    seen[stri] = 1;\n    if (isDateTime(ai, calendar)) dats++;\n    if (isNumeric(ai)) nums++;\n  }\n\n  return dats > nums * 2;\n} // return increment to test at most 1000 points, evenly spaced\n\n\nfunction getIncrement(len) {\n  return Math.max(1, (len - 1) / 1000);\n} // are the (x,y)-values in gd.data mostly text?\n// require twice as many DISTINCT categories as distinct numbers\n\n\nfunction category(a, convertNumeric) {\n  var len = a.length;\n  var inc = getIncrement(len);\n  var nums = 0;\n  var cats = 0;\n  var seen = {};\n\n  for (var f = 0; f < len; f += inc) {\n    var i = round(f);\n    var ai = a[i];\n    var stri = String(ai);\n    if (seen[stri]) continue;\n    seen[stri] = 1;\n    var t = typeof ai;\n    if (t === 'boolean') cats++;else if (convertNumeric ? cleanNumber(ai) !== BADNUM : t === 'number') nums++;else if (t === 'string') cats++;\n  }\n\n  return cats > nums * 2;\n} // very-loose requirements for multicategory,\n// trace modules that should never auto-type to multicategory\n// should be declared with 'noMultiCategory'\n\n\nfunction multiCategory(a) {\n  return isArrayOrTypedArray(a[0]) && isArrayOrTypedArray(a[1]);\n}","map":null,"metadata":{},"sourceType":"script"}