{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Calendars extras for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) August 2009.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar assign = require('object-assign');\n\nvar main = require('./main');\n\nassign(main.regionalOptions[''], {\n  invalidArguments: 'Invalid arguments',\n  invalidFormat: 'Cannot format a date from another calendar',\n  missingNumberAt: 'Missing number at position {0}',\n  unknownNameAt: 'Unknown name at position {0}',\n  unexpectedLiteralAt: 'Unexpected literal at position {0}',\n  unexpectedText: 'Additional text found at end'\n});\nmain.local = main.regionalOptions[''];\nassign(main.cdate.prototype, {\n  /** Format this date.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof CDate\n      @param [format] {string} The date format to use (see <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a>).\n      @param [settings] {object} Options for the <code>formatDate</code> function.\n      @return {string} The formatted date. */\n  formatDate: function formatDate(format, settings) {\n    if (typeof format !== 'string') {\n      settings = format;\n      format = '';\n    }\n\n    return this._calendar.formatDate(format || '', this, settings);\n  }\n});\nassign(main.baseCalendar.prototype, {\n  UNIX_EPOCH: main.instance().newDate(1970, 1, 1).toJD(),\n  SECS_PER_DAY: 24 * 60 * 60,\n  TICKS_EPOCH: main.instance().jdEpoch,\n  // 1 January 0001 CE\n  TICKS_PER_DAY: 24 * 60 * 60 * 10000000,\n\n  /** Date form for ATOM (RFC 3339/ISO 8601).\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  ATOM: 'yyyy-mm-dd',\n\n  /** Date form for cookies.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  COOKIE: 'D, dd M yyyy',\n\n  /** Date form for full date.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  FULL: 'DD, MM d, yyyy',\n\n  /** Date form for ISO 8601.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  ISO_8601: 'yyyy-mm-dd',\n\n  /** Date form for Julian date.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  JULIAN: 'J',\n\n  /** Date form for RFC 822.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  RFC_822: 'D, d M yy',\n\n  /** Date form for RFC 850.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  RFC_850: 'DD, dd-M-yy',\n\n  /** Date form for RFC 1036.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  RFC_1036: 'D, d M yy',\n\n  /** Date form for RFC 1123.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  RFC_1123: 'D, d M yyyy',\n\n  /** Date form for RFC 2822.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  RFC_2822: 'D, d M yyyy',\n\n  /** Date form for RSS (RFC 822).\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  RSS: 'D, d M yy',\n\n  /** Date form for Windows ticks.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  TICKS: '!',\n\n  /** Date form for Unix timestamp.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  TIMESTAMP: '@',\n\n  /** Date form for W3c (ISO 8601).\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar */\n  W3C: 'yyyy-mm-dd',\n\n  /** Format a date object into a string value.\n      The format can be combinations of the following:\n      <ul>\n      <li>d  - day of month (no leading zero)</li>\n      <li>dd - day of month (two digit)</li>\n      <li>o  - day of year (no leading zeros)</li>\n      <li>oo - day of year (three digit)</li>\n      <li>D  - day name short</li>\n      <li>DD - day name long</li>\n      <li>w  - week of year (no leading zero)</li>\n      <li>ww - week of year (two digit)</li>\n      <li>m  - month of year (no leading zero)</li>\n      <li>mm - month of year (two digit)</li>\n      <li>M  - month name short</li>\n      <li>MM - month name long</li>\n      <li>yy - year (two digit)</li>\n      <li>yyyy - year (four digit)</li>\n      <li>YYYY - formatted year</li>\n      <li>J  - Julian date (days since January 1, 4713 BCE Greenwich noon)</li>\n      <li>@  - Unix timestamp (s since 01/01/1970)</li>\n      <li>!  - Windows ticks (100ns since 01/01/0001)</li>\n      <li>'...' - literal text</li>\n      <li>'' - single quote</li>\n      </ul>\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar\n      @param [format] {string} The desired format of the date (defaults to calendar format).\n      @param date {CDate} The date value to format.\n      @param [settings] {object} Addition options, whose attributes include:\n      @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\n      @property [dayNames] {string[]} Names of the days from Sunday.\n      @property [monthNamesShort] {string[]} Abbreviated names of the months.\n      @property [monthNames] {string[]} Names of the months.\n      @property [calculateWeek] {CalendarsPickerCalculateWeek} Function that determines week of the year.\n      @property [localNumbers=false] {boolean} <code>true</code> to localise numbers (if available),\n                <code>false</code> to use normal Arabic numerals.\n      @return {string} The date in the above format.\n      @throws Errors if the date is from a different calendar. */\n  formatDate: function formatDate(format, date, settings) {\n    if (typeof format !== 'string') {\n      settings = date;\n      date = format;\n      format = '';\n    }\n\n    if (!date) {\n      return '';\n    }\n\n    if (date.calendar() !== this) {\n      throw main.local.invalidFormat || main.regionalOptions[''].invalidFormat;\n    }\n\n    format = format || this.local.dateFormat;\n    settings = settings || {};\n    var dayNamesShort = settings.dayNamesShort || this.local.dayNamesShort;\n    var dayNames = settings.dayNames || this.local.dayNames;\n    var monthNumbers = settings.monthNumbers || this.local.monthNumbers;\n    var monthNamesShort = settings.monthNamesShort || this.local.monthNamesShort;\n    var monthNames = settings.monthNames || this.local.monthNames;\n    var calculateWeek = settings.calculateWeek || this.local.calculateWeek; // Check whether a format character is doubled\n\n    var doubled = function doubled(match, step) {\n      var matches = 1;\n\n      while (iFormat + matches < format.length && format.charAt(iFormat + matches) === match) {\n        matches++;\n      }\n\n      iFormat += matches - 1;\n      return Math.floor(matches / (step || 1)) > 1;\n    }; // Format a number, with leading zeroes if necessary\n\n\n    var formatNumber = function formatNumber(match, value, len, step) {\n      var num = '' + value;\n\n      if (doubled(match, step)) {\n        while (num.length < len) {\n          num = '0' + num;\n        }\n      }\n\n      return num;\n    }; // Format a name, short or long as requested\n\n\n    var formatName = function formatName(match, value, shortNames, longNames) {\n      return doubled(match) ? longNames[value] : shortNames[value];\n    }; // Format month number\n    // (e.g. Chinese calendar needs to account for intercalary months)\n\n\n    var calendar = this;\n\n    var formatMonth = function formatMonth(date) {\n      return typeof monthNumbers === 'function' ? monthNumbers.call(calendar, date, doubled('m')) : localiseNumbers(formatNumber('m', date.month(), 2));\n    }; // Format a month name, short or long as requested\n\n\n    var formatMonthName = function formatMonthName(date, useLongName) {\n      if (useLongName) {\n        return typeof monthNames === 'function' ? monthNames.call(calendar, date) : monthNames[date.month() - calendar.minMonth];\n      } else {\n        return typeof monthNamesShort === 'function' ? monthNamesShort.call(calendar, date) : monthNamesShort[date.month() - calendar.minMonth];\n      }\n    }; // Localise numbers if requested and available\n\n\n    var digits = this.local.digits;\n\n    var localiseNumbers = function localiseNumbers(value) {\n      return settings.localNumbers && digits ? digits(value) : value;\n    };\n\n    var output = '';\n    var literal = false;\n\n    for (var iFormat = 0; iFormat < format.length; iFormat++) {\n      if (literal) {\n        if (format.charAt(iFormat) === \"'\" && !doubled(\"'\")) {\n          literal = false;\n        } else {\n          output += format.charAt(iFormat);\n        }\n      } else {\n        switch (format.charAt(iFormat)) {\n          case 'd':\n            output += localiseNumbers(formatNumber('d', date.day(), 2));\n            break;\n\n          case 'D':\n            output += formatName('D', date.dayOfWeek(), dayNamesShort, dayNames);\n            break;\n\n          case 'o':\n            output += formatNumber('o', date.dayOfYear(), 3);\n            break;\n\n          case 'w':\n            output += formatNumber('w', date.weekOfYear(), 2);\n            break;\n\n          case 'm':\n            output += formatMonth(date);\n            break;\n\n          case 'M':\n            output += formatMonthName(date, doubled('M'));\n            break;\n\n          case 'y':\n            output += doubled('y', 2) ? date.year() : (date.year() % 100 < 10 ? '0' : '') + date.year() % 100;\n            break;\n\n          case 'Y':\n            doubled('Y', 2);\n            output += date.formatYear();\n            break;\n\n          case 'J':\n            output += date.toJD();\n            break;\n\n          case '@':\n            output += (date.toJD() - this.UNIX_EPOCH) * this.SECS_PER_DAY;\n            break;\n\n          case '!':\n            output += (date.toJD() - this.TICKS_EPOCH) * this.TICKS_PER_DAY;\n            break;\n\n          case \"'\":\n            if (doubled(\"'\")) {\n              output += \"'\";\n            } else {\n              literal = true;\n            }\n\n            break;\n\n          default:\n            output += format.charAt(iFormat);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /** Parse a string value into a date object.\n      See <a href=\"#formatDate\"><code>formatDate</code></a> for the possible formats, plus:\n      <ul>\n      <li>* - ignore rest of string</li>\n      </ul>\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar\n      @param format {string} The expected format of the date ('' for default calendar format).\n      @param value {string} The date in the above format.\n      @param [settings] {object} Additional options whose attributes include:\n      @property [shortYearCutoff] {number} The cutoff year for determining the century.\n      @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\n      @property [dayNames] {string[]} Names of the days from Sunday.\n      @property [monthNamesShort] {string[]} Abbreviated names of the months.\n      @property [monthNames] {string[]} Names of the months.\n      @return {CDate} The extracted date value or <code>null</code> if value is blank.\n      @throws Errors if the format and/or value are missing,\n              if the value doesn't match the format, or if the date is invalid. */\n  parseDate: function parseDate(format, value, settings) {\n    if (value == null) {\n      throw main.local.invalidArguments || main.regionalOptions[''].invalidArguments;\n    }\n\n    value = typeof value === 'object' ? value.toString() : value + '';\n\n    if (value === '') {\n      return null;\n    }\n\n    format = format || this.local.dateFormat;\n    settings = settings || {};\n    var shortYearCutoff = settings.shortYearCutoff || this.shortYearCutoff;\n    shortYearCutoff = typeof shortYearCutoff !== 'string' ? shortYearCutoff : this.today().year() % 100 + parseInt(shortYearCutoff, 10);\n    var dayNamesShort = settings.dayNamesShort || this.local.dayNamesShort;\n    var dayNames = settings.dayNames || this.local.dayNames;\n    var parseMonth = settings.parseMonth || this.local.parseMonth;\n    var monthNumbers = settings.monthNumbers || this.local.monthNumbers;\n    var monthNamesShort = settings.monthNamesShort || this.local.monthNamesShort;\n    var monthNames = settings.monthNames || this.local.monthNames;\n    var jd = -1;\n    var year = -1;\n    var month = -1;\n    var day = -1;\n    var doy = -1;\n    var shortYear = false;\n    var literal = false; // Check whether a format character is doubled\n\n    var doubled = function doubled(match, step) {\n      var matches = 1;\n\n      while (iFormat + matches < format.length && format.charAt(iFormat + matches) === match) {\n        matches++;\n      }\n\n      iFormat += matches - 1;\n      return Math.floor(matches / (step || 1)) > 1;\n    }; // Extract a number from the string value\n\n\n    var getNumber = function getNumber(match, step) {\n      var isDoubled = doubled(match, step);\n      var size = [2, 3, isDoubled ? 4 : 2, isDoubled ? 4 : 2, 10, 11, 20]['oyYJ@!'.indexOf(match) + 1];\n      var digits = new RegExp('^-?\\\\d{1,' + size + '}');\n      var num = value.substring(iValue).match(digits);\n\n      if (!num) {\n        throw (main.local.missingNumberAt || main.regionalOptions[''].missingNumberAt).replace(/\\{0\\}/, iValue);\n      }\n\n      iValue += num[0].length;\n      return parseInt(num[0], 10);\n    }; // Extract a month number from the string value\n\n\n    var calendar = this;\n\n    var getMonthNumber = function getMonthNumber() {\n      if (typeof monthNumbers === 'function') {\n        doubled('m'); // update iFormat\n\n        var month = monthNumbers.call(calendar, value.substring(iValue));\n        iValue += month.length;\n        return month;\n      }\n\n      return getNumber('m');\n    }; // Extract a name from the string value and convert to an index\n\n\n    var getName = function getName(match, shortNames, longNames, step) {\n      var names = doubled(match, step) ? longNames : shortNames;\n\n      for (var i = 0; i < names.length; i++) {\n        if (value.substr(iValue, names[i].length).toLowerCase() === names[i].toLowerCase()) {\n          iValue += names[i].length;\n          return i + calendar.minMonth;\n        }\n      }\n\n      throw (main.local.unknownNameAt || main.regionalOptions[''].unknownNameAt).replace(/\\{0\\}/, iValue);\n    }; // Extract a month number from the string value\n\n\n    var getMonthName = function getMonthName() {\n      if (typeof monthNames === 'function') {\n        var month = doubled('M') ? monthNames.call(calendar, value.substring(iValue)) : monthNamesShort.call(calendar, value.substring(iValue));\n        iValue += month.length;\n        return month;\n      }\n\n      return getName('M', monthNamesShort, monthNames);\n    }; // Confirm that a literal character matches the string value\n\n\n    var checkLiteral = function checkLiteral() {\n      if (value.charAt(iValue) !== format.charAt(iFormat)) {\n        throw (main.local.unexpectedLiteralAt || main.regionalOptions[''].unexpectedLiteralAt).replace(/\\{0\\}/, iValue);\n      }\n\n      iValue++;\n    };\n\n    var iValue = 0;\n\n    for (var iFormat = 0; iFormat < format.length; iFormat++) {\n      if (literal) {\n        if (format.charAt(iFormat) === \"'\" && !doubled(\"'\")) {\n          literal = false;\n        } else {\n          checkLiteral();\n        }\n      } else {\n        switch (format.charAt(iFormat)) {\n          case 'd':\n            day = getNumber('d');\n            break;\n\n          case 'D':\n            getName('D', dayNamesShort, dayNames);\n            break;\n\n          case 'o':\n            doy = getNumber('o');\n            break;\n\n          case 'w':\n            getNumber('w');\n            break;\n\n          case 'm':\n            month = getMonthNumber();\n            break;\n\n          case 'M':\n            month = getMonthName();\n            break;\n\n          case 'y':\n            var iSave = iFormat;\n            shortYear = !doubled('y', 2);\n            iFormat = iSave;\n            year = getNumber('y', 2);\n            break;\n\n          case 'Y':\n            year = getNumber('Y', 2);\n            break;\n\n          case 'J':\n            jd = getNumber('J') + 0.5;\n\n            if (value.charAt(iValue) === '.') {\n              iValue++;\n              getNumber('J');\n            }\n\n            break;\n\n          case '@':\n            jd = getNumber('@') / this.SECS_PER_DAY + this.UNIX_EPOCH;\n            break;\n\n          case '!':\n            jd = getNumber('!') / this.TICKS_PER_DAY + this.TICKS_EPOCH;\n            break;\n\n          case '*':\n            iValue = value.length;\n            break;\n\n          case \"'\":\n            if (doubled(\"'\")) {\n              checkLiteral();\n            } else {\n              literal = true;\n            }\n\n            break;\n\n          default:\n            checkLiteral();\n        }\n      }\n    }\n\n    if (iValue < value.length) {\n      throw main.local.unexpectedText || main.regionalOptions[''].unexpectedText;\n    }\n\n    if (year === -1) {\n      year = this.today().year();\n    } else if (year < 100 && shortYear) {\n      year += shortYearCutoff === -1 ? 1900 : this.today().year() - this.today().year() % 100 - (year <= shortYearCutoff ? 0 : 100);\n    }\n\n    if (typeof month === 'string') {\n      month = parseMonth.call(this, year, month);\n    }\n\n    if (doy > -1) {\n      month = 1;\n      day = doy;\n\n      for (var dim = this.daysInMonth(year, month); day > dim; dim = this.daysInMonth(year, month)) {\n        month++;\n        day -= dim;\n      }\n    }\n\n    return jd > -1 ? this.fromJD(jd) : this.newDate(year, month, day);\n  },\n\n  /** A date may be specified as an exact value or a relative one.\n      Found in the <code>jquery.calendars.plus.js</code> module.\n      @memberof BaseCalendar\n      @param dateSpec {CDate|number|string} The date as an object or string in the given format or\n              an offset - numeric days from today, or string amounts and periods, e.g. '+1m +2w'.\n      @param defaultDate {CDate} The date to use if no other supplied, may be <code>null</code>.\n      @param currentDate {CDate} The current date as a possible basis for relative dates,\n              if <code>null</code> today is used (optional)\n      @param [dateFormat] {string} The expected date format - see <a href=\"#formatDate\"><code>formatDate</code></a>.\n      @param [settings] {object} Additional options whose attributes include:\n      @property [shortYearCutoff] {number} The cutoff year for determining the century.\n      @property [dayNamesShort] {string[]} Abbreviated names of the days from Sunday.\n      @property [dayNames] {string[]} Names of the days from Sunday.\n      @property [monthNamesShort] {string[]} Abbreviated names of the months.\n      @property [monthNames] {string[]} Names of the months.\n      @return {CDate} The decoded date. */\n  determineDate: function determineDate(dateSpec, defaultDate, currentDate, dateFormat, settings) {\n    if (currentDate && typeof currentDate !== 'object') {\n      settings = dateFormat;\n      dateFormat = currentDate;\n      currentDate = null;\n    }\n\n    if (typeof dateFormat !== 'string') {\n      settings = dateFormat;\n      dateFormat = '';\n    }\n\n    var calendar = this;\n\n    var offsetString = function offsetString(offset) {\n      try {\n        return calendar.parseDate(dateFormat, offset, settings);\n      } catch (e) {// Ignore\n      }\n\n      offset = offset.toLowerCase();\n      var date = (offset.match(/^c/) && currentDate ? currentDate.newDate() : null) || calendar.today();\n      var pattern = /([+-]?[0-9]+)\\s*(d|w|m|y)?/g;\n      var matches = pattern.exec(offset);\n\n      while (matches) {\n        date.add(parseInt(matches[1], 10), matches[2] || 'd');\n        matches = pattern.exec(offset);\n      }\n\n      return date;\n    };\n\n    defaultDate = defaultDate ? defaultDate.newDate() : null;\n    dateSpec = dateSpec == null ? defaultDate : typeof dateSpec === 'string' ? offsetString(dateSpec) : typeof dateSpec === 'number' ? isNaN(dateSpec) || dateSpec === Infinity || dateSpec === -Infinity ? defaultDate : calendar.today().add(dateSpec, 'd') : calendar.newDate(dateSpec);\n    return dateSpec;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}