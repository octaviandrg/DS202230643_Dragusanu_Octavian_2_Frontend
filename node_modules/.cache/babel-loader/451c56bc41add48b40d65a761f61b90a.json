{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n  Ethiopian calendar for jQuery v2.0.2.\n  Written by Keith Wood (wood.keith{at}optusnet.com.au) February 2010.\n  Available under the MIT (http://keith-wood.name/licence.html) license. \n  Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Ethiopian calendar.\n    See <a href=\"http://en.wikipedia.org/wiki/Ethiopian_calendar\">http://en.wikipedia.org/wiki/Ethiopian_calendar</a>.\n    See also Calendrical Calculations: The Millennium Edition\n    (<a href=\"http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml\">http://emr.cs.iit.edu/home/reingold/calendar-book/index.shtml</a>).\n    @class EthiopianCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction EthiopianCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nEthiopianCalendar.prototype = new main.baseCalendar();\nassign(EthiopianCalendar.prototype, {\n  /** The calendar name.\n      @memberof EthiopianCalendar */\n  name: 'Ethiopian',\n\n  /** Julian date of start of Ethiopian epoch: 27 August 8 CE (Gregorian).\n      @memberof EthiopianCalendar */\n  jdEpoch: 1724220.5,\n\n  /** Days per month in a common year.\n      @memberof EthiopianCalendar */\n  daysPerMonth: [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof EthiopianCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof EthiopianCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof EthiopianCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof EthiopianCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof EthiopianCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Ethiopian',\n      epochs: ['BEE', 'EE'],\n      monthNames: ['Meskerem', 'Tikemet', 'Hidar', 'Tahesas', 'Tir', 'Yekatit', 'Megabit', 'Miazia', 'Genbot', 'Sene', 'Hamle', 'Nehase', 'Pagume'],\n      monthNamesShort: ['Mes', 'Tik', 'Hid', 'Tah', 'Tir', 'Yek', 'Meg', 'Mia', 'Gen', 'Sen', 'Ham', 'Neh', 'Pag'],\n      dayNames: ['Ehud', 'Segno', 'Maksegno', 'Irob', 'Hamus', 'Arb', 'Kidame'],\n      dayNamesShort: ['Ehu', 'Seg', 'Mak', 'Iro', 'Ham', 'Arb', 'Kid'],\n      dayNamesMin: ['Eh', 'Se', 'Ma', 'Ir', 'Ha', 'Ar', 'Ki'],\n      digits: null,\n      dateFormat: 'dd/mm/yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear);\n\n    var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero\n\n    return year % 4 === 3 || year % 4 === -1;\n  },\n\n  /** Retrieve the number of months in a year.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {number} The number of months.\n      @throws Error if an invalid year or a different calendar used. */\n  monthsInYear: function monthsInYear(year) {\n    this._validate(year, this.minMonth, this.minDay, main.local.invalidYear || main.regionalOptions[''].invalidYear);\n\n    return 13;\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Sunday of this week starting on Sunday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(-checkDate.dayOfWeek(), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 13 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof EthiopianCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidDate);\n\n    year = date.year();\n\n    if (year < 0) {\n      year++;\n    } // No year zero\n\n\n    return date.day() + (date.month() - 1) * 30 + (year - 1) * 365 + Math.floor(year / 4) + this.jdEpoch - 1;\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof EthiopianCalendar\n      @param jd {number} the Julian date to convert.\n      @return {CDate} the equivalent date. */\n  fromJD: function fromJD(jd) {\n    var c = Math.floor(jd) + 0.5 - this.jdEpoch;\n    var year = Math.floor((c - Math.floor((c + 366) / 1461)) / 365) + 1;\n\n    if (year <= 0) {\n      year--;\n    } // No year zero\n\n\n    c = Math.floor(jd) + 0.5 - this.newDate(year, 1, 1).toJD();\n    var month = Math.floor(c / 30) + 1;\n    var day = c - (month - 1) * 30 + 1;\n    return this.newDate(year, month, day);\n  }\n}); // Ethiopian calendar implementation\n\nmain.calendars.ethiopian = EthiopianCalendar;","map":null,"metadata":{},"sourceType":"script"}