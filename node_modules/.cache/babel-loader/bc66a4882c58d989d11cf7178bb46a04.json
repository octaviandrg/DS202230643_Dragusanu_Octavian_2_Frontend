{"ast":null,"code":"'use strict';\n\nvar parseSvgPath = require('parse-svg-path');\n\nvar round = require('@plotly/d3').round;\n/** Marker symbol definitions\n * users can specify markers either by number or name\n * add 100 (or '-open') and you get an open marker\n *  open markers have no fill and use line color as the stroke color\n * add 200 (or '-dot') and you get a dot in the middle\n * add both and you get both\n */\n\n\nvar emptyPath = 'M0,0Z';\nvar sqrt2 = Math.sqrt(2);\nvar sqrt3 = Math.sqrt(3);\nvar PI = Math.PI;\nvar cos = Math.cos;\nvar sin = Math.sin;\nmodule.exports = {\n  circle: {\n    n: 0,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = round(r, 2);\n      var circle = 'M' + rs + ',0A' + rs + ',' + rs + ' 0 1,1 0,-' + rs + 'A' + rs + ',' + rs + ' 0 0,1 ' + rs + ',0Z';\n      return standoff ? align(angle, standoff, circle) : circle;\n    }\n  },\n  square: {\n    n: 1,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M' + rs + ',' + rs + 'H-' + rs + 'V-' + rs + 'H' + rs + 'Z');\n    }\n  },\n  diamond: {\n    n: 2,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rd = round(r * 1.3, 2);\n      return align(angle, standoff, 'M' + rd + ',0L0,' + rd + 'L-' + rd + ',0L0,-' + rd + 'Z');\n    }\n  },\n  cross: {\n    n: 3,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rc = round(r * 0.4, 2);\n      var rc2 = round(r * 1.2, 2);\n      return align(angle, standoff, 'M' + rc2 + ',' + rc + 'H' + rc + 'V' + rc2 + 'H-' + rc + 'V' + rc + 'H-' + rc2 + 'V-' + rc + 'H-' + rc + 'V-' + rc2 + 'H' + rc + 'V-' + rc + 'H' + rc2 + 'Z');\n    }\n  },\n  x: {\n    n: 4,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r * 0.8 / sqrt2, 2);\n      var ne = 'l' + rx + ',' + rx;\n      var se = 'l' + rx + ',-' + rx;\n      var sw = 'l-' + rx + ',-' + rx;\n      var nw = 'l-' + rx + ',' + rx;\n      return align(angle, standoff, 'M0,' + rx + ne + se + sw + se + sw + nw + sw + nw + ne + nw + ne + 'Z');\n    }\n  },\n  'triangle-up': {\n    n: 5,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rt = round(r * 2 / sqrt3, 2);\n      var r2 = round(r / 2, 2);\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M-' + rt + ',' + r2 + 'H' + rt + 'L0,-' + rs + 'Z');\n    }\n  },\n  'triangle-down': {\n    n: 6,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rt = round(r * 2 / sqrt3, 2);\n      var r2 = round(r / 2, 2);\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M-' + rt + ',-' + r2 + 'H' + rt + 'L0,' + rs + 'Z');\n    }\n  },\n  'triangle-left': {\n    n: 7,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rt = round(r * 2 / sqrt3, 2);\n      var r2 = round(r / 2, 2);\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M' + r2 + ',-' + rt + 'V' + rt + 'L-' + rs + ',0Z');\n    }\n  },\n  'triangle-right': {\n    n: 8,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rt = round(r * 2 / sqrt3, 2);\n      var r2 = round(r / 2, 2);\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M-' + r2 + ',-' + rt + 'V' + rt + 'L' + rs + ',0Z');\n    }\n  },\n  'triangle-ne': {\n    n: 9,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var r1 = round(r * 0.6, 2);\n      var r2 = round(r * 1.2, 2);\n      return align(angle, standoff, 'M-' + r2 + ',-' + r1 + 'H' + r1 + 'V' + r2 + 'Z');\n    }\n  },\n  'triangle-se': {\n    n: 10,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var r1 = round(r * 0.6, 2);\n      var r2 = round(r * 1.2, 2);\n      return align(angle, standoff, 'M' + r1 + ',-' + r2 + 'V' + r1 + 'H-' + r2 + 'Z');\n    }\n  },\n  'triangle-sw': {\n    n: 11,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var r1 = round(r * 0.6, 2);\n      var r2 = round(r * 1.2, 2);\n      return align(angle, standoff, 'M' + r2 + ',' + r1 + 'H-' + r1 + 'V-' + r2 + 'Z');\n    }\n  },\n  'triangle-nw': {\n    n: 12,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var r1 = round(r * 0.6, 2);\n      var r2 = round(r * 1.2, 2);\n      return align(angle, standoff, 'M-' + r1 + ',' + r2 + 'V-' + r1 + 'H' + r2 + 'Z');\n    }\n  },\n  pentagon: {\n    n: 13,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var x1 = round(r * 0.951, 2);\n      var x2 = round(r * 0.588, 2);\n      var y0 = round(-r, 2);\n      var y1 = round(r * -0.309, 2);\n      var y2 = round(r * 0.809, 2);\n      return align(angle, standoff, 'M' + x1 + ',' + y1 + 'L' + x2 + ',' + y2 + 'H-' + x2 + 'L-' + x1 + ',' + y1 + 'L0,' + y0 + 'Z');\n    }\n  },\n  hexagon: {\n    n: 14,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var y0 = round(r, 2);\n      var y1 = round(r / 2, 2);\n      var x = round(r * sqrt3 / 2, 2);\n      return align(angle, standoff, 'M' + x + ',-' + y1 + 'V' + y1 + 'L0,' + y0 + 'L-' + x + ',' + y1 + 'V-' + y1 + 'L0,-' + y0 + 'Z');\n    }\n  },\n  hexagon2: {\n    n: 15,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var x0 = round(r, 2);\n      var x1 = round(r / 2, 2);\n      var y = round(r * sqrt3 / 2, 2);\n      return align(angle, standoff, 'M-' + x1 + ',' + y + 'H' + x1 + 'L' + x0 + ',0L' + x1 + ',-' + y + 'H-' + x1 + 'L-' + x0 + ',0Z');\n    }\n  },\n  octagon: {\n    n: 16,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var a = round(r * 0.924, 2);\n      var b = round(r * 0.383, 2);\n      return align(angle, standoff, 'M-' + b + ',-' + a + 'H' + b + 'L' + a + ',-' + b + 'V' + b + 'L' + b + ',' + a + 'H-' + b + 'L-' + a + ',' + b + 'V-' + b + 'Z');\n    }\n  },\n  star: {\n    n: 17,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = r * 1.4;\n      var x1 = round(rs * 0.225, 2);\n      var x2 = round(rs * 0.951, 2);\n      var x3 = round(rs * 0.363, 2);\n      var x4 = round(rs * 0.588, 2);\n      var y0 = round(-rs, 2);\n      var y1 = round(rs * -0.309, 2);\n      var y3 = round(rs * 0.118, 2);\n      var y4 = round(rs * 0.809, 2);\n      var y5 = round(rs * 0.382, 2);\n      return align(angle, standoff, 'M' + x1 + ',' + y1 + 'H' + x2 + 'L' + x3 + ',' + y3 + 'L' + x4 + ',' + y4 + 'L0,' + y5 + 'L-' + x4 + ',' + y4 + 'L-' + x3 + ',' + y3 + 'L-' + x2 + ',' + y1 + 'H-' + x1 + 'L0,' + y0 + 'Z');\n    }\n  },\n  hexagram: {\n    n: 18,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var y = round(r * 0.66, 2);\n      var x1 = round(r * 0.38, 2);\n      var x2 = round(r * 0.76, 2);\n      return align(angle, standoff, 'M-' + x2 + ',0l-' + x1 + ',-' + y + 'h' + x2 + 'l' + x1 + ',-' + y + 'l' + x1 + ',' + y + 'h' + x2 + 'l-' + x1 + ',' + y + 'l' + x1 + ',' + y + 'h-' + x2 + 'l-' + x1 + ',' + y + 'l-' + x1 + ',-' + y + 'h-' + x2 + 'Z');\n    }\n  },\n  'star-triangle-up': {\n    n: 19,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var x = round(r * sqrt3 * 0.8, 2);\n      var y1 = round(r * 0.8, 2);\n      var y2 = round(r * 1.6, 2);\n      var rc = round(r * 4, 2);\n      var aPart = 'A ' + rc + ',' + rc + ' 0 0 1 ';\n      return align(angle, standoff, 'M-' + x + ',' + y1 + aPart + x + ',' + y1 + aPart + '0,-' + y2 + aPart + '-' + x + ',' + y1 + 'Z');\n    }\n  },\n  'star-triangle-down': {\n    n: 20,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var x = round(r * sqrt3 * 0.8, 2);\n      var y1 = round(r * 0.8, 2);\n      var y2 = round(r * 1.6, 2);\n      var rc = round(r * 4, 2);\n      var aPart = 'A ' + rc + ',' + rc + ' 0 0 1 ';\n      return align(angle, standoff, 'M' + x + ',-' + y1 + aPart + '-' + x + ',-' + y1 + aPart + '0,' + y2 + aPart + x + ',-' + y1 + 'Z');\n    }\n  },\n  'star-square': {\n    n: 21,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rp = round(r * 1.1, 2);\n      var rc = round(r * 2, 2);\n      var aPart = 'A ' + rc + ',' + rc + ' 0 0 1 ';\n      return align(angle, standoff, 'M-' + rp + ',-' + rp + aPart + '-' + rp + ',' + rp + aPart + rp + ',' + rp + aPart + rp + ',-' + rp + aPart + '-' + rp + ',-' + rp + 'Z');\n    }\n  },\n  'star-diamond': {\n    n: 22,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rp = round(r * 1.4, 2);\n      var rc = round(r * 1.9, 2);\n      var aPart = 'A ' + rc + ',' + rc + ' 0 0 1 ';\n      return align(angle, standoff, 'M-' + rp + ',0' + aPart + '0,' + rp + aPart + rp + ',0' + aPart + '0,-' + rp + aPart + '-' + rp + ',0' + 'Z');\n    }\n  },\n  'diamond-tall': {\n    n: 23,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var x = round(r * 0.7, 2);\n      var y = round(r * 1.4, 2);\n      return align(angle, standoff, 'M0,' + y + 'L' + x + ',0L0,-' + y + 'L-' + x + ',0Z');\n    }\n  },\n  'diamond-wide': {\n    n: 24,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var x = round(r * 1.4, 2);\n      var y = round(r * 0.7, 2);\n      return align(angle, standoff, 'M0,' + y + 'L' + x + ',0L0,-' + y + 'L-' + x + ',0Z');\n    }\n  },\n  hourglass: {\n    n: 25,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M' + rs + ',' + rs + 'H-' + rs + 'L' + rs + ',-' + rs + 'H-' + rs + 'Z');\n    },\n    noDot: true\n  },\n  bowtie: {\n    n: 26,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M' + rs + ',' + rs + 'V-' + rs + 'L-' + rs + ',' + rs + 'V-' + rs + 'Z');\n    },\n    noDot: true\n  },\n  'circle-cross': {\n    n: 27,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M0,' + rs + 'V-' + rs + 'M' + rs + ',0H-' + rs + 'M' + rs + ',0A' + rs + ',' + rs + ' 0 1,1 0,-' + rs + 'A' + rs + ',' + rs + ' 0 0,1 ' + rs + ',0Z');\n    },\n    needLine: true,\n    noDot: true\n  },\n  'circle-x': {\n    n: 28,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = round(r, 2);\n      var rc = round(r / sqrt2, 2);\n      return align(angle, standoff, 'M' + rc + ',' + rc + 'L-' + rc + ',-' + rc + 'M' + rc + ',-' + rc + 'L-' + rc + ',' + rc + 'M' + rs + ',0A' + rs + ',' + rs + ' 0 1,1 0,-' + rs + 'A' + rs + ',' + rs + ' 0 0,1 ' + rs + ',0Z');\n    },\n    needLine: true,\n    noDot: true\n  },\n  'square-cross': {\n    n: 29,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M0,' + rs + 'V-' + rs + 'M' + rs + ',0H-' + rs + 'M' + rs + ',' + rs + 'H-' + rs + 'V-' + rs + 'H' + rs + 'Z');\n    },\n    needLine: true,\n    noDot: true\n  },\n  'square-x': {\n    n: 30,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rs = round(r, 2);\n      return align(angle, standoff, 'M' + rs + ',' + rs + 'L-' + rs + ',-' + rs + 'M' + rs + ',-' + rs + 'L-' + rs + ',' + rs + 'M' + rs + ',' + rs + 'H-' + rs + 'V-' + rs + 'H' + rs + 'Z');\n    },\n    needLine: true,\n    noDot: true\n  },\n  'diamond-cross': {\n    n: 31,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rd = round(r * 1.3, 2);\n      return align(angle, standoff, 'M' + rd + ',0L0,' + rd + 'L-' + rd + ',0L0,-' + rd + 'Z' + 'M0,-' + rd + 'V' + rd + 'M-' + rd + ',0H' + rd);\n    },\n    needLine: true,\n    noDot: true\n  },\n  'diamond-x': {\n    n: 32,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rd = round(r * 1.3, 2);\n      var r2 = round(r * 0.65, 2);\n      return align(angle, standoff, 'M' + rd + ',0L0,' + rd + 'L-' + rd + ',0L0,-' + rd + 'Z' + 'M-' + r2 + ',-' + r2 + 'L' + r2 + ',' + r2 + 'M-' + r2 + ',' + r2 + 'L' + r2 + ',-' + r2);\n    },\n    needLine: true,\n    noDot: true\n  },\n  'cross-thin': {\n    n: 33,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rc = round(r * 1.4, 2);\n      return align(angle, standoff, 'M0,' + rc + 'V-' + rc + 'M' + rc + ',0H-' + rc);\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'x-thin': {\n    n: 34,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r, 2);\n      return align(angle, standoff, 'M' + rx + ',' + rx + 'L-' + rx + ',-' + rx + 'M' + rx + ',-' + rx + 'L-' + rx + ',' + rx);\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  asterisk: {\n    n: 35,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rc = round(r * 1.2, 2);\n      var rs = round(r * 0.85, 2);\n      return align(angle, standoff, 'M0,' + rc + 'V-' + rc + 'M' + rc + ',0H-' + rc + 'M' + rs + ',' + rs + 'L-' + rs + ',-' + rs + 'M' + rs + ',-' + rs + 'L-' + rs + ',' + rs);\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  hash: {\n    n: 36,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var r1 = round(r / 2, 2);\n      var r2 = round(r, 2);\n      return align(angle, standoff, 'M' + r1 + ',' + r2 + 'V-' + r2 + 'M' + (r1 - r2) + ',-' + r2 + 'V' + r2 + 'M' + r2 + ',' + r1 + 'H-' + r2 + 'M-' + r2 + ',' + (r1 - r2) + 'H' + r2);\n    },\n    needLine: true,\n    noFill: true\n  },\n  'y-up': {\n    n: 37,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var x = round(r * 1.2, 2);\n      var y0 = round(r * 1.6, 2);\n      var y1 = round(r * 0.8, 2);\n      return align(angle, standoff, 'M-' + x + ',' + y1 + 'L0,0M' + x + ',' + y1 + 'L0,0M0,-' + y0 + 'L0,0');\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'y-down': {\n    n: 38,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var x = round(r * 1.2, 2);\n      var y0 = round(r * 1.6, 2);\n      var y1 = round(r * 0.8, 2);\n      return align(angle, standoff, 'M-' + x + ',-' + y1 + 'L0,0M' + x + ',-' + y1 + 'L0,0M0,' + y0 + 'L0,0');\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'y-left': {\n    n: 39,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var y = round(r * 1.2, 2);\n      var x0 = round(r * 1.6, 2);\n      var x1 = round(r * 0.8, 2);\n      return align(angle, standoff, 'M' + x1 + ',' + y + 'L0,0M' + x1 + ',-' + y + 'L0,0M-' + x0 + ',0L0,0');\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'y-right': {\n    n: 40,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var y = round(r * 1.2, 2);\n      var x0 = round(r * 1.6, 2);\n      var x1 = round(r * 0.8, 2);\n      return align(angle, standoff, 'M-' + x1 + ',' + y + 'L0,0M-' + x1 + ',-' + y + 'L0,0M' + x0 + ',0L0,0');\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'line-ew': {\n    n: 41,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rc = round(r * 1.4, 2);\n      return align(angle, standoff, 'M' + rc + ',0H-' + rc);\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'line-ns': {\n    n: 42,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rc = round(r * 1.4, 2);\n      return align(angle, standoff, 'M0,' + rc + 'V-' + rc);\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'line-ne': {\n    n: 43,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r, 2);\n      return align(angle, standoff, 'M' + rx + ',-' + rx + 'L-' + rx + ',' + rx);\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'line-nw': {\n    n: 44,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r, 2);\n      return align(angle, standoff, 'M' + rx + ',' + rx + 'L-' + rx + ',-' + rx);\n    },\n    needLine: true,\n    noDot: true,\n    noFill: true\n  },\n  'arrow-up': {\n    n: 45,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r, 2);\n      var ry = round(r * 2, 2);\n      return align(angle, standoff, 'M0,0L-' + rx + ',' + ry + 'H' + rx + 'Z');\n    },\n    backoff: 1,\n    noDot: true\n  },\n  'arrow-down': {\n    n: 46,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r, 2);\n      var ry = round(r * 2, 2);\n      return align(angle, standoff, 'M0,0L-' + rx + ',-' + ry + 'H' + rx + 'Z');\n    },\n    noDot: true\n  },\n  'arrow-left': {\n    n: 47,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r * 2, 2);\n      var ry = round(r, 2);\n      return align(angle, standoff, 'M0,0L' + rx + ',-' + ry + 'V' + ry + 'Z');\n    },\n    noDot: true\n  },\n  'arrow-right': {\n    n: 48,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r * 2, 2);\n      var ry = round(r, 2);\n      return align(angle, standoff, 'M0,0L-' + rx + ',-' + ry + 'V' + ry + 'Z');\n    },\n    noDot: true\n  },\n  'arrow-bar-up': {\n    n: 49,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r, 2);\n      var ry = round(r * 2, 2);\n      return align(angle, standoff, 'M-' + rx + ',0H' + rx + 'M0,0L-' + rx + ',' + ry + 'H' + rx + 'Z');\n    },\n    backoff: 1,\n    needLine: true,\n    noDot: true\n  },\n  'arrow-bar-down': {\n    n: 50,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r, 2);\n      var ry = round(r * 2, 2);\n      return align(angle, standoff, 'M-' + rx + ',0H' + rx + 'M0,0L-' + rx + ',-' + ry + 'H' + rx + 'Z');\n    },\n    needLine: true,\n    noDot: true\n  },\n  'arrow-bar-left': {\n    n: 51,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r * 2, 2);\n      var ry = round(r, 2);\n      return align(angle, standoff, 'M0,-' + ry + 'V' + ry + 'M0,0L' + rx + ',-' + ry + 'V' + ry + 'Z');\n    },\n    needLine: true,\n    noDot: true\n  },\n  'arrow-bar-right': {\n    n: 52,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var rx = round(r * 2, 2);\n      var ry = round(r, 2);\n      return align(angle, standoff, 'M0,-' + ry + 'V' + ry + 'M0,0L-' + rx + ',-' + ry + 'V' + ry + 'Z');\n    },\n    needLine: true,\n    noDot: true\n  },\n  'arrow': {\n    n: 53,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var headAngle = PI / 2.5; // 36 degrees - golden ratio\n\n      var x = 2 * r * cos(headAngle);\n      var y = 2 * r * sin(headAngle);\n      return align(angle, standoff, 'M0,0' + 'L' + -x + ',' + y + 'L' + x + ',' + y + 'Z');\n    },\n    backoff: 0.9,\n    noDot: true\n  },\n  'arrow-wide': {\n    n: 54,\n    f: function f(r, angle, standoff) {\n      if (skipAngle(angle)) return emptyPath;\n      var headAngle = PI / 4; // 90 degrees\n\n      var x = 2 * r * cos(headAngle);\n      var y = 2 * r * sin(headAngle);\n      return align(angle, standoff, 'M0,0' + 'L' + -x + ',' + y + 'A ' + 2 * r + ',' + 2 * r + ' 0 0 1 ' + x + ',' + y + 'Z');\n    },\n    backoff: 0.4,\n    noDot: true\n  }\n};\n\nfunction skipAngle(angle) {\n  return angle === null;\n}\n\nvar lastPathIn, lastPathOut;\nvar lastAngle, lastStandoff;\n\nfunction align(angle, standoff, path) {\n  if ((!angle || angle % 360 === 0) && !standoff) return path;\n  if (lastAngle === angle && lastStandoff === standoff && lastPathIn === path) return lastPathOut;\n  lastAngle = angle;\n  lastStandoff = standoff;\n  lastPathIn = path;\n\n  function rotate(t, xy) {\n    var cosT = cos(t);\n    var sinT = sin(t);\n    var x = xy[0];\n    var y = xy[1] + (standoff || 0);\n    return [x * cosT - y * sinT, x * sinT + y * cosT];\n  }\n\n  var t = angle / 180 * PI;\n  var x = 0;\n  var y = 0;\n  var cmd = parseSvgPath(path);\n  var str = '';\n\n  for (var i = 0; i < cmd.length; i++) {\n    var cmdI = cmd[i];\n    var op = cmdI[0];\n    var x0 = x;\n    var y0 = y;\n\n    if (op === 'M' || op === 'L') {\n      x = +cmdI[1];\n      y = +cmdI[2];\n    } else if (op === 'm' || op === 'l') {\n      x += +cmdI[1];\n      y += +cmdI[2];\n    } else if (op === 'H') {\n      x = +cmdI[1];\n    } else if (op === 'h') {\n      x += +cmdI[1];\n    } else if (op === 'V') {\n      y = +cmdI[1];\n    } else if (op === 'v') {\n      y += +cmdI[1];\n    } else if (op === 'A') {\n      x = +cmdI[1];\n      y = +cmdI[2];\n      var E = rotate(t, [+cmdI[6], +cmdI[7]]);\n      cmdI[6] = E[0];\n      cmdI[7] = E[1];\n      cmdI[3] = +cmdI[3] + angle;\n    } // change from H, V, h, v to L or l\n\n\n    if (op === 'H' || op === 'V') op = 'L';\n    if (op === 'h' || op === 'v') op = 'l';\n\n    if (op === 'm' || op === 'l') {\n      x -= x0;\n      y -= y0;\n    }\n\n    var B = rotate(t, [x, y]);\n    if (op === 'H' || op === 'V') op = 'L';\n\n    if (op === 'M' || op === 'L' || op === 'm' || op === 'l') {\n      cmdI[1] = B[0];\n      cmdI[2] = B[1];\n    }\n\n    cmdI[0] = op;\n    str += cmdI[0] + cmdI.slice(1).join(',');\n  }\n\n  lastPathOut = str;\n  return str;\n}","map":null,"metadata":{},"sourceType":"script"}