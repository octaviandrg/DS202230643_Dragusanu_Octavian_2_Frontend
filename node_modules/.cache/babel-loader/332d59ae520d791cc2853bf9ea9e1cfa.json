{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar calcColorscale = require('../scatter/colorscale_calc');\n\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nvar dataArrays = ['a', 'b', 'c'];\nvar arraysToFill = {\n  a: ['b', 'c'],\n  b: ['a', 'c'],\n  c: ['a', 'b']\n};\n\nmodule.exports = function calc(gd, trace) {\n  var ternary = gd._fullLayout[trace.subplot];\n  var displaySum = ternary.sum;\n  var normSum = trace.sum || displaySum;\n  var arrays = {\n    a: trace.a,\n    b: trace.b,\n    c: trace.c\n  };\n  var i, j, dataArray, newArray, fillArray1, fillArray2; // fill in one missing component\n\n  for (i = 0; i < dataArrays.length; i++) {\n    dataArray = dataArrays[i];\n    if (arrays[dataArray]) continue;\n    fillArray1 = arrays[arraysToFill[dataArray][0]];\n    fillArray2 = arrays[arraysToFill[dataArray][1]];\n    newArray = new Array(fillArray1.length);\n\n    for (j = 0; j < fillArray1.length; j++) {\n      newArray[j] = normSum - fillArray1[j] - fillArray2[j];\n    }\n\n    arrays[dataArray] = newArray;\n  } // make the calcdata array\n\n\n  var serieslen = trace._length;\n  var cd = new Array(serieslen);\n  var a, b, c, norm, x, y;\n\n  for (i = 0; i < serieslen; i++) {\n    a = arrays.a[i];\n    b = arrays.b[i];\n    c = arrays.c[i];\n\n    if (isNumeric(a) && isNumeric(b) && isNumeric(c)) {\n      a = +a;\n      b = +b;\n      c = +c;\n      norm = displaySum / (a + b + c);\n\n      if (norm !== 1) {\n        a *= norm;\n        b *= norm;\n        c *= norm;\n      } // map a, b, c onto x and y where the full scale of y\n      // is [0, sum], and x is [-sum, sum]\n      // TODO: this makes `a` always the top, `b` the bottom left,\n      // and `c` the bottom right. Do we want options to rearrange\n      // these?\n\n\n      y = a;\n      x = c - b;\n      cd[i] = {\n        x: x,\n        y: y,\n        a: a,\n        b: b,\n        c: c\n      };\n    } else cd[i] = {\n      x: false,\n      y: false\n    };\n  }\n\n  calcMarkerSize(trace, serieslen);\n  calcColorscale(gd, trace);\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};","map":null,"metadata":{},"sourceType":"script"}