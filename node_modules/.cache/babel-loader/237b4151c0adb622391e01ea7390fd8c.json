{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\n\nvar colorscaleDefaults = require('../../components/colorscale/defaults');\n\nvar handleDomainDefaults = require('../../plots/domain').defaults;\n\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar attributes = require('./attributes');\n\nvar mergeLength = require('../parcoords/merge_length');\n\nfunction handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce) {\n  coerce('line.shape');\n  coerce('line.hovertemplate');\n  var lineColor = coerce('line.color', layout.colorway[0]);\n\n  if (hasColorscale(traceIn, 'line') && Lib.isArrayOrTypedArray(lineColor)) {\n    if (lineColor.length) {\n      coerce('line.colorscale');\n      colorscaleDefaults(traceIn, traceOut, layout, coerce, {\n        prefix: 'line.',\n        cLetter: 'c'\n      });\n      return lineColor.length;\n    } else {\n      traceOut.line.color = defaultColor;\n    }\n  }\n\n  return Infinity;\n}\n\nfunction dimensionDefaults(dimensionIn, dimensionOut) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(dimensionIn, dimensionOut, attributes.dimensions, attr, dflt);\n  }\n\n  var values = coerce('values');\n  var visible = coerce('visible');\n\n  if (!(values && values.length)) {\n    visible = dimensionOut.visible = false;\n  }\n\n  if (visible) {\n    // Dimension level\n    coerce('label');\n    coerce('displayindex', dimensionOut._index); // Category level\n\n    var arrayIn = dimensionIn.categoryarray;\n    var isValidArray = Array.isArray(arrayIn) && arrayIn.length > 0;\n    var orderDefault;\n    if (isValidArray) orderDefault = 'array';\n    var order = coerce('categoryorder', orderDefault); // coerce 'categoryarray' only in array order case\n\n    if (order === 'array') {\n      coerce('categoryarray');\n      coerce('ticktext');\n    } else {\n      delete dimensionIn.categoryarray;\n      delete dimensionIn.ticktext;\n    } // cannot set 'categoryorder' to 'array' with an invalid 'categoryarray'\n\n\n    if (!isValidArray && order === 'array') {\n      dimensionOut.categoryorder = 'trace';\n    }\n  }\n}\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var dimensions = handleArrayContainerDefaults(traceIn, traceOut, {\n    name: 'dimensions',\n    handleItemDefaults: dimensionDefaults\n  });\n  var len = handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n  handleDomainDefaults(traceOut, layout, coerce);\n\n  if (!Array.isArray(dimensions) || !dimensions.length) {\n    traceOut.visible = false;\n  }\n\n  mergeLength(traceOut, dimensions, 'values', len);\n  coerce('hoveron');\n  coerce('hovertemplate');\n  coerce('arrangement');\n  coerce('bundlecolors');\n  coerce('sortpaths');\n  coerce('counts');\n  var labelfontDflt = {\n    family: layout.font.family,\n    size: Math.round(layout.font.size),\n    color: layout.font.color\n  };\n  Lib.coerceFont(coerce, 'labelfont', labelfontDflt);\n  var categoryfontDefault = {\n    family: layout.font.family,\n    size: Math.round(layout.font.size / 1.2),\n    color: layout.font.color\n  };\n  Lib.coerceFont(coerce, 'tickfont', categoryfontDefault);\n};","map":null,"metadata":{},"sourceType":"script"}