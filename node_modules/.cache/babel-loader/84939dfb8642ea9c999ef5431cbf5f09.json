{"ast":null,"code":"'use strict';\n\nvar paren = require('parenthesis');\n\nmodule.exports = function splitBy(string, separator, o) {\n  if (string == null) throw Error('First argument should be a string');\n  if (separator == null) throw Error('Separator should be a string or a RegExp');\n  if (!o) o = {};else if (typeof o === 'string' || Array.isArray(o)) {\n    o = {\n      ignore: o\n    };\n  }\n  if (o.escape == null) o.escape = true;\n  if (o.ignore == null) o.ignore = ['[]', '()', '{}', '<>', '\"\"', \"''\", '``', '“”', '«»'];else {\n    if (typeof o.ignore === 'string') {\n      o.ignore = [o.ignore];\n    }\n\n    o.ignore = o.ignore.map(function (pair) {\n      // '\"' → '\"\"'\n      if (pair.length === 1) pair = pair + pair;\n      return pair;\n    });\n  }\n  var tokens = paren.parse(string, {\n    flat: true,\n    brackets: o.ignore\n  });\n  var str = tokens[0];\n  var parts = str.split(separator); // join parts separated by escape\n\n  if (o.escape) {\n    var cleanParts = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      var prev = parts[i];\n      var part = parts[i + 1];\n\n      if (prev[prev.length - 1] === '\\\\' && prev[prev.length - 2] !== '\\\\') {\n        cleanParts.push(prev + separator + part);\n        i++;\n      } else {\n        cleanParts.push(prev);\n      }\n    }\n\n    parts = cleanParts;\n  } // open parens pack & apply unquotes, if any\n\n\n  for (var i = 0; i < parts.length; i++) {\n    tokens[0] = parts[i];\n    parts[i] = paren.stringify(tokens, {\n      flat: true\n    });\n  }\n\n  return parts;\n};","map":null,"metadata":{},"sourceType":"script"}