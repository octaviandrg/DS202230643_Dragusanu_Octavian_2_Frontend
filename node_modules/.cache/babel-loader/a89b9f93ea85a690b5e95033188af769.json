{"ast":null,"code":"'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar Scene2D = require('./scene2d');\n\nvar layoutGlobalAttrs = require('../layout_attributes');\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar constants = require('../cartesian/constants');\n\nvar Cartesian = require('../cartesian');\n\nvar fxAttrs = require('../../components/fx/layout_attributes');\n\nvar getSubplotData = require('../get_data').getSubplotData;\n\nexports.name = 'gl2d';\nexports.attr = ['xaxis', 'yaxis'];\nexports.idRoot = ['x', 'y'];\nexports.idRegex = constants.idRegex;\nexports.attrRegex = constants.attrRegex;\nexports.attributes = require('../cartesian/attributes');\n\nexports.supplyLayoutDefaults = function (layoutIn, layoutOut, fullData) {\n  if (!layoutOut._has('cartesian')) {\n    Cartesian.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n  }\n}; // gl2d uses svg axis attributes verbatim, but overrides editType\n// this could potentially be just `layoutAttributes` but it would\n// still need special handling somewhere to give it precedence over\n// the svg version when both are in use on one plot\n\n\nexports.layoutAttrOverrides = overrideAll(Cartesian.layoutAttributes, 'plot', 'from-root'); // similar overrides for base plot attributes (and those added by components)\n\nexports.baseLayoutAttrOverrides = overrideAll({\n  plot_bgcolor: layoutGlobalAttrs.plot_bgcolor,\n  hoverlabel: fxAttrs.hoverlabel // dragmode needs calc but only when transitioning TO lasso or select\n  // so for now it's left inside _relayout\n  // dragmode: fxAttrs.dragmode\n\n}, 'plot', 'nested');\n\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var subplotIds = fullLayout._subplots.gl2d;\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotId = subplotIds[i];\n    var subplotObj = fullLayout._plots[subplotId];\n    var fullSubplotData = getSubplotData(fullData, 'gl2d', subplotId); // ref. to corresp. Scene instance\n\n    var scene = subplotObj._scene2d; // If Scene is not instantiated, create one!\n\n    if (scene === undefined) {\n      scene = new Scene2D({\n        id: subplotId,\n        graphDiv: gd,\n        container: gd.querySelector('.gl-container'),\n        staticPlot: gd._context.staticPlot,\n        plotGlPixelRatio: gd._context.plotGlPixelRatio\n      }, fullLayout); // set ref to Scene instance\n\n      subplotObj._scene2d = scene;\n    }\n\n    scene.plot(fullSubplotData, gd.calcdata, fullLayout, gd.layout);\n  }\n};\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldSceneKeys = oldFullLayout._subplots.gl2d || [];\n\n  for (var i = 0; i < oldSceneKeys.length; i++) {\n    var id = oldSceneKeys[i];\n    var oldSubplot = oldFullLayout._plots[id]; // old subplot wasn't gl2d; nothing to do\n\n    if (!oldSubplot._scene2d) continue; // if no traces are present, delete gl2d subplot\n\n    var subplotData = getSubplotData(newFullData, 'gl2d', id);\n\n    if (subplotData.length === 0) {\n      oldSubplot._scene2d.destroy();\n\n      delete oldFullLayout._plots[id];\n    }\n  } // since we use cartesian interactions, do cartesian clean\n\n\n  Cartesian.clean.apply(this, arguments);\n};\n\nexports.drawFramework = function (gd) {\n  if (!gd._context.staticPlot) {\n    Cartesian.drawFramework(gd);\n  }\n};\n\nexports.toSVG = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots.gl2d;\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplot = fullLayout._plots[subplotIds[i]];\n    var scene = subplot._scene2d;\n    var imageData = scene.toImage('png');\n\n    var image = fullLayout._glimages.append('svg:image');\n\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      preserveAspectRatio: 'none'\n    });\n    scene.destroy();\n  }\n};\n\nexports.updateFx = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots.gl2d;\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotObj = fullLayout._plots[subplotIds[i]]._scene2d;\n    subplotObj.updateFx(fullLayout.dragmode);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}