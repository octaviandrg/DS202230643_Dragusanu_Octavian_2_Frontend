{"ast":null,"code":"'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\n\nvar descriptionWithDates = require('../../plots/cartesian/axis_format_attributes').descriptionWithDates;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = {\n  color: {\n    valType: 'color',\n    editType: 'calc',\n    description: ['Sets default for all colors associated with this axis', 'all at once: line, font, tick, and grid colors.', 'Grid color is lightened by blending this with the plot background', 'Individual pieces can override this.'].join(' ')\n  },\n  smoothing: {\n    valType: 'number',\n    dflt: 1,\n    min: 0,\n    max: 1.3,\n    editType: 'calc'\n  },\n  title: {\n    text: {\n      valType: 'string',\n      dflt: '',\n      editType: 'calc',\n      description: ['Sets the title of this axis.', 'Note that before the existence of `title.text`, the title\\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')\n    },\n    font: fontAttrs({\n      editType: 'calc',\n      description: ['Sets this axis\\' title font.', 'Note that the title\\'s font used to be set', 'by the now deprecated `titlefont` attribute.'].join(' ')\n    }),\n    // TODO how is this different than `title.standoff`\n    offset: {\n      valType: 'number',\n      dflt: 10,\n      editType: 'calc',\n      description: ['An additional amount by which to offset the title from the tick', 'labels, given in pixels.', 'Note that this used to be set', 'by the now deprecated `titleoffset` attribute.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  type: {\n    valType: 'enumerated',\n    // '-' means we haven't yet run autotype or couldn't find any data\n    // it gets turned into linear in gd._fullLayout but not copied back\n    // to gd.data like the others are.\n    values: ['-', 'linear', 'date', 'category'],\n    dflt: '-',\n    editType: 'calc',\n    description: ['Sets the axis type.', 'By default, plotly attempts to determined the axis type', 'by looking into the data of the traces that referenced', 'the axis in question.'].join(' ')\n  },\n  autotypenumbers: axesAttrs.autotypenumbers,\n  autorange: {\n    valType: 'enumerated',\n    values: [true, false, 'reversed'],\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not the range of this axis is', 'computed in relation to the input data.', 'See `rangemode` for more info.', 'If `range` is provided, then `autorange` is set to *false*.'].join(' ')\n  },\n  rangemode: {\n    valType: 'enumerated',\n    values: ['normal', 'tozero', 'nonnegative'],\n    dflt: 'normal',\n    editType: 'calc',\n    description: ['If *normal*, the range is computed in relation to the extrema', 'of the input data.', 'If *tozero*`, the range extends to 0,', 'regardless of the input data', 'If *nonnegative*, the range is non-negative,', 'regardless of the input data.'].join(' ')\n  },\n  range: {\n    valType: 'info_array',\n    editType: 'calc',\n    items: [{\n      valType: 'any',\n      editType: 'calc'\n    }, {\n      valType: 'any',\n      editType: 'calc'\n    }],\n    description: ['Sets the range of this axis.', 'If the axis `type` is *log*, then you must take the log of your', 'desired range (e.g. to set the range from 1 to 100,', 'set the range from 0 to 2).', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.'].join(' ')\n  },\n  fixedrange: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['Determines whether or not this axis is zoom-able.', 'If true, then zoom is disabled.'].join(' ')\n  },\n  cheatertype: {\n    valType: 'enumerated',\n    values: ['index', 'value'],\n    dflt: 'value',\n    editType: 'calc'\n  },\n  tickmode: {\n    valType: 'enumerated',\n    values: ['linear', 'array'],\n    dflt: 'array',\n    editType: 'calc'\n  },\n  nticks: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    editType: 'calc',\n    description: ['Specifies the maximum number of ticks for the particular axis.', 'The actual number of ticks will be chosen automatically to be', 'less than or equal to `nticks`.', 'Has an effect only if `tickmode` is set to *auto*.'].join(' ')\n  },\n  tickvals: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the values at which ticks on this axis appear.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `ticktext`.'].join(' ')\n  },\n  ticktext: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the text displayed at the ticks position via `tickvals`.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `tickvals`.'].join(' ')\n  },\n  showticklabels: {\n    valType: 'enumerated',\n    values: ['start', 'end', 'both', 'none'],\n    dflt: 'start',\n    editType: 'calc',\n    description: ['Determines whether axis labels are drawn on the low side,', 'the high side, both, or neither side of the axis.'].join(' ')\n  },\n  tickfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the tick font.'\n  }),\n  tickangle: {\n    valType: 'angle',\n    dflt: 'auto',\n    editType: 'calc',\n    description: ['Sets the angle of the tick labels with respect to the horizontal.', 'For example, a `tickangle` of -90 draws the tick labels', 'vertically.'].join(' ')\n  },\n  tickprefix: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: 'Sets a tick label prefix.'\n  },\n  showtickprefix: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'calc',\n    description: ['If *all*, all tick labels are displayed with a prefix.', 'If *first*, only the first tick is displayed with a prefix.', 'If *last*, only the last tick is displayed with a suffix.', 'If *none*, tick prefixes are hidden.'].join(' ')\n  },\n  ticksuffix: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: 'Sets a tick label suffix.'\n  },\n  showticksuffix: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'calc',\n    description: 'Same as `showtickprefix` but for tick suffixes.'\n  },\n  showexponent: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'calc',\n    description: ['If *all*, all exponents are shown besides their significands.', 'If *first*, only the exponent of the first tick is shown.', 'If *last*, only the exponent of the last tick is shown.', 'If *none*, no exponents appear.'].join(' ')\n  },\n  exponentformat: {\n    valType: 'enumerated',\n    values: ['none', 'e', 'E', 'power', 'SI', 'B'],\n    dflt: 'B',\n    editType: 'calc',\n    description: ['Determines a formatting rule for the tick exponents.', 'For example, consider the number 1,000,000,000.', 'If *none*, it appears as 1,000,000,000.', 'If *e*, 1e+9.', 'If *E*, 1E+9.', 'If *power*, 1x10^9 (with 9 in a super script).', 'If *SI*, 1G.', 'If *B*, 1B.'].join(' ')\n  },\n  minexponent: {\n    valType: 'number',\n    dflt: 3,\n    min: 0,\n    editType: 'calc',\n    description: ['Hide SI prefix for 10^n if |n| is below this number'].join(' ')\n  },\n  separatethousands: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['If \"true\", even 4-digit integers are separated'].join(' ')\n  },\n  tickformat: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: descriptionWithDates('tick label')\n  },\n  tickformatstops: overrideAll(axesAttrs.tickformatstops, 'calc', 'from-root'),\n  categoryorder: {\n    valType: 'enumerated',\n    values: ['trace', 'category ascending', 'category descending', 'array'\n    /* , 'value ascending', 'value descending'*/\n    // value ascending / descending to be implemented later\n    ],\n    dflt: 'trace',\n    editType: 'calc',\n    description: ['Specifies the ordering logic for the case of categorical variables.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.',\n    /* 'Set `categoryorder` to *value ascending* or *value descending* if order should be determined by the',\n    'numerical order of the values.',*/\n    // // value ascending / descending to be implemented later\n    'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'].join(' ')\n  },\n  categoryarray: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the order in which categories on this axis appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')\n  },\n  labelpadding: {\n    valType: 'integer',\n    dflt: 10,\n    editType: 'calc',\n    description: 'Extra padding between label and the axis'\n  },\n  labelprefix: {\n    valType: 'string',\n    editType: 'calc',\n    description: 'Sets a axis label prefix.'\n  },\n  labelsuffix: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: 'Sets a axis label suffix.'\n  },\n  // lines and grids\n  showline: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['Determines whether or not a line bounding this axis is drawn.'].join(' ')\n  },\n  linecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    editType: 'calc',\n    description: 'Sets the axis line color.'\n  },\n  linewidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the axis line.'\n  },\n  gridcolor: {\n    valType: 'color',\n    editType: 'calc',\n    description: 'Sets the axis line color.'\n  },\n  gridwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the axis line.'\n  },\n  griddash: extendFlat({}, dash, {\n    editType: 'calc'\n  }),\n  showgrid: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not grid lines are drawn.', 'If *true*, the grid lines are drawn at every tick mark.'].join(' ')\n  },\n  minorgridcount: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    editType: 'calc',\n    description: 'Sets the number of minor grid ticks per major grid tick'\n  },\n  minorgridwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the grid lines.'\n  },\n  minorgriddash: extendFlat({}, dash, {\n    editType: 'calc'\n  }),\n  minorgridcolor: {\n    valType: 'color',\n    dflt: colorAttrs.lightLine,\n    editType: 'calc',\n    description: 'Sets the color of the grid lines.'\n  },\n  startline: {\n    valType: 'boolean',\n    editType: 'calc',\n    description: ['Determines whether or not a line is drawn at along the starting value', 'of this axis.', 'If *true*, the start line is drawn on top of the grid lines.'].join(' ')\n  },\n  startlinecolor: {\n    valType: 'color',\n    editType: 'calc',\n    description: 'Sets the line color of the start line.'\n  },\n  startlinewidth: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the start line.'\n  },\n  endline: {\n    valType: 'boolean',\n    editType: 'calc',\n    description: ['Determines whether or not a line is drawn at along the final value', 'of this axis.', 'If *true*, the end line is drawn on top of the grid lines.'].join(' ')\n  },\n  endlinewidth: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the end line.'\n  },\n  endlinecolor: {\n    valType: 'color',\n    editType: 'calc',\n    description: 'Sets the line color of the end line.'\n  },\n  tick0: {\n    valType: 'number',\n    min: 0,\n    dflt: 0,\n    editType: 'calc',\n    description: 'The starting index of grid lines along the axis'\n  },\n  dtick: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'calc',\n    description: 'The stride between grid lines along the axis'\n  },\n  arraytick0: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    editType: 'calc',\n    description: 'The starting index of grid lines along the axis'\n  },\n  arraydtick: {\n    valType: 'integer',\n    min: 1,\n    dflt: 1,\n    editType: 'calc',\n    description: 'The stride between grid lines along the axis'\n  },\n  _deprecated: {\n    title: {\n      valType: 'string',\n      editType: 'calc',\n      description: ['Deprecated in favor of `title.text`.', 'Note that value of `title` is no longer a simple', '*string* but a set of sub-attributes.'].join(' ')\n    },\n    titlefont: fontAttrs({\n      editType: 'calc',\n      description: 'Deprecated in favor of `title.font`.'\n    }),\n    titleoffset: {\n      valType: 'number',\n      dflt: 10,\n      editType: 'calc',\n      description: 'Deprecated in favor of `title.offset`.'\n    }\n  },\n  editType: 'calc'\n};","map":null,"metadata":{},"sourceType":"script"}