{"ast":null,"code":"'use strict';\n\nvar scatterglAttrs = require('../scatter/attributes');\n\nmodule.exports = {\n  x: scatterglAttrs.x,\n  y: scatterglAttrs.y,\n  xy: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Faster alternative to specifying `x` and `y` separately.', 'If supplied, it must be a typed `Float32Array` array that', 'represents points such that `xy[i * 2] = x[i]` and `xy[i * 2 + 1] = y[i]`'].join(' ')\n  },\n  indices: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A sequential value, 0..n, supply it to avoid creating this array inside plotting.', 'If specified, it must be a typed `Int32Array` array.', 'Its length must be equal to or greater than the number of points.', 'For the best performance and memory use, create one large `indices` typed array', 'that is guaranteed to be at least as long as the largest number of points during', 'use, and reuse it on each `Plotly.restyle()` call.'].join(' ')\n  },\n  xbounds: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Specify `xbounds` in the shape of `[xMin, xMax] to avoid looping through', 'the `xy` typed array. Use it in conjunction with `xy` and `ybounds` for the performance benefits.'].join(' ')\n  },\n  ybounds: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Specify `ybounds` in the shape of `[yMin, yMax] to avoid looping through', 'the `xy` typed array. Use it in conjunction with `xy` and `xbounds` for the performance benefits.'].join(' ')\n  },\n  text: scatterglAttrs.text,\n  marker: {\n    color: {\n      valType: 'color',\n      arrayOk: false,\n      editType: 'calc',\n      description: ['Sets the marker fill color. It accepts a specific color.', 'If the color is not fully opaque and there are hundreds of thousands', 'of points, it may cause slower zooming and panning.'].join(' ')\n    },\n    opacity: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      arrayOk: false,\n      editType: 'calc',\n      description: ['Sets the marker opacity. The default value is `1` (fully opaque).', 'If the markers are not fully opaque and there are hundreds of thousands', 'of points, it may cause slower zooming and panning.', 'Opacity fades the color even if `blend` is left on `false` even if there', 'is no translucency effect in that case.'].join(' ')\n    },\n    blend: {\n      valType: 'boolean',\n      dflt: null,\n      editType: 'calc',\n      description: ['Determines if colors are blended together for a translucency effect', 'in case `opacity` is specified as a value less then `1`.', 'Setting `blend` to `true` reduces zoom/pan', 'speed if used with large numbers of points.'].join(' ')\n    },\n    sizemin: {\n      valType: 'number',\n      min: 0.1,\n      max: 2,\n      dflt: 0.5,\n      editType: 'calc',\n      description: ['Sets the minimum size (in px) of the rendered marker points, effective when', 'the `pointcloud` shows a million or more points.'].join(' ')\n    },\n    sizemax: {\n      valType: 'number',\n      min: 0.1,\n      dflt: 20,\n      editType: 'calc',\n      description: ['Sets the maximum size (in px) of the rendered marker points.', 'Effective when the `pointcloud` shows only few points.'].join(' ')\n    },\n    border: {\n      color: {\n        valType: 'color',\n        arrayOk: false,\n        editType: 'calc',\n        description: ['Sets the stroke color. It accepts a specific color.', 'If the color is not fully opaque and there are hundreds of thousands', 'of points, it may cause slower zooming and panning.'].join(' ')\n      },\n      arearatio: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 0,\n        editType: 'calc',\n        description: ['Specifies what fraction of the marker area is covered with the', 'border.'].join(' ')\n      },\n      editType: 'calc'\n    },\n    editType: 'calc'\n  },\n  transforms: undefined\n};","map":null,"metadata":{},"sourceType":"script"}