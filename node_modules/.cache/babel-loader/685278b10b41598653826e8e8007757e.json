{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar loggers = require('./loggers');\n\nvar matrix = require('./matrix');\n\nvar mat4X4 = require('gl-mat4');\n/**\n * Allow referencing a graph DOM element either directly\n * or by its id string\n *\n * @param {HTMLDivElement|string} gd: a graph element or its id\n *\n * @returns {HTMLDivElement} the DOM element of the graph\n */\n\n\nfunction getGraphDiv(gd) {\n  var gdElement;\n\n  if (typeof gd === 'string') {\n    gdElement = document.getElementById(gd);\n\n    if (gdElement === null) {\n      throw new Error('No DOM element with id \\'' + gd + '\\' exists on the page.');\n    }\n\n    return gdElement;\n  } else if (gd === null || gd === undefined) {\n    throw new Error('DOM element provided is null or undefined');\n  } // otherwise assume that gd is a DOM element\n\n\n  return gd;\n}\n\nfunction isPlotDiv(el) {\n  var el3 = d3.select(el);\n  return el3.node() instanceof HTMLElement && el3.size() && el3.classed('js-plotly-plot');\n}\n\nfunction removeElement(el) {\n  var elParent = el && el.parentNode;\n  if (elParent) elParent.removeChild(el);\n}\n/**\n * for dynamically adding style rules\n * makes one stylesheet that contains all rules added\n * by all calls to this function\n */\n\n\nfunction addStyleRule(selector, styleString) {\n  addRelatedStyleRule('global', selector, styleString);\n}\n/**\n * for dynamically adding style rules\n * to a stylesheet uniquely identified by a uid\n */\n\n\nfunction addRelatedStyleRule(uid, selector, styleString) {\n  var id = 'plotly.js-style-' + uid;\n  var style = document.getElementById(id);\n\n  if (!style) {\n    style = document.createElement('style');\n    style.setAttribute('id', id); // WebKit hack :(\n\n    style.appendChild(document.createTextNode(''));\n    document.head.appendChild(style);\n  }\n\n  var styleSheet = style.sheet;\n\n  if (styleSheet.insertRule) {\n    styleSheet.insertRule(selector + '{' + styleString + '}', 0);\n  } else if (styleSheet.addRule) {\n    styleSheet.addRule(selector, styleString, 0);\n  } else loggers.warn('addStyleRule failed');\n}\n/**\n * to remove from the page a stylesheet identified by a given uid\n */\n\n\nfunction deleteRelatedStyleRule(uid) {\n  var id = 'plotly.js-style-' + uid;\n  var style = document.getElementById(id);\n  if (style) removeElement(style);\n}\n\nfunction getFullTransformMatrix(element) {\n  var allElements = getElementAndAncestors(element); // the identity matrix\n\n  var out = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  allElements.forEach(function (e) {\n    var t = getElementTransformMatrix(e);\n\n    if (t) {\n      var m = matrix.convertCssMatrix(t);\n      out = mat4X4.multiply(out, out, m);\n    }\n  });\n  return out;\n}\n/**\n * extracts and parses the 2d css style transform matrix from some element\n */\n\n\nfunction getElementTransformMatrix(element) {\n  var style = window.getComputedStyle(element, null);\n  var transform = style.getPropertyValue('-webkit-transform') || style.getPropertyValue('-moz-transform') || style.getPropertyValue('-ms-transform') || style.getPropertyValue('-o-transform') || style.getPropertyValue('transform');\n  if (transform === 'none') return null; // the transform is a string in the form of matrix(a, b, ...) or matrix3d(...)\n\n  return transform.replace('matrix', '').replace('3d', '').slice(1, -1).split(',').map(function (n) {\n    return +n;\n  });\n}\n/**\n * retrieve all DOM elements that are ancestors of the specified one (including itself)\n */\n\n\nfunction getElementAndAncestors(element) {\n  var allElements = [];\n\n  while (isTransformableElement(element)) {\n    allElements.push(element);\n    element = element.parentNode;\n  }\n\n  return allElements;\n}\n\nfunction isTransformableElement(element) {\n  return element && (element instanceof Element || element instanceof HTMLElement);\n}\n\nfunction equalDomRects(a, b) {\n  return a && b && a.x === b.x && a.y === b.y && a.top === b.top && a.left === b.left && a.right === b.right && a.bottom === b.bottom;\n}\n\nmodule.exports = {\n  getGraphDiv: getGraphDiv,\n  isPlotDiv: isPlotDiv,\n  removeElement: removeElement,\n  addStyleRule: addStyleRule,\n  addRelatedStyleRule: addRelatedStyleRule,\n  deleteRelatedStyleRule: deleteRelatedStyleRule,\n  getFullTransformMatrix: getFullTransformMatrix,\n  getElementTransformMatrix: getElementTransformMatrix,\n  getElementAndAncestors: getElementAndAncestors,\n  equalDomRects: equalDomRects\n};","map":null,"metadata":{},"sourceType":"script"}