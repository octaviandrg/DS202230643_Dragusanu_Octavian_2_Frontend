{"ast":null,"code":"'use strict';\n\nvar docs = require('../constants/docs');\n\nvar FORMAT_LINK = docs.FORMAT_LINK;\nvar DATE_FORMAT_LINK = docs.DATE_FORMAT_LINK;\n\nfunction templateFormatStringDescription(opts) {\n  var supportOther = opts && opts.supportOther;\n  return ['Variables are inserted using %{variable},', 'for example \"y: %{y}\"' + (supportOther ? ' as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown.' : '.'), 'Numbers are formatted using d3-format\\'s syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\".', FORMAT_LINK, 'for details on the formatting syntax.', 'Dates are formatted using d3-time-format\\'s syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\".', DATE_FORMAT_LINK, 'for details on the date formatting syntax.'].join(' ');\n}\n\nfunction describeVariables(extra) {\n  var descPart = extra.description ? ' ' + extra.description : '';\n  var keys = extra.keys || [];\n\n  if (keys.length > 0) {\n    var quotedKeys = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      quotedKeys[i] = '`' + keys[i] + '`';\n    }\n\n    descPart = descPart + 'Finally, the template string has access to ';\n\n    if (keys.length === 1) {\n      descPart = 'variable ' + quotedKeys[0];\n    } else {\n      descPart = 'variables ' + quotedKeys.slice(0, -1).join(', ') + ' and ' + quotedKeys.slice(-1) + '.';\n    }\n  }\n\n  return descPart;\n}\n\nexports.hovertemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var descPart = describeVariables(extra);\n  var hovertemplate = {\n    valType: 'string',\n    dflt: '',\n    editType: opts.editType || 'none',\n    description: ['Template string used for rendering the information that appear on hover box.', 'Note that this will override `hoverinfo`.', templateFormatStringDescription({\n      supportOther: true\n    }), 'The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.', 'Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart, 'Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\".', 'To hide the secondary box completely, use an empty tag `<extra></extra>`.'].join(' ')\n  };\n\n  if (opts.arrayOk !== false) {\n    hovertemplate.arrayOk = true;\n  }\n\n  return hovertemplate;\n};\n\nexports.texttemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var descPart = describeVariables(extra);\n  var texttemplate = {\n    valType: 'string',\n    dflt: '',\n    editType: opts.editType || 'calc',\n    description: ['Template string used for rendering the information text that appear on points.', 'Note that this will override `textinfo`.', templateFormatStringDescription(), 'Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart].join(' ')\n  };\n\n  if (opts.arrayOk !== false) {\n    texttemplate.arrayOk = true;\n  }\n\n  return texttemplate;\n};","map":null,"metadata":{},"sourceType":"script"}