{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar constants = require('../scatter/constants');\n\nvar subTypes = require('../scatter/subtypes');\n\nvar handleMarkerDefaults = require('../scatter/marker_defaults');\n\nvar handleLineDefaults = require('../scatter/line_defaults');\n\nvar handleLineShapeDefaults = require('../scatter/line_shape_defaults');\n\nvar handleTextDefaults = require('../scatter/text_defaults');\n\nvar handleFillColorDefaults = require('../scatter/fillcolor_defaults');\n\nvar attributes = require('./attributes');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  coerce('carpet'); // XXX: Don't hard code this\n\n  traceOut.xaxis = 'x';\n  traceOut.yaxis = 'y';\n  var a = coerce('a');\n  var b = coerce('b');\n  var len = Math.min(a.length, b.length);\n\n  if (!len) {\n    traceOut.visible = false;\n    return;\n  }\n\n  traceOut._length = len;\n  coerce('text');\n  coerce('texttemplate');\n  coerce('hovertext');\n  var defaultMode = len < constants.PTS_LINESONLY ? 'lines+markers' : 'lines';\n  coerce('mode', defaultMode);\n\n  if (subTypes.hasLines(traceOut)) {\n    handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce, {\n      backoff: true\n    });\n    handleLineShapeDefaults(traceIn, traceOut, coerce);\n    coerce('connectgaps');\n  }\n\n  if (subTypes.hasMarkers(traceOut)) {\n    handleMarkerDefaults(traceIn, traceOut, defaultColor, layout, coerce, {\n      gradient: true\n    });\n  }\n\n  if (subTypes.hasText(traceOut)) {\n    handleTextDefaults(traceIn, traceOut, layout, coerce);\n  }\n\n  var dfltHoverOn = [];\n\n  if (subTypes.hasMarkers(traceOut) || subTypes.hasText(traceOut)) {\n    coerce('marker.maxdisplayed');\n    dfltHoverOn.push('points');\n  }\n\n  coerce('fill');\n\n  if (traceOut.fill !== 'none') {\n    handleFillColorDefaults(traceIn, traceOut, defaultColor, coerce);\n    if (!subTypes.hasLines(traceOut)) handleLineShapeDefaults(traceIn, traceOut, coerce);\n  }\n\n  if (traceOut.fill === 'tonext' || traceOut.fill === 'toself') {\n    dfltHoverOn.push('fills');\n  }\n\n  var hoverOn = coerce('hoveron', dfltHoverOn.join('+') || 'points');\n  if (hoverOn !== 'fills') coerce('hovertemplate');\n  Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n};","map":null,"metadata":{},"sourceType":"script"}