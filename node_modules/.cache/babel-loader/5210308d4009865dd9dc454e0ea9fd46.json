{"ast":null,"code":"'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar scatterAttrs = require('../scatter/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar colorAttributes = require('../../components/colorscale/attributes');\n\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterLineAttrs = scatterAttrs.line;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\nmodule.exports = overrideAll({\n  lon: {\n    valType: 'data_array',\n    description: 'Sets the longitude coordinates (in degrees East).'\n  },\n  lat: {\n    valType: 'data_array',\n    description: 'Sets the latitude coordinates (in degrees North).'\n  },\n  locations: {\n    valType: 'data_array',\n    description: ['Sets the coordinates via location IDs or names.', 'Coordinates correspond to the centroid of each location given.', 'See `locationmode` for more info.'].join(' ')\n  },\n  locationmode: {\n    valType: 'enumerated',\n    values: ['ISO-3', 'USA-states', 'country names', 'geojson-id'],\n    dflt: 'ISO-3',\n    description: ['Determines the set of locations used to match entries in `locations`', 'to regions on the map.', 'Values *ISO-3*, *USA-states*, *country names* correspond to features on', 'the base map and value *geojson-id* corresponds to features from a custom', 'GeoJSON linked to the `geojson` attribute.'].join(' ')\n  },\n  geojson: {\n    valType: 'any',\n    editType: 'calc',\n    description: ['Sets optional GeoJSON data associated with this trace.', 'If not given, the features on the base map are used when `locations` is set.', 'It can be set as a valid GeoJSON object or as a URL string.', 'Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature*', 'with geometries of type *Polygon* or *MultiPolygon*.' // TODO add topojson support with additional 'topojsonobject' attr?\n    // https://github.com/topojson/topojson-specification/blob/master/README.md\n    ].join(' ')\n  },\n  featureidkey: {\n    valType: 'string',\n    editType: 'calc',\n    dflt: 'id',\n    description: ['Sets the key in GeoJSON features which is used as id to match the items', 'included in the `locations` array.', 'Only has an effect when `geojson` is set.', 'Support nested property, for example *properties.name*.'].join(' ')\n  },\n  mode: extendFlat({}, scatterAttrs.mode, {\n    dflt: 'markers'\n  }),\n  text: extendFlat({}, scatterAttrs.text, {\n    description: ['Sets text elements associated with each (lon,lat) pair', 'or item in `locations`.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (lon,lat) or `locations` coordinates.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  }),\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: ['lat', 'lon', 'location', 'text']\n  }),\n  hovertext: extendFlat({}, scatterAttrs.hovertext, {\n    description: ['Sets hover text elements associated with each (lon,lat) pair', 'or item in `locations`.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (lon,lat) or `locations` coordinates.', 'To be seen, trace `hoverinfo` must contain a *text* flag.'].join(' ')\n  }),\n  textfont: scatterAttrs.textfont,\n  textposition: scatterAttrs.textposition,\n  line: {\n    color: scatterLineAttrs.color,\n    width: scatterLineAttrs.width,\n    dash: dash\n  },\n  connectgaps: scatterAttrs.connectgaps,\n  marker: extendFlat({\n    symbol: scatterMarkerAttrs.symbol,\n    opacity: scatterMarkerAttrs.opacity,\n    angle: scatterMarkerAttrs.angle,\n    angleref: extendFlat({}, scatterMarkerAttrs.angleref, {\n      values: ['previous', 'up', 'north'],\n      description: ['Sets the reference for marker angle.', 'With *previous*, angle 0 points along the line from the previous point to this one.', 'With *up*, angle 0 points toward the top of the screen.', 'With *north*, angle 0 points north based on the current map projection.'].join(' ')\n    }),\n    standoff: scatterMarkerAttrs.standoff,\n    size: scatterMarkerAttrs.size,\n    sizeref: scatterMarkerAttrs.sizeref,\n    sizemin: scatterMarkerAttrs.sizemin,\n    sizemode: scatterMarkerAttrs.sizemode,\n    colorbar: scatterMarkerAttrs.colorbar,\n    line: extendFlat({\n      width: scatterMarkerLineAttrs.width\n    }, colorAttributes('marker.line')),\n    gradient: scatterMarkerAttrs.gradient\n  }, colorAttributes('marker')),\n  fill: {\n    valType: 'enumerated',\n    values: ['none', 'toself'],\n    dflt: 'none',\n    description: ['Sets the area to fill with a solid color.', 'Use with `fillcolor` if not *none*.', '*toself* connects the endpoints of the trace (or each segment', 'of the trace if it has gaps) into a closed shape.'].join(' ')\n  },\n  fillcolor: scatterAttrs.fillcolor,\n  selected: scatterAttrs.selected,\n  unselected: scatterAttrs.unselected,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['lon', 'lat', 'location', 'text', 'name']\n  }),\n  hovertemplate: hovertemplateAttrs()\n}, 'calc', 'nested');","map":null,"metadata":{},"sourceType":"script"}