{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar tinycolor = require('tinycolor2');\n\nvar rgba = require('color-normalize');\n\nvar Colorscale = require('../components/colorscale');\n\nvar colorDflt = require('../components/color/attributes').defaultLine;\n\nvar isArrayOrTypedArray = require('./array').isArrayOrTypedArray;\n\nvar colorDfltRgba = rgba(colorDflt);\nvar opacityDflt = 1;\n\nfunction calculateColor(colorIn, opacityIn) {\n  var colorOut = colorIn;\n  colorOut[3] *= opacityIn;\n  return colorOut;\n}\n\nfunction validateColor(colorIn) {\n  if (isNumeric(colorIn)) return colorDfltRgba;\n  var colorOut = rgba(colorIn);\n  return colorOut.length ? colorOut : colorDfltRgba;\n}\n\nfunction validateOpacity(opacityIn) {\n  return isNumeric(opacityIn) ? opacityIn : opacityDflt;\n}\n\nfunction formatColor(containerIn, opacityIn, len) {\n  var colorIn = containerIn.color;\n  var isArrayColorIn = isArrayOrTypedArray(colorIn);\n  var isArrayOpacityIn = isArrayOrTypedArray(opacityIn);\n  var cOpts = Colorscale.extractOpts(containerIn);\n  var colorOut = [];\n  var sclFunc, getColor, getOpacity, colori, opacityi;\n\n  if (cOpts.colorscale !== undefined) {\n    sclFunc = Colorscale.makeColorScaleFuncFromTrace(containerIn);\n  } else {\n    sclFunc = validateColor;\n  }\n\n  if (isArrayColorIn) {\n    getColor = function getColor(c, i) {\n      // FIXME: there is double work, considering that sclFunc does the opposite\n      return c[i] === undefined ? colorDfltRgba : rgba(sclFunc(c[i]));\n    };\n  } else getColor = validateColor;\n\n  if (isArrayOpacityIn) {\n    getOpacity = function getOpacity(o, i) {\n      return o[i] === undefined ? opacityDflt : validateOpacity(o[i]);\n    };\n  } else getOpacity = validateOpacity;\n\n  if (isArrayColorIn || isArrayOpacityIn) {\n    for (var i = 0; i < len; i++) {\n      colori = getColor(colorIn, i);\n      opacityi = getOpacity(opacityIn, i);\n      colorOut[i] = calculateColor(colori, opacityi);\n    }\n  } else colorOut = calculateColor(rgba(colorIn), opacityIn);\n\n  return colorOut;\n}\n\nfunction parseColorScale(cont) {\n  var cOpts = Colorscale.extractOpts(cont);\n  var colorscale = cOpts.colorscale;\n  if (cOpts.reversescale) colorscale = Colorscale.flipScale(cOpts.colorscale);\n  return colorscale.map(function (elem) {\n    var index = elem[0];\n    var color = tinycolor(elem[1]);\n    var rgb = color.toRgb();\n    return {\n      index: index,\n      rgb: [rgb.r, rgb.g, rgb.b, rgb.a]\n    };\n  });\n}\n\nmodule.exports = {\n  formatColor: formatColor,\n  parseColorScale: parseColorScale\n};","map":null,"metadata":{},"sourceType":"script"}