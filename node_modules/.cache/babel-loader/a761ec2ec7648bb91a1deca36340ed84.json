{"ast":null,"code":"'use strict';\n\nvar calcColorscale = require('../scatter/colorscale_calc');\n\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nvar convert = require('../scattergl/convert');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\n\nmodule.exports = function calc(gd, trace) {\n  var fullLayout = gd._fullLayout;\n  var subplotId = trace.subplot;\n  var radialAxis = fullLayout[subplotId].radialaxis;\n  var angularAxis = fullLayout[subplotId].angularaxis;\n  var rArray = trace._r = radialAxis.makeCalcdata(trace, 'r');\n  var thetaArray = trace._theta = angularAxis.makeCalcdata(trace, 'theta');\n  var len = trace._length;\n  var stash = {};\n  if (len < rArray.length) rArray = rArray.slice(0, len);\n  if (len < thetaArray.length) thetaArray = thetaArray.slice(0, len);\n  stash.r = rArray;\n  stash.theta = thetaArray;\n  calcColorscale(gd, trace); // only compute 'style' options in calc, as position options\n  // depend on the radial range and must be set in plot\n\n  var opts = stash.opts = convert.style(gd, trace); // For graphs with very large number of points and array marker.size,\n  // use average marker size instead to speed things up.\n\n  var ppad;\n\n  if (len < TOO_MANY_POINTS) {\n    ppad = calcMarkerSize(trace, len);\n  } else if (opts.marker) {\n    ppad = 2 * (opts.marker.sizeAvg || Math.max(opts.marker.size, 3));\n  }\n\n  trace._extremes.x = Axes.findExtremes(radialAxis, rArray, {\n    ppad: ppad\n  });\n  return [{\n    x: false,\n    y: false,\n    t: stash,\n    trace: trace\n  }];\n};","map":null,"metadata":{},"sourceType":"script"}