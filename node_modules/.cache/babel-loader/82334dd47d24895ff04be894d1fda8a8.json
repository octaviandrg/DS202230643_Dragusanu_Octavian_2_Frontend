{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Drawing = require('../../components/drawing');\n\nvar map1dArray = require('./map_1d_array');\n\nvar makepath = require('./makepath');\n\nvar orientText = require('./orient_text');\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar Lib = require('../../lib');\n\nvar strRotate = Lib.strRotate;\nvar strTranslate = Lib.strTranslate;\n\nvar alignmentConstants = require('../../constants/alignment');\n\nmodule.exports = function plot(gd, plotinfo, cdcarpet, carpetLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  var fullLayout = gd._fullLayout;\n  var clipLayer = fullLayout._clips;\n  Lib.makeTraceGroups(carpetLayer, cdcarpet, 'trace').each(function (cd) {\n    var axisLayer = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var aax = trace.aaxis;\n    var bax = trace.baxis;\n    var minorLayer = Lib.ensureSingle(axisLayer, 'g', 'minorlayer');\n    var majorLayer = Lib.ensureSingle(axisLayer, 'g', 'majorlayer');\n    var boundaryLayer = Lib.ensureSingle(axisLayer, 'g', 'boundarylayer');\n    var labelLayer = Lib.ensureSingle(axisLayer, 'g', 'labellayer');\n    axisLayer.style('opacity', trace.opacity);\n    drawGridLines(xa, ya, majorLayer, aax, 'a', aax._gridlines, true);\n    drawGridLines(xa, ya, majorLayer, bax, 'b', bax._gridlines, true);\n    drawGridLines(xa, ya, minorLayer, aax, 'a', aax._minorgridlines, true);\n    drawGridLines(xa, ya, minorLayer, bax, 'b', bax._minorgridlines, true); // NB: These are not omitted if the lines are not active. The joins must be executed\n    // in order for them to get cleaned up without a full redraw\n\n    drawGridLines(xa, ya, boundaryLayer, aax, 'a-boundary', aax._boundarylines);\n    drawGridLines(xa, ya, boundaryLayer, bax, 'b-boundary', bax._boundarylines);\n    var labelOrientationA = drawAxisLabels(gd, xa, ya, trace, cd0, labelLayer, aax._labels, 'a-label');\n    var labelOrientationB = drawAxisLabels(gd, xa, ya, trace, cd0, labelLayer, bax._labels, 'b-label');\n    drawAxisTitles(gd, labelLayer, trace, cd0, xa, ya, labelOrientationA, labelOrientationB);\n    drawClipPath(trace, cd0, clipLayer, xa, ya);\n  });\n};\n\nfunction drawClipPath(trace, t, layer, xaxis, yaxis) {\n  var seg, xp, yp, i;\n  var clip = layer.select('#' + trace._clipPathId);\n\n  if (!clip.size()) {\n    clip = layer.append('clipPath').classed('carpetclip', true);\n  }\n\n  var path = Lib.ensureSingle(clip, 'path', 'carpetboundary');\n  var segments = t.clipsegments;\n  var segs = [];\n\n  for (i = 0; i < segments.length; i++) {\n    seg = segments[i];\n    xp = map1dArray([], seg.x, xaxis.c2p);\n    yp = map1dArray([], seg.y, yaxis.c2p);\n    segs.push(makepath(xp, yp, seg.bicubic));\n  } // This could be optimized ever so slightly to avoid no-op L segments\n  // at the corners, but it's so negligible that I don't think it's worth\n  // the extra complexity\n\n\n  var clipPathData = 'M' + segs.join('L') + 'Z';\n  clip.attr('id', trace._clipPathId);\n  path.attr('d', clipPathData);\n}\n\nfunction drawGridLines(xaxis, yaxis, layer, axis, axisLetter, gridlines) {\n  var lineClass = 'const-' + axisLetter + '-lines';\n  var gridJoin = layer.selectAll('.' + lineClass).data(gridlines);\n  gridJoin.enter().append('path').classed(lineClass, true).style('vector-effect', 'non-scaling-stroke');\n  gridJoin.each(function (d) {\n    var gridline = d;\n    var x = gridline.x;\n    var y = gridline.y;\n    var xp = map1dArray([], x, xaxis.c2p);\n    var yp = map1dArray([], y, yaxis.c2p);\n    var path = 'M' + makepath(xp, yp, gridline.smoothing);\n    var el = d3.select(this);\n    el.attr('d', path).style('stroke-width', gridline.width).style('stroke', gridline.color).style('stroke-dasharray', Drawing.dashStyle(gridline.dash, gridline.width)).style('fill', 'none');\n  });\n  gridJoin.exit().remove();\n}\n\nfunction drawAxisLabels(gd, xaxis, yaxis, trace, t, layer, labels, labelClass) {\n  var labelJoin = layer.selectAll('text.' + labelClass).data(labels);\n  labelJoin.enter().append('text').classed(labelClass, true);\n  var maxExtent = 0;\n  var labelOrientation = {};\n  labelJoin.each(function (label, i) {\n    // Most of the positioning is done in calc_labels. Only the parts that depend upon\n    // the screen space representation of the x and y axes are here:\n    var orientation;\n\n    if (label.axis.tickangle === 'auto') {\n      orientation = orientText(trace, xaxis, yaxis, label.xy, label.dxy);\n    } else {\n      var angle = (label.axis.tickangle + 180.0) * Math.PI / 180.0;\n      orientation = orientText(trace, xaxis, yaxis, label.xy, [Math.cos(angle), Math.sin(angle)]);\n    }\n\n    if (!i) {\n      // TODO: offsetMultiplier? Not currently used anywhere...\n      labelOrientation = {\n        angle: orientation.angle,\n        flip: orientation.flip\n      };\n    }\n\n    var direction = (label.endAnchor ? -1 : 1) * orientation.flip;\n    var labelEl = d3.select(this).attr({\n      'text-anchor': direction > 0 ? 'start' : 'end',\n      'data-notex': 1\n    }).call(Drawing.font, label.font).text(label.text).call(svgTextUtils.convertToTspans, gd);\n    var bbox = Drawing.bBox(this);\n    labelEl.attr('transform', // Translate to the correct point:\n    strTranslate(orientation.p[0], orientation.p[1]) + // Rotate to line up with grid line tangent:\n    strRotate(orientation.angle) + // Adjust the baseline and indentation:\n    strTranslate(label.axis.labelpadding * direction, bbox.height * 0.3));\n    maxExtent = Math.max(maxExtent, bbox.width + label.axis.labelpadding);\n  });\n  labelJoin.exit().remove();\n  labelOrientation.maxExtent = maxExtent;\n  return labelOrientation;\n}\n\nfunction drawAxisTitles(gd, layer, trace, t, xa, ya, labelOrientationA, labelOrientationB) {\n  var a, b, xy, dxy;\n  var aMin = Lib.aggNums(Math.min, null, trace.a);\n  var aMax = Lib.aggNums(Math.max, null, trace.a);\n  var bMin = Lib.aggNums(Math.min, null, trace.b);\n  var bMax = Lib.aggNums(Math.max, null, trace.b);\n  a = 0.5 * (aMin + aMax);\n  b = bMin;\n  xy = trace.ab2xy(a, b, true);\n  dxy = trace.dxyda_rough(a, b);\n\n  if (labelOrientationA.angle === undefined) {\n    Lib.extendFlat(labelOrientationA, orientText(trace, xa, ya, xy, trace.dxydb_rough(a, b)));\n  }\n\n  drawAxisTitle(gd, layer, trace, t, xy, dxy, trace.aaxis, xa, ya, labelOrientationA, 'a-title');\n  a = aMin;\n  b = 0.5 * (bMin + bMax);\n  xy = trace.ab2xy(a, b, true);\n  dxy = trace.dxydb_rough(a, b);\n\n  if (labelOrientationB.angle === undefined) {\n    Lib.extendFlat(labelOrientationB, orientText(trace, xa, ya, xy, trace.dxyda_rough(a, b)));\n  }\n\n  drawAxisTitle(gd, layer, trace, t, xy, dxy, trace.baxis, xa, ya, labelOrientationB, 'b-title');\n}\n\nvar lineSpacing = alignmentConstants.LINE_SPACING;\nvar midShift = (1 - alignmentConstants.MID_SHIFT) / lineSpacing + 1;\n\nfunction drawAxisTitle(gd, layer, trace, t, xy, dxy, axis, xa, ya, labelOrientation, labelClass) {\n  var data = [];\n  if (axis.title.text) data.push(axis.title.text);\n  var titleJoin = layer.selectAll('text.' + labelClass).data(data);\n  var offset = labelOrientation.maxExtent;\n  titleJoin.enter().append('text').classed(labelClass, true); // There's only one, but we'll do it as a join so it's updated nicely:\n\n  titleJoin.each(function () {\n    var orientation = orientText(trace, xa, ya, xy, dxy);\n\n    if (['start', 'both'].indexOf(axis.showticklabels) === -1) {\n      offset = 0;\n    } // In addition to the size of the labels, add on some extra padding:\n\n\n    var titleSize = axis.title.font.size;\n    offset += titleSize + axis.title.offset;\n    var labelNorm = labelOrientation.angle + (labelOrientation.flip < 0 ? 180 : 0);\n    var angleDiff = (labelNorm - orientation.angle + 450) % 360;\n    var reverseTitle = angleDiff > 90 && angleDiff < 270;\n    var el = d3.select(this);\n    el.text(axis.title.text).call(svgTextUtils.convertToTspans, gd);\n\n    if (reverseTitle) {\n      offset = (-svgTextUtils.lineCount(el) + midShift) * lineSpacing * titleSize - offset;\n    }\n\n    el.attr('transform', strTranslate(orientation.p[0], orientation.p[1]) + strRotate(orientation.angle) + strTranslate(0, offset)).attr('text-anchor', 'middle').call(Drawing.font, axis.title.font);\n  });\n  titleJoin.exit().remove();\n}","map":null,"metadata":{},"sourceType":"script"}