{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar constants = require('./constants');\n\nmodule.exports = function findAllPaths(pathinfo, xtol, ytol) {\n  var cnt, startLoc, i, pi, j; // Default just passes these values through as they were before:\n\n  xtol = xtol || 0.01;\n  ytol = ytol || 0.01;\n\n  for (i = 0; i < pathinfo.length; i++) {\n    pi = pathinfo[i];\n\n    for (j = 0; j < pi.starts.length; j++) {\n      startLoc = pi.starts[j];\n      makePath(pi, startLoc, 'edge', xtol, ytol);\n    }\n\n    cnt = 0;\n\n    while (Object.keys(pi.crossings).length && cnt < 10000) {\n      cnt++;\n      startLoc = Object.keys(pi.crossings)[0].split(',').map(Number);\n      makePath(pi, startLoc, undefined, xtol, ytol);\n    }\n\n    if (cnt === 10000) Lib.log('Infinite loop in contour?');\n  }\n};\n\nfunction equalPts(pt1, pt2, xtol, ytol) {\n  return Math.abs(pt1[0] - pt2[0]) < xtol && Math.abs(pt1[1] - pt2[1]) < ytol;\n} // distance in index units - uses the 3rd and 4th items in points\n\n\nfunction ptDist(pt1, pt2) {\n  var dx = pt1[2] - pt2[2];\n  var dy = pt1[3] - pt2[3];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction makePath(pi, loc, edgeflag, xtol, ytol) {\n  var locStr = loc.join(',');\n  var mi = pi.crossings[locStr];\n  var marchStep = getStartStep(mi, edgeflag, loc); // start by going backward a half step and finding the crossing point\n\n  var pts = [getInterpPx(pi, loc, [-marchStep[0], -marchStep[1]])];\n  var m = pi.z.length;\n  var n = pi.z[0].length;\n  var startLoc = loc.slice();\n  var startStep = marchStep.slice();\n  var cnt; // now follow the path\n\n  for (cnt = 0; cnt < 10000; cnt++) {\n    // just to avoid infinite loops\n    if (mi > 20) {\n      mi = constants.CHOOSESADDLE[mi][(marchStep[0] || marchStep[1]) < 0 ? 0 : 1];\n      pi.crossings[locStr] = constants.SADDLEREMAINDER[mi];\n    } else {\n      delete pi.crossings[locStr];\n    }\n\n    marchStep = constants.NEWDELTA[mi];\n\n    if (!marchStep) {\n      Lib.log('Found bad marching index:', mi, loc, pi.level);\n      break;\n    } // find the crossing a half step forward, and then take the full step\n\n\n    pts.push(getInterpPx(pi, loc, marchStep));\n    loc[0] += marchStep[0];\n    loc[1] += marchStep[1];\n    locStr = loc.join(','); // don't include the same point multiple times\n\n    if (equalPts(pts[pts.length - 1], pts[pts.length - 2], xtol, ytol)) pts.pop();\n    var atEdge = marchStep[0] && (loc[0] < 0 || loc[0] > n - 2) || marchStep[1] && (loc[1] < 0 || loc[1] > m - 2);\n    var closedLoop = loc[0] === startLoc[0] && loc[1] === startLoc[1] && marchStep[0] === startStep[0] && marchStep[1] === startStep[1]; // have we completed a loop, or reached an edge?\n\n    if (closedLoop || edgeflag && atEdge) break;\n    mi = pi.crossings[locStr];\n  }\n\n  if (cnt === 10000) {\n    Lib.log('Infinite loop in contour?');\n  }\n\n  var closedpath = equalPts(pts[0], pts[pts.length - 1], xtol, ytol);\n  var totaldist = 0;\n  var distThresholdFactor = 0.2 * pi.smoothing;\n  var alldists = [];\n  var cropstart = 0;\n  var distgroup, cnt2, cnt3, newpt, ptcnt, ptavg, thisdist, i, j, edgepathi, edgepathj;\n  /*\n   * Check for points that are too close together (<1/5 the average dist\n   * *in grid index units* (important for log axes and nonuniform grids),\n   * less if less smoothed) and just take the center (or avg of center 2).\n   * This cuts down on funny behavior when a point is very close to a\n   * contour level.\n   */\n\n  for (cnt = 1; cnt < pts.length; cnt++) {\n    thisdist = ptDist(pts[cnt], pts[cnt - 1]);\n    totaldist += thisdist;\n    alldists.push(thisdist);\n  }\n\n  var distThreshold = totaldist / alldists.length * distThresholdFactor;\n\n  function getpt(i) {\n    return pts[i % pts.length];\n  }\n\n  for (cnt = pts.length - 2; cnt >= cropstart; cnt--) {\n    distgroup = alldists[cnt];\n\n    if (distgroup < distThreshold) {\n      cnt3 = 0;\n\n      for (cnt2 = cnt - 1; cnt2 >= cropstart; cnt2--) {\n        if (distgroup + alldists[cnt2] < distThreshold) {\n          distgroup += alldists[cnt2];\n        } else break;\n      } // closed path with close points wrapping around the boundary?\n\n\n      if (closedpath && cnt === pts.length - 2) {\n        for (cnt3 = 0; cnt3 < cnt2; cnt3++) {\n          if (distgroup + alldists[cnt3] < distThreshold) {\n            distgroup += alldists[cnt3];\n          } else break;\n        }\n      }\n\n      ptcnt = cnt - cnt2 + cnt3 + 1;\n      ptavg = Math.floor((cnt + cnt2 + cnt3 + 2) / 2); // either endpoint included: keep the endpoint\n\n      if (!closedpath && cnt === pts.length - 2) newpt = pts[pts.length - 1];else if (!closedpath && cnt2 === -1) newpt = pts[0]; // odd # of points - just take the central one\n      else if (ptcnt % 2) newpt = getpt(ptavg); // even # of pts - average central two\n        else {\n            newpt = [(getpt(ptavg)[0] + getpt(ptavg + 1)[0]) / 2, (getpt(ptavg)[1] + getpt(ptavg + 1)[1]) / 2];\n          }\n      pts.splice(cnt2 + 1, cnt - cnt2 + 1, newpt);\n      cnt = cnt2 + 1;\n      if (cnt3) cropstart = cnt3;\n\n      if (closedpath) {\n        if (cnt === pts.length - 2) pts[cnt3] = pts[pts.length - 1];else if (cnt === 0) pts[pts.length - 1] = pts[0];\n      }\n    }\n  }\n\n  pts.splice(0, cropstart); // done with the index parts - remove them so path generation works right\n  // because it depends on only having [xpx, ypx]\n\n  for (cnt = 0; cnt < pts.length; cnt++) {\n    pts[cnt].length = 2;\n  } // don't return single-point paths (ie all points were the same\n  // so they got deleted?)\n\n\n  if (pts.length < 2) return;else if (closedpath) {\n    pts.pop();\n    pi.paths.push(pts);\n  } else {\n    if (!edgeflag) {\n      Lib.log('Unclosed interior contour?', pi.level, startLoc.join(','), pts.join('L'));\n    } // edge path - does it start where an existing edge path ends, or vice versa?\n\n\n    var merged = false;\n\n    for (i = 0; i < pi.edgepaths.length; i++) {\n      edgepathi = pi.edgepaths[i];\n\n      if (!merged && equalPts(edgepathi[0], pts[pts.length - 1], xtol, ytol)) {\n        pts.pop();\n        merged = true; // now does it ALSO meet the end of another (or the same) path?\n\n        var doublemerged = false;\n\n        for (j = 0; j < pi.edgepaths.length; j++) {\n          edgepathj = pi.edgepaths[j];\n\n          if (equalPts(edgepathj[edgepathj.length - 1], pts[0], xtol, ytol)) {\n            doublemerged = true;\n            pts.shift();\n            pi.edgepaths.splice(i, 1);\n\n            if (j === i) {\n              // the path is now closed\n              pi.paths.push(pts.concat(edgepathj));\n            } else {\n              if (j > i) j--;\n              pi.edgepaths[j] = edgepathj.concat(pts, edgepathi);\n            }\n\n            break;\n          }\n        }\n\n        if (!doublemerged) {\n          pi.edgepaths[i] = pts.concat(edgepathi);\n        }\n      }\n    }\n\n    for (i = 0; i < pi.edgepaths.length; i++) {\n      if (merged) break;\n      edgepathi = pi.edgepaths[i];\n\n      if (equalPts(edgepathi[edgepathi.length - 1], pts[0], xtol, ytol)) {\n        pts.shift();\n        pi.edgepaths[i] = edgepathi.concat(pts);\n        merged = true;\n      }\n    }\n\n    if (!merged) pi.edgepaths.push(pts);\n  }\n} // special function to get the marching step of the\n// first point in the path (leading to loc)\n\n\nfunction getStartStep(mi, edgeflag, loc) {\n  var dx = 0;\n  var dy = 0;\n\n  if (mi > 20 && edgeflag) {\n    // these saddles start at +/- x\n    if (mi === 208 || mi === 1114) {\n      // if we're starting at the left side, we must be going right\n      dx = loc[0] === 0 ? 1 : -1;\n    } else {\n      // if we're starting at the bottom, we must be going up\n      dy = loc[1] === 0 ? 1 : -1;\n    }\n  } else if (constants.BOTTOMSTART.indexOf(mi) !== -1) dy = 1;else if (constants.LEFTSTART.indexOf(mi) !== -1) dx = 1;else if (constants.TOPSTART.indexOf(mi) !== -1) dy = -1;else dx = -1;\n\n  return [dx, dy];\n}\n/*\n * Find the pixel coordinates of a particular crossing\n *\n * @param {object} pi: the pathinfo object at this level\n * @param {array} loc: the grid index [x, y] of the crossing\n * @param {array} step: the direction [dx, dy] we're moving on the grid\n *\n * @return {array} [xpx, ypx, xi, yi]: the first two are the pixel location,\n *   the next two are the interpolated grid indices, which we use for\n *   distance calculations to delete points that are too close together.\n *   This is important when the grid is nonuniform (and most dramatically when\n *   we're on log axes and include invalid (0 or negative) values.\n *   It's crucial to delete these extra two before turning an array of these\n *   points into a path, because those routines require length-2 points.\n */\n\n\nfunction getInterpPx(pi, loc, step) {\n  var locx = loc[0] + Math.max(step[0], 0);\n  var locy = loc[1] + Math.max(step[1], 0);\n  var zxy = pi.z[locy][locx];\n  var xa = pi.xaxis;\n  var ya = pi.yaxis; // Interpolate in linear space, then convert to pixel\n\n  if (step[1]) {\n    var dx = (pi.level - zxy) / (pi.z[locy][locx + 1] - zxy); // Interpolate, but protect against NaN linear values for log axis (dx will equal 1 or 0)\n\n    var dxl = (dx !== 1 ? (1 - dx) * xa.c2l(pi.x[locx]) : 0) + (dx !== 0 ? dx * xa.c2l(pi.x[locx + 1]) : 0);\n    return [xa.c2p(xa.l2c(dxl), true), ya.c2p(pi.y[locy], true), locx + dx, locy];\n  } else {\n    var dy = (pi.level - zxy) / (pi.z[locy + 1][locx] - zxy);\n    var dyl = (dy !== 1 ? (1 - dy) * ya.c2l(pi.y[locy]) : 0) + (dy !== 0 ? dy * ya.c2l(pi.y[locy + 1]) : 0);\n    return [xa.c2p(pi.x[locx], true), ya.c2p(ya.l2c(dyl), true), locx, locy + dy];\n  }\n}","map":null,"metadata":{},"sourceType":"script"}