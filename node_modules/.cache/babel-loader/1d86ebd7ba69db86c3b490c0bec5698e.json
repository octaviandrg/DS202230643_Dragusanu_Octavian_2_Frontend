{"ast":null,"code":"'use strict';\n\nvar mapboxgl = require('mapbox-gl/dist/mapbox-gl-unminified');\n\nvar Lib = require('../../lib');\n\nvar strTranslate = Lib.strTranslate;\nvar strScale = Lib.strScale;\n\nvar getSubplotCalcData = require('../../plots/get_data').getSubplotCalcData;\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar d3 = require('@plotly/d3');\n\nvar Drawing = require('../../components/drawing');\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar Mapbox = require('./mapbox');\n\nvar MAPBOX = 'mapbox';\n\nvar constants = exports.constants = require('./constants');\n\nexports.name = MAPBOX;\nexports.attr = 'subplot';\nexports.idRoot = MAPBOX;\nexports.idRegex = exports.attrRegex = Lib.counterRegex(MAPBOX);\nexports.attributes = {\n  subplot: {\n    valType: 'subplotid',\n    dflt: 'mapbox',\n    editType: 'calc',\n    description: ['Sets a reference between this trace\\'s data coordinates and', 'a mapbox subplot.', 'If *mapbox* (the default value), the data refer to `layout.mapbox`.', 'If *mapbox2*, the data refer to `layout.mapbox2`, and so on.'].join(' ')\n  }\n};\nexports.layoutAttributes = require('./layout_attributes');\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var calcData = gd.calcdata;\n  var mapboxIds = fullLayout._subplots[MAPBOX];\n\n  if (mapboxgl.version !== constants.requiredVersion) {\n    throw new Error(constants.wrongVersionErrorMsg);\n  }\n\n  var accessToken = findAccessToken(gd, mapboxIds);\n  mapboxgl.accessToken = accessToken;\n\n  for (var i = 0; i < mapboxIds.length; i++) {\n    var id = mapboxIds[i];\n    var subplotCalcData = getSubplotCalcData(calcData, MAPBOX, id);\n    var opts = fullLayout[id];\n    var mapbox = opts._subplot;\n\n    if (!mapbox) {\n      mapbox = new Mapbox(gd, id);\n      fullLayout[id]._subplot = mapbox;\n    }\n\n    if (!mapbox.viewInitial) {\n      mapbox.viewInitial = {\n        center: Lib.extendFlat({}, opts.center),\n        zoom: opts.zoom,\n        bearing: opts.bearing,\n        pitch: opts.pitch\n      };\n    }\n\n    mapbox.plot(subplotCalcData, fullLayout, gd._promises);\n  }\n};\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldMapboxKeys = oldFullLayout._subplots[MAPBOX] || [];\n\n  for (var i = 0; i < oldMapboxKeys.length; i++) {\n    var oldMapboxKey = oldMapboxKeys[i];\n\n    if (!newFullLayout[oldMapboxKey] && !!oldFullLayout[oldMapboxKey]._subplot) {\n      oldFullLayout[oldMapboxKey]._subplot.destroy();\n    }\n  }\n};\n\nexports.toSVG = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[MAPBOX];\n  var size = fullLayout._size;\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var opts = fullLayout[subplotIds[i]];\n    var domain = opts.domain;\n    var mapbox = opts._subplot;\n    var imageData = mapbox.toImage('png');\n\n    var image = fullLayout._glimages.append('svg:image');\n\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      x: size.l + size.w * domain.x[0],\n      y: size.t + size.h * (1 - domain.y[1]),\n      width: size.w * (domain.x[1] - domain.x[0]),\n      height: size.h * (domain.y[1] - domain.y[0]),\n      preserveAspectRatio: 'none'\n    });\n    var subplotDiv = d3.select(opts._subplot.div); // Append logo if visible\n\n    var hidden = subplotDiv.select('.mapboxgl-ctrl-logo').node().offsetParent === null;\n\n    if (!hidden) {\n      var logo = fullLayout._glimages.append('g');\n\n      logo.attr('transform', strTranslate(size.l + size.w * domain.x[0] + 10, size.t + size.h * (1 - domain.y[0]) - 31));\n      logo.append('path').attr('d', constants.mapboxLogo.path0).style({\n        opacity: 0.9,\n        fill: '#ffffff',\n        'enable-background': 'new'\n      });\n      logo.append('path').attr('d', constants.mapboxLogo.path1).style('opacity', 0.35).style('enable-background', 'new');\n      logo.append('path').attr('d', constants.mapboxLogo.path2).style('opacity', 0.35).style('enable-background', 'new');\n      logo.append('polygon').attr('points', constants.mapboxLogo.polygon).style({\n        opacity: 0.9,\n        fill: '#ffffff',\n        'enable-background': 'new'\n      });\n    } // Add attributions\n\n\n    var attributions = subplotDiv.select('.mapboxgl-ctrl-attrib').text().replace('Improve this map', '');\n\n    var attributionGroup = fullLayout._glimages.append('g');\n\n    var attributionText = attributionGroup.append('text');\n    attributionText.text(attributions).classed('static-attribution', true).attr({\n      'font-size': 12,\n      'font-family': 'Arial',\n      'color': 'rgba(0, 0, 0, 0.75)',\n      'text-anchor': 'end',\n      'data-unformatted': attributions\n    });\n    var bBox = Drawing.bBox(attributionText.node()); // Break into multiple lines twice larger than domain\n\n    var maxWidth = size.w * (domain.x[1] - domain.x[0]);\n\n    if (bBox.width > maxWidth / 2) {\n      var multilineAttributions = attributions.split('|').join('<br>');\n      attributionText.text(multilineAttributions).attr('data-unformatted', multilineAttributions).call(svgTextUtils.convertToTspans, gd);\n      bBox = Drawing.bBox(attributionText.node());\n    }\n\n    attributionText.attr('transform', strTranslate(-3, -bBox.height + 8)); // Draw white rectangle behind text\n\n    attributionGroup.insert('rect', '.static-attribution').attr({\n      x: -bBox.width - 6,\n      y: -bBox.height - 3,\n      width: bBox.width + 6,\n      height: bBox.height + 3,\n      fill: 'rgba(255, 255, 255, 0.75)'\n    }); // Scale down if larger than domain\n\n    var scaleRatio = 1;\n    if (bBox.width + 6 > maxWidth) scaleRatio = maxWidth / (bBox.width + 6);\n    var offset = [size.l + size.w * domain.x[1], size.t + size.h * (1 - domain.y[0])];\n    attributionGroup.attr('transform', strTranslate(offset[0], offset[1]) + strScale(scaleRatio));\n  }\n}; // N.B. mapbox-gl only allows one accessToken to be set per page:\n// https://github.com/mapbox/mapbox-gl-js/issues/6331\n\n\nfunction findAccessToken(gd, mapboxIds) {\n  var fullLayout = gd._fullLayout;\n  var context = gd._context; // special case for Mapbox Atlas users\n\n  if (context.mapboxAccessToken === '') return '';\n  var tokensUseful = [];\n  var tokensListed = [];\n  var hasOneSetMapboxStyle = false;\n  var wontWork = false; // Take the first token we find in a mapbox subplot.\n  // These default to the context value but may be overridden.\n\n  for (var i = 0; i < mapboxIds.length; i++) {\n    var opts = fullLayout[mapboxIds[i]];\n    var token = opts.accesstoken;\n\n    if (isMapboxStyle(opts.style)) {\n      if (token) {\n        Lib.pushUnique(tokensUseful, token);\n      } else {\n        if (isMapboxStyle(opts._input.style)) {\n          Lib.error('Uses Mapbox map style, but did not set an access token.');\n          hasOneSetMapboxStyle = true;\n        }\n\n        wontWork = true;\n      }\n    }\n\n    if (token) {\n      Lib.pushUnique(tokensListed, token);\n    }\n  }\n\n  if (wontWork) {\n    var msg = hasOneSetMapboxStyle ? constants.noAccessTokenErrorMsg : constants.missingStyleErrorMsg;\n    Lib.error(msg);\n    throw new Error(msg);\n  }\n\n  if (tokensUseful.length) {\n    if (tokensUseful.length > 1) {\n      Lib.warn(constants.multipleTokensErrorMsg);\n    }\n\n    return tokensUseful[0];\n  } else {\n    if (tokensListed.length) {\n      Lib.log(['Listed mapbox access token(s)', tokensListed.join(','), 'but did not use a Mapbox map style, ignoring token(s).'].join(' '));\n    }\n\n    return '';\n  }\n}\n\nfunction isMapboxStyle(s) {\n  return typeof s === 'string' && (constants.styleValuesMapbox.indexOf(s) !== -1 || s.indexOf('mapbox://') === 0);\n}\n\nexports.updateFx = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[MAPBOX];\n\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotObj = fullLayout[subplotIds[i]]._subplot;\n    subplotObj.updateFx(fullLayout);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}