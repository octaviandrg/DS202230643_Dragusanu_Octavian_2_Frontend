{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar handleSubplotDefaults = require('../subplot_defaults');\n\nvar handleArrayContainerDefaults = require('../array_container_defaults');\n\nvar layoutAttributes = require('./layout_attributes');\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    type: 'mapbox',\n    attributes: layoutAttributes,\n    handleDefaults: handleDefaults,\n    partition: 'y',\n    accessToken: layoutOut._mapboxAccessToken\n  });\n};\n\nfunction handleDefaults(containerIn, containerOut, coerce, opts) {\n  coerce('accesstoken', opts.accessToken);\n  coerce('style');\n  coerce('center.lon');\n  coerce('center.lat');\n  coerce('zoom');\n  coerce('bearing');\n  coerce('pitch');\n  var west = coerce('bounds.west');\n  var east = coerce('bounds.east');\n  var south = coerce('bounds.south');\n  var north = coerce('bounds.north');\n\n  if (west === undefined || east === undefined || south === undefined || north === undefined) {\n    delete containerOut.bounds;\n  }\n\n  handleArrayContainerDefaults(containerIn, containerOut, {\n    name: 'layers',\n    handleItemDefaults: handleLayerDefaults\n  }); // copy ref to input container to update 'center' and 'zoom' on map move\n\n  containerOut._input = containerIn;\n}\n\nfunction handleLayerDefaults(layerIn, layerOut) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(layerIn, layerOut, layoutAttributes.layers, attr, dflt);\n  }\n\n  var visible = coerce('visible');\n\n  if (visible) {\n    var sourceType = coerce('sourcetype');\n    var mustBeRasterLayer = sourceType === 'raster' || sourceType === 'image';\n    coerce('source');\n    coerce('sourceattribution');\n\n    if (sourceType === 'vector') {\n      coerce('sourcelayer');\n    }\n\n    if (sourceType === 'image') {\n      coerce('coordinates');\n    }\n\n    var typeDflt;\n    if (mustBeRasterLayer) typeDflt = 'raster';\n    var type = coerce('type', typeDflt);\n\n    if (mustBeRasterLayer && type !== 'raster') {\n      type = layerOut.type = 'raster';\n      Lib.log('Source types *raster* and *image* must drawn *raster* layer type.');\n    }\n\n    coerce('below');\n    coerce('color');\n    coerce('opacity');\n    coerce('minzoom');\n    coerce('maxzoom');\n\n    if (type === 'circle') {\n      coerce('circle.radius');\n    }\n\n    if (type === 'line') {\n      coerce('line.width');\n      coerce('line.dash');\n    }\n\n    if (type === 'fill') {\n      coerce('fill.outlinecolor');\n    }\n\n    if (type === 'symbol') {\n      coerce('symbol.icon');\n      coerce('symbol.iconsize');\n      coerce('symbol.text');\n      Lib.coerceFont(coerce, 'symbol.textfont');\n      coerce('symbol.textposition');\n      coerce('symbol.placement');\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}