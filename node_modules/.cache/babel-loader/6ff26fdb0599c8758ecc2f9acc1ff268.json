{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar meshAttrs = require('../mesh3d/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nfunction makeSliceAttr(axLetter) {\n  return {\n    show: {\n      valType: 'boolean',\n      dflt: false,\n      description: ['Determines whether or not slice planes about the', axLetter, 'dimension are drawn.'].join(' ')\n    },\n    locations: {\n      valType: 'data_array',\n      dflt: [],\n      description: ['Specifies the location(s) of slices on the axis.', 'When not specified slices would be created for', 'all points of the axis', axLetter, 'except start and end.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the `slices`. The default fill value of the', '`slices` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    }\n  };\n}\n\nfunction makeCapAttr(axLetter) {\n  return {\n    show: {\n      valType: 'boolean',\n      dflt: true,\n      description: ['Sets the fill ratio of the `slices`. The default fill value of the', axLetter, '`slices` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the `caps`. The default fill value of the', '`caps` is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    }\n  };\n}\n\nvar attrs = module.exports = overrideAll(extendFlat({\n  x: {\n    valType: 'data_array',\n    description: ['Sets the X coordinates of the vertices on X axis.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    description: ['Sets the Y coordinates of the vertices on Y axis.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    description: ['Sets the Z coordinates of the vertices on Z axis.'].join(' ')\n  },\n  value: {\n    valType: 'data_array',\n    description: ['Sets the 4th dimension (value) of the vertices.'].join(' ')\n  },\n  isomin: {\n    valType: 'number',\n    description: ['Sets the minimum boundary for iso-surface plot.'].join(' ')\n  },\n  isomax: {\n    valType: 'number',\n    description: ['Sets the maximum boundary for iso-surface plot.'].join(' ')\n  },\n  surface: {\n    show: {\n      valType: 'boolean',\n      dflt: true,\n      description: ['Hides/displays surfaces between minimum and maximum iso-values.'].join(' ')\n    },\n    count: {\n      valType: 'integer',\n      dflt: 2,\n      min: 1,\n      description: ['Sets the number of iso-surfaces between minimum and maximum iso-values.', 'By default this value is 2 meaning that only minimum and maximum surfaces', 'would be drawn.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 1,\n      description: ['Sets the fill ratio of the iso-surface. The default fill value of the', 'surface is 1 meaning that they are entirely shaded. On the other hand', 'Applying a `fill` ratio less than one would allow the creation of', 'openings parallel to the edges.'].join(' ')\n    },\n    pattern: {\n      valType: 'flaglist',\n      flags: ['A', 'B', 'C', 'D', 'E'],\n      extras: ['all', 'odd', 'even'],\n      dflt: 'all',\n      description: ['Sets the surface pattern of the iso-surface 3-D sections. The default pattern of', 'the surface is `all` meaning that the rest of surface elements would be shaded.', 'The check options (either 1 or 2) could be used to draw half of the squares', 'on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E`', 'may also be used to reduce the number of triangles on the iso-surfaces and', 'creating other patterns of interest.'].join(' ')\n    }\n  },\n  spaceframe: {\n    show: {\n      valType: 'boolean',\n      dflt: false,\n      description: ['Displays/hides tetrahedron shapes between minimum and', 'maximum iso-values. Often useful when either caps or', 'surfaces are disabled or filled with values less than 1.'].join(' ')\n    },\n    fill: {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      dflt: 0.15,\n      description: ['Sets the fill ratio of the `spaceframe` elements. The default fill value', 'is 0.15 meaning that only 15% of the area of every faces of tetras would be', 'shaded. Applying a greater `fill` ratio would allow the creation of stronger', 'elements or could be sued to have entirely closed areas (in case of using 1).'].join(' ')\n    }\n  },\n  slices: {\n    x: makeSliceAttr('x'),\n    y: makeSliceAttr('y'),\n    z: makeSliceAttr('z')\n  },\n  caps: {\n    x: makeCapAttr('x'),\n    y: makeCapAttr('y'),\n    z: makeCapAttr('z')\n  },\n  text: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    description: ['Sets the text elements associated with the vertices.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs(),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z'),\n  valuehoverformat: axisHoverFormat('value', 1),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n}, colorScaleAttrs('', {\n  colorAttr: '`value`',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  opacity: meshAttrs.opacity,\n  lightposition: meshAttrs.lightposition,\n  lighting: meshAttrs.lighting,\n  flatshading: meshAttrs.flatshading,\n  contour: meshAttrs.contour,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo)\n}), 'calc', 'nested'); // required defaults to speed up surface normal calculations\n\nattrs.flatshading.dflt = true;\nattrs.lighting.facenormalsepsilon.dflt = 0;\nattrs.x.editType = attrs.y.editType = attrs.z.editType = attrs.value.editType = 'calc+clearAxisTypes';\nattrs.transforms = undefined;","map":null,"metadata":{},"sourceType":"script"}