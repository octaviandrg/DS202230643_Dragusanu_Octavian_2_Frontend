{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar handleRThetaDefaults = require('../scatterpolar/defaults').handleRThetaDefaults;\n\nvar handleStyleDefaults = require('../bar/style_defaults');\n\nvar attributes = require('./attributes');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var len = handleRThetaDefaults(traceIn, traceOut, layout, coerce);\n\n  if (!len) {\n    traceOut.visible = false;\n    return;\n  } // coerce('orientation', (traceOut.theta && !traceOut.r) ? 'angular' : 'radial');\n\n\n  coerce('thetaunit');\n  coerce('base');\n  coerce('offset');\n  coerce('width');\n  coerce('text');\n  coerce('hovertext');\n  coerce('hovertemplate'); // var textPosition = coerce('textposition');\n  // var hasBoth = Array.isArray(textPosition) || textPosition === 'auto';\n  // var hasInside = hasBoth || textPosition === 'inside';\n  // var hasOutside = hasBoth || textPosition === 'outside';\n  // if(hasInside || hasOutside) {\n  //     var textFont = coerceFont(coerce, 'textfont', layout.font);\n  //     if(hasInside) coerceFont(coerce, 'insidetextfont', textFont);\n  //     if(hasOutside) coerceFont(coerce, 'outsidetextfont', textFont);\n  //     coerce('constraintext');\n  //     coerce('selected.textfont.color');\n  //     coerce('unselected.textfont.color');\n  //     coerce('cliponaxis');\n  // }\n\n  handleStyleDefaults(traceIn, traceOut, coerce, defaultColor, layout);\n  Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n};","map":null,"metadata":{},"sourceType":"script"}