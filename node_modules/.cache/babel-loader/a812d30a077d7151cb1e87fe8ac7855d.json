{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\n\nmodule.exports = function (layoutIn, layoutOut, fullData) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(layoutIn, layoutOut, layoutAttributes, attr, dflt);\n  }\n\n  var hasBars = false;\n  var shouldBeGapless = false;\n  var gappedAnyway = false;\n  var usedSubplots = {};\n  var mode = coerce('barmode');\n\n  for (var i = 0; i < fullData.length; i++) {\n    var trace = fullData[i];\n    if (Registry.traceIs(trace, 'bar') && trace.visible) hasBars = true;else continue; // if we have at least 2 grouped bar traces on the same subplot,\n    // we should default to a gap anyway, even if the data is histograms\n\n    if (mode === 'group') {\n      var subploti = trace.xaxis + trace.yaxis;\n      if (usedSubplots[subploti]) gappedAnyway = true;\n      usedSubplots[subploti] = true;\n    }\n\n    if (trace.visible && trace.type === 'histogram') {\n      var pa = Axes.getFromId({\n        _fullLayout: layoutOut\n      }, trace[trace.orientation === 'v' ? 'xaxis' : 'yaxis']);\n      if (pa.type !== 'category') shouldBeGapless = true;\n    }\n  }\n\n  if (!hasBars) {\n    delete layoutOut.barmode;\n    return;\n  }\n\n  if (mode !== 'overlay') coerce('barnorm');\n  coerce('bargap', shouldBeGapless && !gappedAnyway ? 0 : 0.2);\n  coerce('bargroupgap');\n};","map":null,"metadata":{},"sourceType":"script"}