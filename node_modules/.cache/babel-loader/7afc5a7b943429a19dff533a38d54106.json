{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nvar geoUtils = require('../../lib/geo_location_utils');\n\nvar getTopojsonFeatures = require('../../lib/topojson_utils').getTopojsonFeatures;\n\nvar findExtremes = require('../../plots/cartesian/autorange').findExtremes;\n\nvar style = require('./style').style;\n\nfunction plot(gd, geo, calcData) {\n  var choroplethLayer = geo.layers.backplot.select('.choroplethlayer');\n  Lib.makeTraceGroups(choroplethLayer, calcData, 'trace choropleth').each(function (calcTrace) {\n    var sel = d3.select(this);\n    var paths = sel.selectAll('path.choroplethlocation').data(Lib.identity);\n    paths.enter().append('path').classed('choroplethlocation', true);\n    paths.exit().remove(); // call style here within topojson request callback\n\n    style(gd, calcTrace);\n  });\n}\n\nfunction calcGeoJSON(calcTrace, fullLayout) {\n  var trace = calcTrace[0].trace;\n  var geoLayout = fullLayout[trace.geo];\n  var geo = geoLayout._subplot;\n  var locationmode = trace.locationmode;\n  var len = trace._length;\n  var features = locationmode === 'geojson-id' ? geoUtils.extractTraceFeature(calcTrace) : getTopojsonFeatures(trace, geo.topojson);\n  var lonArray = [];\n  var latArray = [];\n\n  for (var i = 0; i < len; i++) {\n    var calcPt = calcTrace[i];\n    var feature = locationmode === 'geojson-id' ? calcPt.fOut : geoUtils.locationToFeature(locationmode, calcPt.loc, features);\n\n    if (feature) {\n      calcPt.geojson = feature;\n      calcPt.ct = feature.properties.ct;\n      calcPt._polygons = geoUtils.feature2polygons(feature);\n      var bboxFeature = geoUtils.computeBbox(feature);\n      lonArray.push(bboxFeature[0], bboxFeature[2]);\n      latArray.push(bboxFeature[1], bboxFeature[3]);\n    } else {\n      calcPt.geojson = null;\n    }\n  }\n\n  if (geoLayout.fitbounds === 'geojson' && locationmode === 'geojson-id') {\n    var bboxGeojson = geoUtils.computeBbox(geoUtils.getTraceGeojson(trace));\n    lonArray = [bboxGeojson[0], bboxGeojson[2]];\n    latArray = [bboxGeojson[1], bboxGeojson[3]];\n  }\n\n  var opts = {\n    padded: true\n  };\n  trace._extremes.lon = findExtremes(geoLayout.lonaxis._ax, lonArray, opts);\n  trace._extremes.lat = findExtremes(geoLayout.lataxis._ax, latArray, opts);\n}\n\nmodule.exports = {\n  calcGeoJSON: calcGeoJSON,\n  plot: plot\n};","map":null,"metadata":{},"sourceType":"script"}