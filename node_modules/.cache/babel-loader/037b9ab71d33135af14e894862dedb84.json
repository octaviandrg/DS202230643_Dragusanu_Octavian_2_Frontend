{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar map1dArray = require('../carpet/map_1d_array');\n\nvar makepath = require('../carpet/makepath');\n\nvar Drawing = require('../../components/drawing');\n\nvar Lib = require('../../lib');\n\nvar makeCrossings = require('../contour/make_crossings');\n\nvar findAllPaths = require('../contour/find_all_paths');\n\nvar contourPlot = require('../contour/plot');\n\nvar constants = require('../contour/constants');\n\nvar convertToConstraints = require('../contour/convert_to_constraints');\n\nvar emptyPathinfo = require('../contour/empty_pathinfo');\n\nvar closeBoundaries = require('../contour/close_boundaries');\n\nvar lookupCarpet = require('../carpet/lookup_carpetid');\n\nvar axisAlignedLine = require('../carpet/axis_aligned_line');\n\nmodule.exports = function plot(gd, plotinfo, cdcontours, contourcarpetLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(contourcarpetLayer, cdcontours, 'contour').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    var carpetcd = gd.calcdata[carpet.index][0];\n    if (!carpet.visible || carpet.visible === 'legendonly') return;\n    var a = cd0.a;\n    var b = cd0.b;\n    var contours = trace.contours;\n    var pathinfo = emptyPathinfo(contours, plotinfo, cd0);\n    var isConstraint = contours.type === 'constraint';\n    var operation = contours._operation;\n    var coloring = isConstraint ? operation === '=' ? 'lines' : 'fill' : contours.coloring; // Map [a, b] (data) --> [i, j] (pixels)\n\n    function ab2p(ab) {\n      var pt = carpet.ab2xy(ab[0], ab[1], true);\n      return [xa.c2p(pt[0]), ya.c2p(pt[1])];\n    } // Define the perimeter in a/b coordinates:\n\n\n    var perimeter = [[a[0], b[b.length - 1]], [a[a.length - 1], b[b.length - 1]], [a[a.length - 1], b[0]], [a[0], b[0]]]; // Extract the contour levels:\n\n    makeCrossings(pathinfo);\n    var atol = (a[a.length - 1] - a[0]) * 1e-8;\n    var btol = (b[b.length - 1] - b[0]) * 1e-8;\n    findAllPaths(pathinfo, atol, btol); // Constraints might need to be draw inverted, which is not something contours\n    // handle by default since they're assumed fully opaque so that they can be\n    // drawn overlapping. This function flips the paths as necessary so that they're\n    // drawn correctly.\n    //\n    // TODO: Perhaps this should be generalized and *all* paths should be drawn as\n    // closed regions so that translucent contour levels would be valid.\n    // See: https://github.com/plotly/plotly.js/issues/1356\n\n    var fillPathinfo = pathinfo;\n\n    if (contours.type === 'constraint') {\n      fillPathinfo = convertToConstraints(pathinfo, operation);\n    } // Map the paths in a/b coordinates to pixel coordinates:\n\n\n    mapPathinfo(pathinfo, ab2p); // draw everything\n    // Compute the boundary path\n\n    var seg, xp, yp, i;\n    var segs = [];\n\n    for (i = carpetcd.clipsegments.length - 1; i >= 0; i--) {\n      seg = carpetcd.clipsegments[i];\n      xp = map1dArray([], seg.x, xa.c2p);\n      yp = map1dArray([], seg.y, ya.c2p);\n      xp.reverse();\n      yp.reverse();\n      segs.push(makepath(xp, yp, seg.bicubic));\n    }\n\n    var boundaryPath = 'M' + segs.join('L') + 'Z'; // Draw the baseline background fill that fills in the space behind any other\n    // contour levels:\n\n    makeBackground(plotGroup, carpetcd.clipsegments, xa, ya, isConstraint, coloring); // Draw the specific contour fills. As a simplification, they're assumed to be\n    // fully opaque so that it's easy to draw them simply overlapping. The alternative\n    // would be to flip adjacent paths and draw closed paths for each level instead.\n\n    makeFills(trace, plotGroup, xa, ya, fillPathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath); // Draw contour lines:\n\n    makeLinesAndLabels(plotGroup, pathinfo, gd, cd0, contours, plotinfo, carpet); // Clip the boundary of the plot\n\n    Drawing.setClipUrl(plotGroup, carpet._clipPathId, gd);\n  });\n};\n\nfunction mapPathinfo(pathinfo, map) {\n  var i, j, k, pi, pedgepaths, ppaths, pedgepath, ppath, path;\n\n  for (i = 0; i < pathinfo.length; i++) {\n    pi = pathinfo[i];\n    pedgepaths = pi.pedgepaths = [];\n    ppaths = pi.ppaths = [];\n\n    for (j = 0; j < pi.edgepaths.length; j++) {\n      path = pi.edgepaths[j];\n      pedgepath = [];\n\n      for (k = 0; k < path.length; k++) {\n        pedgepath[k] = map(path[k]);\n      }\n\n      pedgepaths.push(pedgepath);\n    }\n\n    for (j = 0; j < pi.paths.length; j++) {\n      path = pi.paths[j];\n      ppath = [];\n\n      for (k = 0; k < path.length; k++) {\n        ppath[k] = map(path[k]);\n      }\n\n      ppaths.push(ppath);\n    }\n  }\n}\n\nfunction makeLinesAndLabels(plotgroup, pathinfo, gd, cd0, contours, plotinfo, carpet) {\n  var lineContainer = Lib.ensureSingle(plotgroup, 'g', 'contourlines');\n  var showLines = contours.showlines !== false;\n  var showLabels = contours.showlabels;\n  var clipLinesForLabels = showLines && showLabels; // Even if we're not going to show lines, we need to create them\n  // if we're showing labels, because the fill paths include the perimeter\n  // so can't be used to position the labels correctly.\n  // In this case we'll remove the lines after making the labels.\n\n  var linegroup = contourPlot.createLines(lineContainer, showLines || showLabels, pathinfo);\n  var lineClip = contourPlot.createLineClip(lineContainer, clipLinesForLabels, gd, cd0.trace.uid);\n  var labelGroup = plotgroup.selectAll('g.contourlabels').data(showLabels ? [0] : []);\n  labelGroup.exit().remove();\n  labelGroup.enter().append('g').classed('contourlabels', true);\n\n  if (showLabels) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n    var xLen = xa._length;\n    var yLen = ya._length; // for simplicity use the xy box for label clipping outline.\n\n    var labelClipPathData = [[[0, 0], [xLen, 0], [xLen, yLen], [0, yLen]]];\n    var labelData = []; // invalidate the getTextLocation cache in case paths changed\n\n    Lib.clearLocationCache();\n    var contourFormat = contourPlot.labelFormatter(gd, cd0);\n    var dummyText = Drawing.tester.append('text').attr('data-notex', 1).call(Drawing.font, contours.labelfont); // use `bounds` only to keep labels away from the x/y boundaries\n    // `constrainToCarpet` below ensures labels don't go off the\n    // carpet edges\n\n    var bounds = {\n      left: 0,\n      right: xLen,\n      center: xLen / 2,\n      top: 0,\n      bottom: yLen,\n      middle: yLen / 2\n    };\n    var plotDiagonal = Math.sqrt(xLen * xLen + yLen * yLen); // the path length to use to scale the number of labels to draw:\n\n    var normLength = constants.LABELDISTANCE * plotDiagonal / Math.max(1, pathinfo.length / constants.LABELINCREASE);\n    linegroup.each(function (d) {\n      var textOpts = contourPlot.calcTextOpts(d.level, contourFormat, dummyText, gd);\n      d3.select(this).selectAll('path').each(function (pathData) {\n        var path = this;\n        var pathBounds = Lib.getVisibleSegment(path, bounds, textOpts.height / 2);\n        if (!pathBounds) return;\n        constrainToCarpet(path, pathData, d, pathBounds, carpet, textOpts.height);\n        if (pathBounds.len < (textOpts.width + textOpts.height) * constants.LABELMIN) return;\n        var maxLabels = Math.min(Math.ceil(pathBounds.len / normLength), constants.LABELMAX);\n\n        for (var i = 0; i < maxLabels; i++) {\n          var loc = contourPlot.findBestTextLocation(path, pathBounds, textOpts, labelData, bounds);\n          if (!loc) break;\n          contourPlot.addLabelData(loc, textOpts, labelData, labelClipPathData);\n        }\n      });\n    });\n    dummyText.remove();\n    contourPlot.drawLabels(labelGroup, labelData, gd, lineClip, clipLinesForLabels ? labelClipPathData : null);\n  }\n\n  if (showLabels && !showLines) linegroup.remove();\n} // figure out if this path goes off the edge of the carpet\n// and shorten the part we call visible to keep labels away from the edge\n\n\nfunction constrainToCarpet(path, pathData, levelData, pathBounds, carpet, textHeight) {\n  var pathABData;\n\n  for (var i = 0; i < levelData.pedgepaths.length; i++) {\n    if (pathData === levelData.pedgepaths[i]) {\n      pathABData = levelData.edgepaths[i];\n    }\n  }\n\n  if (!pathABData) return;\n  var aMin = carpet.a[0];\n  var aMax = carpet.a[carpet.a.length - 1];\n  var bMin = carpet.b[0];\n  var bMax = carpet.b[carpet.b.length - 1];\n\n  function getOffset(abPt, pathVector) {\n    var offset = 0;\n    var edgeVector;\n    var dAB = 0.1;\n\n    if (Math.abs(abPt[0] - aMin) < dAB || Math.abs(abPt[0] - aMax) < dAB) {\n      edgeVector = normalizeVector(carpet.dxydb_rough(abPt[0], abPt[1], dAB));\n      offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n    }\n\n    if (Math.abs(abPt[1] - bMin) < dAB || Math.abs(abPt[1] - bMax) < dAB) {\n      edgeVector = normalizeVector(carpet.dxyda_rough(abPt[0], abPt[1], dAB));\n      offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n    }\n\n    return offset;\n  }\n\n  var startVector = getUnitVector(path, 0, 1);\n  var endVector = getUnitVector(path, pathBounds.total, pathBounds.total - 1);\n  var minStart = getOffset(pathABData[0], startVector);\n  var maxEnd = pathBounds.total - getOffset(pathABData[pathABData.length - 1], endVector);\n  if (pathBounds.min < minStart) pathBounds.min = minStart;\n  if (pathBounds.max > maxEnd) pathBounds.max = maxEnd;\n  pathBounds.len = pathBounds.max - pathBounds.min;\n}\n\nfunction getUnitVector(path, p0, p1) {\n  var pt0 = path.getPointAtLength(p0);\n  var pt1 = path.getPointAtLength(p1);\n  var dx = pt1.x - pt0.x;\n  var dy = pt1.y - pt0.y;\n  var len = Math.sqrt(dx * dx + dy * dy);\n  return [dx / len, dy / len];\n}\n\nfunction normalizeVector(v) {\n  var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n  return [v[0] / len, v[1] / len];\n}\n\nfunction vectorTan(v0, v1) {\n  var cos = Math.abs(v0[0] * v1[0] + v0[1] * v1[1]);\n  var sin = Math.sqrt(1 - cos * cos);\n  return sin / cos;\n}\n\nfunction makeBackground(plotgroup, clipsegments, xaxis, yaxis, isConstraint, coloring) {\n  var seg, xp, yp, i;\n  var bggroup = Lib.ensureSingle(plotgroup, 'g', 'contourbg');\n  var bgfill = bggroup.selectAll('path').data(coloring === 'fill' && !isConstraint ? [0] : []);\n  bgfill.enter().append('path');\n  bgfill.exit().remove();\n  var segs = [];\n\n  for (i = 0; i < clipsegments.length; i++) {\n    seg = clipsegments[i];\n    xp = map1dArray([], seg.x, xaxis.c2p);\n    yp = map1dArray([], seg.y, yaxis.c2p);\n    segs.push(makepath(xp, yp, seg.bicubic));\n  }\n\n  bgfill.attr('d', 'M' + segs.join('L') + 'Z').style('stroke', 'none');\n}\n\nfunction makeFills(trace, plotgroup, xa, ya, pathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath) {\n  var hasFills = coloring === 'fill'; // fills prefixBoundary in pathinfo items\n\n  if (hasFills) {\n    closeBoundaries(pathinfo, trace.contours);\n  }\n\n  var fillgroup = Lib.ensureSingle(plotgroup, 'g', 'contourfill');\n  var fillitems = fillgroup.selectAll('path').data(hasFills ? pathinfo : []);\n  fillitems.enter().append('path');\n  fillitems.exit().remove();\n  fillitems.each(function (pi) {\n    // join all paths for this level together into a single path\n    // first follow clockwise around the perimeter to close any open paths\n    // if the whole perimeter is above this level, start with a path\n    // enclosing the whole thing. With all that, the parity should mean\n    // that we always fill everything above the contour, nothing below\n    var fullpath = (pi.prefixBoundary ? boundaryPath : '') + joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya);\n\n    if (!fullpath) {\n      d3.select(this).remove();\n    } else {\n      d3.select(this).attr('d', fullpath).style('stroke', 'none');\n    }\n  });\n}\n\nfunction joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya) {\n  var i;\n  var fullpath = '';\n  var startsleft = pi.edgepaths.map(function (v, i) {\n    return i;\n  });\n  var newloop = true;\n  var endpt, newendpt, cnt, nexti, possiblei, addpath;\n  var atol = Math.abs(perimeter[0][0] - perimeter[2][0]) * 1e-4;\n  var btol = Math.abs(perimeter[0][1] - perimeter[2][1]) * 1e-4;\n\n  function istop(pt) {\n    return Math.abs(pt[1] - perimeter[0][1]) < btol;\n  }\n\n  function isbottom(pt) {\n    return Math.abs(pt[1] - perimeter[2][1]) < btol;\n  }\n\n  function isleft(pt) {\n    return Math.abs(pt[0] - perimeter[0][0]) < atol;\n  }\n\n  function isright(pt) {\n    return Math.abs(pt[0] - perimeter[2][0]) < atol;\n  }\n\n  function pathto(pt0, pt1) {\n    var i, j, segments, axis;\n    var path = '';\n\n    if (istop(pt0) && !isright(pt0) || isbottom(pt0) && !isleft(pt0)) {\n      axis = carpet.aaxis;\n      segments = axisAlignedLine(carpet, carpetcd, [pt0[0], pt1[0]], 0.5 * (pt0[1] + pt1[1]));\n    } else {\n      axis = carpet.baxis;\n      segments = axisAlignedLine(carpet, carpetcd, 0.5 * (pt0[0] + pt1[0]), [pt0[1], pt1[1]]);\n    }\n\n    for (i = 1; i < segments.length; i++) {\n      path += axis.smoothing ? 'C' : 'L';\n\n      for (j = 0; j < segments[i].length; j++) {\n        var pt = segments[i][j];\n        path += [xa.c2p(pt[0]), ya.c2p(pt[1])] + ' ';\n      }\n    }\n\n    return path;\n  }\n\n  i = 0;\n  endpt = null;\n\n  while (startsleft.length) {\n    var startpt = pi.edgepaths[i][0];\n\n    if (endpt) {\n      fullpath += pathto(endpt, startpt);\n    }\n\n    addpath = Drawing.smoothopen(pi.edgepaths[i].map(ab2p), pi.smoothing);\n    fullpath += newloop ? addpath : addpath.replace(/^M/, 'L');\n    startsleft.splice(startsleft.indexOf(i), 1);\n    endpt = pi.edgepaths[i][pi.edgepaths[i].length - 1];\n    nexti = -1; // now loop through sides, moving our endpoint until we find a new start\n\n    for (cnt = 0; cnt < 4; cnt++) {\n      // just to prevent infinite loops\n      if (!endpt) {\n        Lib.log('Missing end?', i, pi);\n        break;\n      }\n\n      if (istop(endpt) && !isright(endpt)) {\n        newendpt = perimeter[1]; // left top ---> right top\n      } else if (isleft(endpt)) {\n        newendpt = perimeter[0]; // left bottom ---> left top\n      } else if (isbottom(endpt)) {\n        newendpt = perimeter[3]; // right bottom\n      } else if (isright(endpt)) {\n        newendpt = perimeter[2]; // left bottom\n      }\n\n      for (possiblei = 0; possiblei < pi.edgepaths.length; possiblei++) {\n        var ptNew = pi.edgepaths[possiblei][0]; // is ptNew on the (horz. or vert.) segment from endpt to newendpt?\n\n        if (Math.abs(endpt[0] - newendpt[0]) < atol) {\n          if (Math.abs(endpt[0] - ptNew[0]) < atol && (ptNew[1] - endpt[1]) * (newendpt[1] - ptNew[1]) >= 0) {\n            newendpt = ptNew;\n            nexti = possiblei;\n          }\n        } else if (Math.abs(endpt[1] - newendpt[1]) < btol) {\n          if (Math.abs(endpt[1] - ptNew[1]) < btol && (ptNew[0] - endpt[0]) * (newendpt[0] - ptNew[0]) >= 0) {\n            newendpt = ptNew;\n            nexti = possiblei;\n          }\n        } else {\n          Lib.log('endpt to newendpt is not vert. or horz.', endpt, newendpt, ptNew);\n        }\n      }\n\n      if (nexti >= 0) break;\n      fullpath += pathto(endpt, newendpt);\n      endpt = newendpt;\n    }\n\n    if (nexti === pi.edgepaths.length) {\n      Lib.log('unclosed perimeter path');\n      break;\n    }\n\n    i = nexti; // if we closed back on a loop we already included,\n    // close it and start a new loop\n\n    newloop = startsleft.indexOf(i) === -1;\n\n    if (newloop) {\n      i = startsleft[0];\n      fullpath += pathto(endpt, newendpt) + 'Z';\n      endpt = null;\n    }\n  } // finally add the interior paths\n\n\n  for (i = 0; i < pi.paths.length; i++) {\n    fullpath += Drawing.smoothclosed(pi.paths[i].map(ab2p), pi.smoothing);\n  }\n\n  return fullpath;\n}","map":null,"metadata":{},"sourceType":"script"}