{"ast":null,"code":"'use strict';\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar textFontAttrs = fontAttrs({\n  editType: 'plot',\n  arrayOk: true,\n  colorEditType: 'plot',\n  description: 'Sets the font used for `textinfo`.'\n});\nmodule.exports = {\n  labels: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the sector labels.', 'If `labels` entries are duplicated, we sum associated `values`', 'or simply count occurrences if `values` is not provided.', 'For other array attributes (including color) we use the first', 'non-empty entry among all occurrences of the label.'].join(' ')\n  },\n  // equivalent of x0 and dx, if label is missing\n  label0: {\n    valType: 'number',\n    dflt: 0,\n    editType: 'calc',\n    description: ['Alternate to `labels`.', 'Builds a numeric set of labels.', 'Use with `dlabel`', 'where `label0` is the starting label and `dlabel` the step.'].join(' ')\n  },\n  dlabel: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the label step. See `label0` for more info.'\n  },\n  values: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the values of the sectors.', 'If omitted, we count occurrences of each label.'].join(' ')\n  },\n  marker: {\n    colors: {\n      valType: 'data_array',\n      // TODO 'color_array' ?\n      editType: 'calc',\n      description: ['Sets the color of each sector.', 'If not specified, the default trace color set is used', 'to pick the sector colors.'].join(' ')\n    },\n    line: {\n      color: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        arrayOk: true,\n        editType: 'style',\n        description: ['Sets the color of the line enclosing each sector.'].join(' ')\n      },\n      width: {\n        valType: 'number',\n        min: 0,\n        dflt: 0,\n        arrayOk: true,\n        editType: 'style',\n        description: ['Sets the width (in px) of the line enclosing each sector.'].join(' ')\n      },\n      editType: 'calc'\n    },\n    editType: 'calc'\n  },\n  text: {\n    valType: 'data_array',\n    editType: 'plot',\n    description: ['Sets text elements associated with each sector.', 'If trace `textinfo` contains a *text* flag, these elements will be seen', 'on the chart.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'style',\n    description: ['Sets hover text elements associated with each sector.', 'If a single string, the same string appears for', 'all data points.', 'If an array of string, the items are mapped in order of', 'this trace\\'s sectors.', 'To be seen, trace `hoverinfo` must contain a *text* flag.'].join(' ')\n  },\n  // 'see eg:'\n  // 'https://www.e-education.psu.edu/natureofgeoinfo/sites/www.e-education.psu.edu.natureofgeoinfo/files/image/hisp_pies.gif',\n  // '(this example involves a map too - may someday be a whole trace type',\n  // 'of its own. but the point is the size of the whole pie is important.)'\n  scalegroup: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: ['If there are multiple pie charts that should be sized according to', 'their totals, link them by providing a non-empty group id here', 'shared by every trace in the same group.'].join(' ')\n  },\n  // labels (legend is handled by plots.attributes.showlegend and layout.hiddenlabels)\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'value', 'percent'],\n    extras: ['none'],\n    editType: 'calc',\n    description: ['Determines which trace information appear on the graph.'].join(' ')\n  },\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['label', 'text', 'value', 'percent', 'name']\n  }),\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: ['label', 'color', 'value', 'percent', 'text']\n  }),\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: ['label', 'color', 'value', 'percent', 'text']\n  }),\n  textposition: {\n    valType: 'enumerated',\n    values: ['inside', 'outside', 'auto', 'none'],\n    dflt: 'auto',\n    arrayOk: true,\n    editType: 'plot',\n    description: ['Specifies the location of the `textinfo`.'].join(' ')\n  },\n  textfont: extendFlat({}, textFontAttrs, {\n    description: 'Sets the font used for `textinfo`.'\n  }),\n  insidetextorientation: {\n    valType: 'enumerated',\n    values: ['horizontal', 'radial', 'tangential', 'auto'],\n    dflt: 'auto',\n    editType: 'plot',\n    description: ['Controls the orientation of the text inside chart sectors.', 'When set to *auto*, text may be oriented in any direction in order', 'to be as big as possible in the middle of a sector.', 'The *horizontal* option orients text to be parallel with the bottom', 'of the chart, and may make text smaller in order to achieve that goal.', 'The *radial* option orients text along the radius of the sector.', 'The *tangential* option orients text perpendicular to the radius of the sector.'].join(' ')\n  },\n  insidetextfont: extendFlat({}, textFontAttrs, {\n    description: 'Sets the font used for `textinfo` lying inside the sector.'\n  }),\n  outsidetextfont: extendFlat({}, textFontAttrs, {\n    description: 'Sets the font used for `textinfo` lying outside the sector.'\n  }),\n  automargin: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'plot',\n    description: ['Determines whether outside text labels can push the margins.'].join(' ')\n  },\n  title: {\n    text: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets the title of the chart.', 'If it is empty, no title is displayed.', 'Note that before the existence of `title.text`, the title\\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Sets the font used for `title`.', 'Note that the title\\'s font used to be set', 'by the now deprecated `titlefont` attribute.'].join(' ')\n    }),\n    position: {\n      valType: 'enumerated',\n      values: ['top left', 'top center', 'top right', 'middle center', 'bottom left', 'bottom center', 'bottom right'],\n      editType: 'plot',\n      description: ['Specifies the location of the `title`.', 'Note that the title\\'s position used to be set', 'by the now deprecated `titleposition` attribute.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  // position and shape\n  domain: domainAttrs({\n    name: 'pie',\n    trace: true,\n    editType: 'calc'\n  }),\n  hole: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 0,\n    editType: 'calc',\n    description: ['Sets the fraction of the radius to cut out of the pie.', 'Use this to make a donut chart.'].join(' ')\n  },\n  // ordering and direction\n  sort: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not the sectors are reordered', 'from largest to smallest.'].join(' ')\n  },\n  direction: {\n    /**\n     * there are two common conventions, both of which place the first\n     * (largest, if sorted) slice with its left edge at 12 o'clock but\n     * succeeding slices follow either cw or ccw from there.\n     *\n     * see http://visage.co/data-visualization-101-pie-charts/\n     */\n    valType: 'enumerated',\n    values: ['clockwise', 'counterclockwise'],\n    dflt: 'counterclockwise',\n    editType: 'calc',\n    description: ['Specifies the direction at which succeeding sectors follow', 'one another.'].join(' ')\n  },\n  rotation: {\n    valType: 'angle',\n    dflt: 0,\n    editType: 'calc',\n    description: ['Instead of the first slice starting at 12 o\\'clock,', 'rotate to some other angle.'].join(' ')\n  },\n  pull: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 0,\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Sets the fraction of larger radius to pull the sectors', 'out from the center. This can be a constant', 'to pull all slices apart from each other equally', 'or an array to highlight one or more slices.'].join(' ')\n  },\n  _deprecated: {\n    title: {\n      valType: 'string',\n      dflt: '',\n      editType: 'calc',\n      description: ['Deprecated in favor of `title.text`.', 'Note that value of `title` is no longer a simple', '*string* but a set of sub-attributes.'].join(' ')\n    },\n    titlefont: extendFlat({}, textFontAttrs, {\n      description: 'Deprecated in favor of `title.font`.'\n    }),\n    titleposition: {\n      valType: 'enumerated',\n      values: ['top left', 'top center', 'top right', 'middle center', 'bottom left', 'bottom center', 'bottom right'],\n      editType: 'calc',\n      description: 'Deprecated in favor of `title.position`.'\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}