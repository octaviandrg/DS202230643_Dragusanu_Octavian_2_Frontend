{"ast":null,"code":"'use strict';\n\nvar barAttrs = require('../bar/attributes');\n\nvar lineAttrs = require('../scatter/attributes').line;\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar constants = require('./constants');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar Color = require('../../components/color');\n\nfunction directionAttrs(dirTxt) {\n  return {\n    marker: {\n      color: extendFlat({}, barAttrs.marker.color, {\n        arrayOk: false,\n        editType: 'style',\n        description: 'Sets the marker color of all ' + dirTxt + ' values.'\n      }),\n      line: {\n        color: extendFlat({}, barAttrs.marker.line.color, {\n          arrayOk: false,\n          editType: 'style',\n          description: 'Sets the line color of all ' + dirTxt + ' values.'\n        }),\n        width: extendFlat({}, barAttrs.marker.line.width, {\n          arrayOk: false,\n          editType: 'style',\n          description: 'Sets the line width of all ' + dirTxt + ' values.'\n        }),\n        editType: 'style'\n      },\n      editType: 'style'\n    },\n    editType: 'style'\n  };\n}\n\nmodule.exports = {\n  measure: {\n    valType: 'data_array',\n    dflt: [],\n    editType: 'calc',\n    description: ['An array containing types of values.', 'By default the values are considered as \\'relative\\'.', 'However; it is possible to use \\'total\\' to compute the sums.', 'Also \\'absolute\\' could be applied to reset the computed total', 'or to declare an initial value where needed.'].join(' ')\n  },\n  base: {\n    valType: 'number',\n    dflt: null,\n    arrayOk: false,\n    editType: 'calc',\n    description: ['Sets where the bar base is drawn (in position axis units).'].join(' ')\n  },\n  x: barAttrs.x,\n  x0: barAttrs.x0,\n  dx: barAttrs.dx,\n  y: barAttrs.y,\n  y0: barAttrs.y0,\n  dy: barAttrs.dy,\n  xperiod: barAttrs.xperiod,\n  yperiod: barAttrs.yperiod,\n  xperiod0: barAttrs.xperiod0,\n  yperiod0: barAttrs.yperiod0,\n  xperiodalignment: barAttrs.xperiodalignment,\n  yperiodalignment: barAttrs.yperiodalignment,\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  hovertext: barAttrs.hovertext,\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['name', 'x', 'y', 'text', 'initial', 'delta', 'final']\n  }),\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'initial', 'delta', 'final'],\n    extras: ['none'],\n    editType: 'plot',\n    arrayOk: false,\n    description: ['Determines which trace information appear on the graph.', 'In the case of having multiple waterfalls, totals', 'are computed separately (per trace).'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label'])\n  }),\n  text: barAttrs.text,\n  textposition: barAttrs.textposition,\n  insidetextanchor: barAttrs.insidetextanchor,\n  textangle: barAttrs.textangle,\n  textfont: barAttrs.textfont,\n  insidetextfont: barAttrs.insidetextfont,\n  outsidetextfont: barAttrs.outsidetextfont,\n  constraintext: barAttrs.constraintext,\n  cliponaxis: barAttrs.cliponaxis,\n  orientation: barAttrs.orientation,\n  offset: barAttrs.offset,\n  width: barAttrs.width,\n  increasing: directionAttrs('increasing'),\n  decreasing: directionAttrs('decreasing'),\n  totals: directionAttrs('intermediate sums and total'),\n  connector: {\n    line: {\n      color: extendFlat({}, lineAttrs.color, {\n        dflt: Color.defaultLine\n      }),\n      width: extendFlat({}, lineAttrs.width, {\n        editType: 'plot' // i.e. to adjust bars is mode: 'between'. See https://github.com/plotly/plotly.js/issues/3787\n\n      }),\n      dash: lineAttrs.dash,\n      editType: 'plot'\n    },\n    mode: {\n      valType: 'enumerated',\n      values: ['spanning', 'between'],\n      dflt: 'between',\n      editType: 'plot',\n      description: ['Sets the shape of connector lines.'].join(' ')\n    },\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: ['Determines if connector lines are drawn. '].join(' ')\n    },\n    editType: 'plot'\n  },\n  offsetgroup: barAttrs.offsetgroup,\n  alignmentgroup: barAttrs.alignmentgroup\n};","map":null,"metadata":{},"sourceType":"script"}