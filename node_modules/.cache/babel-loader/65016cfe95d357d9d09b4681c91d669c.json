{"ast":null,"code":"'use strict';\n\nmodule.exports = function pick(src, props, keepRest) {\n  var result = {},\n      prop,\n      i;\n  if (typeof props === 'string') props = toList(props);\n\n  if (Array.isArray(props)) {\n    var res = {};\n\n    for (i = 0; i < props.length; i++) {\n      res[props[i]] = true;\n    }\n\n    props = res;\n  } // convert strings to lists\n\n\n  for (prop in props) {\n    props[prop] = toList(props[prop]);\n  } // keep-rest strategy requires unmatched props to be preserved\n\n\n  var occupied = {};\n\n  for (prop in props) {\n    var aliases = props[prop];\n\n    if (Array.isArray(aliases)) {\n      for (i = 0; i < aliases.length; i++) {\n        var alias = aliases[i];\n\n        if (keepRest) {\n          occupied[alias] = true;\n        }\n\n        if (alias in src) {\n          result[prop] = src[alias];\n\n          if (keepRest) {\n            for (var j = i; j < aliases.length; j++) {\n              occupied[aliases[j]] = true;\n            }\n          }\n\n          break;\n        }\n      }\n    } else if (prop in src) {\n      if (props[prop]) {\n        result[prop] = src[prop];\n      }\n\n      if (keepRest) {\n        occupied[prop] = true;\n      }\n    }\n  }\n\n  if (keepRest) {\n    for (prop in src) {\n      if (occupied[prop]) continue;\n      result[prop] = src[prop];\n    }\n  }\n\n  return result;\n};\n\nvar CACHE = {};\n\nfunction toList(arg) {\n  if (CACHE[arg]) return CACHE[arg];\n\n  if (typeof arg === 'string') {\n    arg = CACHE[arg] = arg.split(/\\s*,\\s*|\\s+/);\n  }\n\n  return arg;\n}","map":null,"metadata":{},"sourceType":"script"}