{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Color = require('../../components/color');\n\nvar Template = require('../../plot_api/plot_template');\n\nvar handleSubplotDefaults = require('../subplot_defaults');\n\nvar getSubplotData = require('../get_data').getSubplotData;\n\nvar handlePrefixSuffixDefaults = require('../cartesian/prefix_suffix_defaults');\n\nvar handleTickLabelDefaults = require('../cartesian/tick_label_defaults');\n\nvar handleLineGridDefaults = require('../cartesian/line_grid_defaults');\n\nvar setConvertCartesian = require('../cartesian/set_convert');\n\nvar layoutAttributes = require('./layout_attributes');\n\nvar constants = require('./constants');\n\nvar axisNames = constants.axisNames;\nvar makeImagDflt = memoize(function (realTickvals) {\n  return realTickvals.slice().reverse().map(function (x) {\n    return -x;\n  }).concat([0]).concat(realTickvals);\n}, String);\n\nfunction handleDefaults(contIn, contOut, coerce, opts) {\n  var bgColor = coerce('bgcolor');\n  opts.bgColor = Color.combine(bgColor, opts.paper_bgcolor);\n  var subplotData = getSubplotData(opts.fullData, constants.name, opts.id);\n  var layoutOut = opts.layoutOut;\n  var axName;\n\n  function coerceAxis(attr, dflt) {\n    return coerce(axName + '.' + attr, dflt);\n  }\n\n  for (var i = 0; i < axisNames.length; i++) {\n    axName = axisNames[i];\n\n    if (!Lib.isPlainObject(contIn[axName])) {\n      contIn[axName] = {};\n    }\n\n    var axIn = contIn[axName];\n    var axOut = Template.newContainer(contOut, axName);\n    axOut._id = axOut._name = axName;\n    axOut._attr = opts.id + '.' + axName;\n    axOut._traceIndices = subplotData.map(function (t) {\n      return t._expandedIndex;\n    });\n    var visible = coerceAxis('visible');\n    axOut.type = 'linear';\n    setConvertCartesian(axOut, layoutOut);\n    handlePrefixSuffixDefaults(axIn, axOut, coerceAxis, axOut.type);\n\n    if (visible) {\n      var isRealAxis = axName === 'realaxis';\n      if (isRealAxis) coerceAxis('side');\n\n      if (isRealAxis) {\n        coerceAxis('tickvals');\n      } else {\n        var imagTickvalsDflt = makeImagDflt(contOut.realaxis.tickvals || layoutAttributes.realaxis.tickvals.dflt);\n        coerceAxis('tickvals', imagTickvalsDflt);\n      }\n\n      var dfltColor;\n      var dfltFontColor;\n      var dfltFontSize;\n      var dfltFontFamily;\n      var font = opts.font || {};\n\n      if (visible) {\n        dfltColor = coerceAxis('color');\n        dfltFontColor = dfltColor === axIn.color ? dfltColor : font.color;\n        dfltFontSize = font.size;\n        dfltFontFamily = font.family;\n      }\n\n      handleTickLabelDefaults(axIn, axOut, coerceAxis, axOut.type, {\n        noTicklabelstep: true,\n        noAng: !isRealAxis,\n        noExp: true,\n        font: {\n          color: dfltFontColor,\n          size: dfltFontSize,\n          family: dfltFontFamily\n        }\n      });\n      Lib.coerce2(contIn, contOut, layoutAttributes, axName + '.ticklen');\n      Lib.coerce2(contIn, contOut, layoutAttributes, axName + '.tickwidth');\n      Lib.coerce2(contIn, contOut, layoutAttributes, axName + '.tickcolor', contOut.color);\n      var showTicks = coerceAxis('ticks');\n\n      if (!showTicks) {\n        delete contOut[axName].ticklen;\n        delete contOut[axName].tickwidth;\n        delete contOut[axName].tickcolor;\n      }\n\n      handleLineGridDefaults(axIn, axOut, coerceAxis, {\n        dfltColor: dfltColor,\n        bgColor: opts.bgColor,\n        // default grid color is darker here (60%, vs cartesian default ~91%)\n        // because the grid is not square so the eye needs heavier cues to follow\n        blend: 60,\n        showLine: true,\n        showGrid: true,\n        noZeroLine: true,\n        attributes: layoutAttributes[axName]\n      });\n      coerceAxis('layer');\n    }\n\n    coerceAxis('hoverformat');\n    delete axOut.type;\n    axOut._input = axIn;\n  }\n}\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    noUirevision: true,\n    type: constants.name,\n    attributes: layoutAttributes,\n    handleDefaults: handleDefaults,\n    font: layoutOut.font,\n    paper_bgcolor: layoutOut.paper_bgcolor,\n    fullData: fullData,\n    layoutOut: layoutOut\n  });\n};\n\nfunction memoize(fn, keyFn) {\n  var cache = {};\n  return function (val) {\n    var newKey = keyFn ? keyFn(val) : val;\n\n    if (newKey in cache) {\n      return cache[newKey];\n    }\n\n    var out = fn(val);\n    cache[newKey] = out;\n    return out;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}