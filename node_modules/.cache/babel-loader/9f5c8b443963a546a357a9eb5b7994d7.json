{"ast":null,"code":"'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar extendDeep = require('../../lib/extend').extendDeep;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\n\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nvar delta = require('../../constants/delta.js');\n\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\n\nvar textFontAttrs = fontAttrs({\n  editType: 'plot',\n  colorEditType: 'plot'\n});\nvar gaugeBarAttrs = {\n  color: {\n    valType: 'color',\n    editType: 'plot',\n    description: ['Sets the background color of the arc.'].join(' ')\n  },\n  line: {\n    color: {\n      valType: 'color',\n      dflt: colorAttrs.defaultLine,\n      editType: 'plot',\n      description: ['Sets the color of the line enclosing each sector.'].join(' ')\n    },\n    width: {\n      valType: 'number',\n      min: 0,\n      dflt: 0,\n      editType: 'plot',\n      description: ['Sets the width (in px) of the line enclosing each sector.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  thickness: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 1,\n    editType: 'plot',\n    description: ['Sets the thickness of the bar as a fraction of the total thickness of the gauge.'].join(' ')\n  },\n  editType: 'calc'\n};\nvar rangeAttr = {\n  valType: 'info_array',\n  items: [{\n    valType: 'number',\n    editType: 'plot'\n  }, {\n    valType: 'number',\n    editType: 'plot'\n  }],\n  editType: 'plot',\n  description: ['Sets the range of this axis.' // TODO: add support for other axis type\n  // 'If the axis `type` is *log*, then you must take the log of your',\n  // 'desired range (e.g. to set the range from 1 to 100,',\n  // 'set the range from 0 to 2).',\n  // 'If the axis `type` is *date*, it should be date strings,',\n  // 'like date data, though Date objects and unix milliseconds',\n  // 'will be accepted and converted to strings.',\n  // 'If the axis `type` is *category*, it should be numbers,',\n  // 'using the scale where each category is assigned a serial',\n  // 'number from zero in the order it appears.'\n  ].join(' ')\n};\nvar stepsAttrs = templatedArray('step', extendDeep({}, gaugeBarAttrs, {\n  range: rangeAttr\n}));\nmodule.exports = {\n  mode: {\n    valType: 'flaglist',\n    editType: 'calc',\n    flags: ['number', 'delta', 'gauge'],\n    dflt: 'number',\n    description: ['Determines how the value is displayed on the graph.', '`number` displays the value numerically in text.', '`delta` displays the difference to a reference value in text.', 'Finally, `gauge` displays the value graphically on an axis.'].join(' ')\n  },\n  value: {\n    valType: 'number',\n    editType: 'calc',\n    anim: true,\n    description: ['Sets the number to be displayed.'].join(' ')\n  },\n  align: {\n    valType: 'enumerated',\n    values: ['left', 'center', 'right'],\n    editType: 'plot',\n    description: ['Sets the horizontal alignment of the `text` within the box.', 'Note that this attribute has no effect if an angular gauge is displayed:', 'in this case, it is always centered'].join(' ')\n  },\n  // position\n  domain: domainAttrs({\n    name: 'indicator',\n    trace: true,\n    editType: 'calc'\n  }),\n  title: {\n    text: {\n      valType: 'string',\n      editType: 'plot',\n      description: ['Sets the title of this indicator.'].join(' ')\n    },\n    align: {\n      valType: 'enumerated',\n      values: ['left', 'center', 'right'],\n      editType: 'plot',\n      description: ['Sets the horizontal alignment of the title.', 'It defaults to `center` except for bullet charts', 'for which it defaults to right.'].join(' ')\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display the title'].join(' ')\n    }),\n    editType: 'plot'\n  },\n  number: {\n    valueformat: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: descriptionOnlyNumbers('value')\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display main number'].join(' ')\n    }),\n    prefix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a prefix appearing before the number.'].join(' ')\n    },\n    suffix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a suffix appearing next to the number.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  delta: {\n    reference: {\n      valType: 'number',\n      editType: 'calc',\n      description: ['Sets the reference value to compute the delta.', 'By default, it is set to the current value.'].join(' ')\n    },\n    position: {\n      valType: 'enumerated',\n      values: ['top', 'bottom', 'left', 'right'],\n      dflt: 'bottom',\n      editType: 'plot',\n      description: ['Sets the position of delta with respect to the number.'].join(' ')\n    },\n    relative: {\n      valType: 'boolean',\n      editType: 'plot',\n      dflt: false,\n      description: ['Show relative change'].join(' ')\n    },\n    valueformat: {\n      valType: 'string',\n      editType: 'plot',\n      description: descriptionOnlyNumbers('value')\n    },\n    increasing: {\n      symbol: {\n        valType: 'string',\n        dflt: delta.INCREASING.SYMBOL,\n        editType: 'plot',\n        description: ['Sets the symbol to display for increasing value'].join(' ')\n      },\n      color: {\n        valType: 'color',\n        dflt: delta.INCREASING.COLOR,\n        editType: 'plot',\n        description: ['Sets the color for increasing value.'].join(' ')\n      },\n      // TODO: add attribute to show sign\n      editType: 'plot'\n    },\n    decreasing: {\n      symbol: {\n        valType: 'string',\n        dflt: delta.DECREASING.SYMBOL,\n        editType: 'plot',\n        description: ['Sets the symbol to display for increasing value'].join(' ')\n      },\n      color: {\n        valType: 'color',\n        dflt: delta.DECREASING.COLOR,\n        editType: 'plot',\n        description: ['Sets the color for increasing value.'].join(' ')\n      },\n      // TODO: add attribute to hide sign\n      editType: 'plot'\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display the delta'].join(' ')\n    }),\n    prefix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a prefix appearing before the delta.'].join(' ')\n    },\n    suffix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a suffix appearing next to the delta.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  gauge: {\n    shape: {\n      valType: 'enumerated',\n      editType: 'plot',\n      dflt: 'angular',\n      values: ['angular', 'bullet'],\n      description: ['Set the shape of the gauge'].join(' ')\n    },\n    bar: extendDeep({}, gaugeBarAttrs, {\n      color: {\n        dflt: 'green'\n      },\n      description: ['Set the appearance of the gauge\\'s value'].join(' ')\n    }),\n    // Background of the gauge\n    bgcolor: {\n      valType: 'color',\n      editType: 'plot',\n      description: 'Sets the gauge background color.'\n    },\n    bordercolor: {\n      valType: 'color',\n      dflt: colorAttrs.defaultLine,\n      editType: 'plot',\n      description: 'Sets the color of the border enclosing the gauge.'\n    },\n    borderwidth: {\n      valType: 'number',\n      min: 0,\n      dflt: 1,\n      editType: 'plot',\n      description: 'Sets the width (in px) of the border enclosing the gauge.'\n    },\n    axis: overrideAll({\n      range: rangeAttr,\n      visible: extendFlat({}, axesAttrs.visible, {\n        dflt: true\n      }),\n      // tick and title properties named and function exactly as in axes\n      tickmode: axesAttrs.tickmode,\n      nticks: axesAttrs.nticks,\n      tick0: axesAttrs.tick0,\n      dtick: axesAttrs.dtick,\n      tickvals: axesAttrs.tickvals,\n      ticktext: axesAttrs.ticktext,\n      ticks: extendFlat({}, axesAttrs.ticks, {\n        dflt: 'outside'\n      }),\n      ticklen: axesAttrs.ticklen,\n      tickwidth: axesAttrs.tickwidth,\n      tickcolor: axesAttrs.tickcolor,\n      ticklabelstep: axesAttrs.ticklabelstep,\n      showticklabels: axesAttrs.showticklabels,\n      tickfont: fontAttrs({\n        description: 'Sets the color bar\\'s tick label font'\n      }),\n      tickangle: axesAttrs.tickangle,\n      tickformat: axesAttrs.tickformat,\n      tickformatstops: axesAttrs.tickformatstops,\n      tickprefix: axesAttrs.tickprefix,\n      showtickprefix: axesAttrs.showtickprefix,\n      ticksuffix: axesAttrs.ticksuffix,\n      showticksuffix: axesAttrs.showticksuffix,\n      separatethousands: axesAttrs.separatethousands,\n      exponentformat: axesAttrs.exponentformat,\n      minexponent: axesAttrs.minexponent,\n      showexponent: axesAttrs.showexponent,\n      editType: 'plot'\n    }, 'plot'),\n    // Steps (or ranges) and thresholds\n    steps: stepsAttrs,\n    threshold: {\n      line: {\n        color: extendFlat({}, gaugeBarAttrs.line.color, {\n          description: ['Sets the color of the threshold line.'].join(' ')\n        }),\n        width: extendFlat({}, gaugeBarAttrs.line.width, {\n          dflt: 1,\n          description: ['Sets the width (in px) of the threshold line.'].join(' ')\n        }),\n        editType: 'plot'\n      },\n      thickness: extendFlat({}, gaugeBarAttrs.thickness, {\n        dflt: 0.85,\n        description: ['Sets the thickness of the threshold line as a fraction of the thickness of the gauge.'].join(' ')\n      }),\n      value: {\n        valType: 'number',\n        editType: 'calc',\n        dflt: false,\n        description: ['Sets a treshold value drawn as a line.'].join(' ')\n      },\n      editType: 'plot'\n    },\n    description: 'The gauge of the Indicator plot.',\n    editType: 'plot' // TODO: in future version, add marker: (bar|needle)\n\n  }\n};","map":null,"metadata":{},"sourceType":"script"}