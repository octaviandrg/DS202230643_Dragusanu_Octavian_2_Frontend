{"ast":null,"code":"'use strict';\n\nmodule.exports = measure;\nmeasure.canvas = document.createElement('canvas');\nmeasure.cache = {};\n\nfunction measure(font, o) {\n  if (!o) o = {};\n\n  if (typeof font === 'string' || Array.isArray(font)) {\n    o.family = font;\n  }\n\n  var family = Array.isArray(o.family) ? o.family.join(', ') : o.family;\n  if (!family) throw Error('`family` must be defined');\n  var fs = o.size || o.fontSize || o.em || 48;\n  var weight = o.weight || o.fontWeight || '';\n  var style = o.style || o.fontStyle || '';\n  var font = [style, weight, fs].join(' ') + 'px ' + family;\n  var origin = o.origin || 'top';\n\n  if (measure.cache[family]) {\n    // return more precise values if cache has them\n    if (fs <= measure.cache[family].em) {\n      return applyOrigin(measure.cache[family], origin);\n    }\n  }\n\n  var canvas = o.canvas || measure.canvas;\n  var ctx = canvas.getContext('2d');\n  var chars = {\n    upper: o.upper !== undefined ? o.upper : 'H',\n    lower: o.lower !== undefined ? o.lower : 'x',\n    descent: o.descent !== undefined ? o.descent : 'p',\n    ascent: o.ascent !== undefined ? o.ascent : 'h',\n    tittle: o.tittle !== undefined ? o.tittle : 'i',\n    overshoot: o.overshoot !== undefined ? o.overshoot : 'O'\n  };\n  var l = Math.ceil(fs * 1.5);\n  canvas.height = l;\n  canvas.width = l * .5;\n  ctx.font = font;\n  var char = 'H';\n  var result = {\n    top: 0 // measure line-height\n\n  };\n  ctx.clearRect(0, 0, l, l);\n  ctx.textBaseline = 'top';\n  ctx.fillStyle = 'black';\n  ctx.fillText(char, 0, 0);\n  var topPx = firstTop(ctx.getImageData(0, 0, l, l));\n  ctx.clearRect(0, 0, l, l);\n  ctx.textBaseline = 'bottom';\n  ctx.fillText(char, 0, l);\n  var bottomPx = firstTop(ctx.getImageData(0, 0, l, l));\n  result.lineHeight = result.bottom = l - bottomPx + topPx; // measure baseline\n\n  ctx.clearRect(0, 0, l, l);\n  ctx.textBaseline = 'alphabetic';\n  ctx.fillText(char, 0, l);\n  var baselinePx = firstTop(ctx.getImageData(0, 0, l, l));\n  var baseline = l - baselinePx - 1 + topPx;\n  result.baseline = result.alphabetic = baseline; // measure median\n\n  ctx.clearRect(0, 0, l, l);\n  ctx.textBaseline = 'middle';\n  ctx.fillText(char, 0, l * .5);\n  var medianPx = firstTop(ctx.getImageData(0, 0, l, l));\n  result.median = result.middle = l - medianPx - 1 + topPx - l * .5; // measure hanging\n\n  ctx.clearRect(0, 0, l, l);\n  ctx.textBaseline = 'hanging';\n  ctx.fillText(char, 0, l * .5);\n  var hangingPx = firstTop(ctx.getImageData(0, 0, l, l));\n  result.hanging = l - hangingPx - 1 + topPx - l * .5; // measure ideographic\n\n  ctx.clearRect(0, 0, l, l);\n  ctx.textBaseline = 'ideographic';\n  ctx.fillText(char, 0, l);\n  var ideographicPx = firstTop(ctx.getImageData(0, 0, l, l));\n  result.ideographic = l - ideographicPx - 1 + topPx; // measure cap\n\n  if (chars.upper) {\n    ctx.clearRect(0, 0, l, l);\n    ctx.textBaseline = 'top';\n    ctx.fillText(chars.upper, 0, 0);\n    result.upper = firstTop(ctx.getImageData(0, 0, l, l));\n    result.capHeight = result.baseline - result.upper;\n  } // measure x\n\n\n  if (chars.lower) {\n    ctx.clearRect(0, 0, l, l);\n    ctx.textBaseline = 'top';\n    ctx.fillText(chars.lower, 0, 0);\n    result.lower = firstTop(ctx.getImageData(0, 0, l, l));\n    result.xHeight = result.baseline - result.lower;\n  } // measure tittle\n\n\n  if (chars.tittle) {\n    ctx.clearRect(0, 0, l, l);\n    ctx.textBaseline = 'top';\n    ctx.fillText(chars.tittle, 0, 0);\n    result.tittle = firstTop(ctx.getImageData(0, 0, l, l));\n  } // measure ascent\n\n\n  if (chars.ascent) {\n    ctx.clearRect(0, 0, l, l);\n    ctx.textBaseline = 'top';\n    ctx.fillText(chars.ascent, 0, 0);\n    result.ascent = firstTop(ctx.getImageData(0, 0, l, l));\n  } // measure descent\n\n\n  if (chars.descent) {\n    ctx.clearRect(0, 0, l, l);\n    ctx.textBaseline = 'top';\n    ctx.fillText(chars.descent, 0, 0);\n    result.descent = firstBottom(ctx.getImageData(0, 0, l, l));\n  } // measure overshoot\n\n\n  if (chars.overshoot) {\n    ctx.clearRect(0, 0, l, l);\n    ctx.textBaseline = 'top';\n    ctx.fillText(chars.overshoot, 0, 0);\n    var overshootPx = firstBottom(ctx.getImageData(0, 0, l, l));\n    result.overshoot = overshootPx - baseline;\n  } // normalize result\n\n\n  for (var name in result) {\n    result[name] /= fs;\n  }\n\n  result.em = fs;\n  measure.cache[family] = result;\n  return applyOrigin(result, origin);\n}\n\nfunction applyOrigin(obj, origin) {\n  var res = {};\n  if (typeof origin === 'string') origin = obj[origin];\n\n  for (var name in obj) {\n    if (name === 'em') continue;\n    res[name] = obj[name] - origin;\n  }\n\n  return res;\n}\n\nfunction firstTop(iData) {\n  var l = iData.height;\n  var data = iData.data;\n\n  for (var i = 3; i < data.length; i += 4) {\n    if (data[i] !== 0) {\n      return Math.floor((i - 3) * .25 / l);\n    }\n  }\n}\n\nfunction firstBottom(iData) {\n  var l = iData.height;\n  var data = iData.data;\n\n  for (var i = data.length - 1; i > 0; i -= 4) {\n    if (data[i] !== 0) {\n      return Math.floor((i - 3) * .25 / l);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}