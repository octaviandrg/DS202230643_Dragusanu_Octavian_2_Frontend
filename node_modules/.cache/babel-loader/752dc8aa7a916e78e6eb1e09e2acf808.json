{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nfunction resizeText(gd, gTrace, traceType) {\n  var fullLayout = gd._fullLayout;\n  var minSize = fullLayout['_' + traceType + 'Text_minsize'];\n\n  if (minSize) {\n    var shouldHide = fullLayout.uniformtext.mode === 'hide';\n    var selector;\n\n    switch (traceType) {\n      case 'funnelarea':\n      case 'pie':\n      case 'sunburst':\n        selector = 'g.slice';\n        break;\n\n      case 'treemap':\n      case 'icicle':\n        selector = 'g.slice, g.pathbar';\n        break;\n\n      default:\n        selector = 'g.points > g.point';\n    }\n\n    gTrace.selectAll(selector).each(function (d) {\n      var transform = d.transform;\n\n      if (transform) {\n        transform.scale = shouldHide && transform.hide ? 0 : minSize / transform.fontSize;\n        var el = d3.select(this).select('text');\n        Lib.setTransormAndDisplay(el, transform);\n      }\n    });\n  }\n}\n\nfunction recordMinTextSize(traceType, // in\ntransform, // inout\nfullLayout // inout\n) {\n  if (fullLayout.uniformtext.mode) {\n    var minKey = getMinKey(traceType);\n    var minSize = fullLayout.uniformtext.minsize;\n    var size = transform.scale * transform.fontSize;\n    transform.hide = size < minSize;\n    fullLayout[minKey] = fullLayout[minKey] || Infinity;\n\n    if (!transform.hide) {\n      fullLayout[minKey] = Math.min(fullLayout[minKey], Math.max(size, minSize));\n    }\n  }\n}\n\nfunction clearMinTextSize(traceType, // in\nfullLayout // inout\n) {\n  var minKey = getMinKey(traceType);\n  fullLayout[minKey] = undefined;\n}\n\nfunction getMinKey(traceType) {\n  return '_' + traceType + 'Text_minsize';\n}\n\nmodule.exports = {\n  recordMinTextSize: recordMinTextSize,\n  clearMinTextSize: clearMinTextSize,\n  resizeText: resizeText\n};","map":null,"metadata":{},"sourceType":"script"}