{"ast":null,"code":"'use strict';\n\nvar pathBounds = require('svg-path-bounds');\n\nvar parsePath = require('parse-svg-path');\n\nvar drawPath = require('draw-svg-path');\n\nvar isSvgPath = require('is-svg-path');\n\nvar bitmapSdf = require('bitmap-sdf');\n\nvar canvas = document.createElement('canvas');\nvar ctx = canvas.getContext('2d');\nmodule.exports = pathSdf;\n\nfunction pathSdf(path, options) {\n  if (!isSvgPath(path)) throw Error('Argument should be valid svg path string');\n  if (!options) options = {};\n  var w, h;\n\n  if (options.shape) {\n    w = options.shape[0];\n    h = options.shape[1];\n  } else {\n    w = canvas.width = options.w || options.width || 200;\n    h = canvas.height = options.h || options.height || 200;\n  }\n\n  var size = Math.min(w, h);\n  var stroke = options.stroke || 0;\n  var viewbox = options.viewbox || options.viewBox || pathBounds(path);\n  var scale = [w / (viewbox[2] - viewbox[0]), h / (viewbox[3] - viewbox[1])];\n  var maxScale = Math.min(scale[0] || 0, scale[1] || 0) / 2; //clear ctx\n\n  ctx.fillStyle = 'black';\n  ctx.fillRect(0, 0, w, h);\n  ctx.fillStyle = 'white';\n\n  if (stroke) {\n    if (typeof stroke != 'number') stroke = 1;\n\n    if (stroke > 0) {\n      ctx.strokeStyle = 'white';\n    } else {\n      ctx.strokeStyle = 'black';\n    }\n\n    ctx.lineWidth = Math.abs(stroke);\n  }\n\n  ctx.translate(w * .5, h * .5);\n  ctx.scale(maxScale, maxScale); //if canvas svg paths api is available\n\n  if (isPath2DSupported()) {\n    var path2d = new Path2D(path);\n    ctx.fill(path2d);\n    stroke && ctx.stroke(path2d);\n  } //fallback to bezier-curves\n  else {\n      var segments = parsePath(path);\n      drawPath(ctx, segments);\n      ctx.fill();\n      stroke && ctx.stroke();\n    }\n\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  var data = bitmapSdf(ctx, {\n    cutoff: options.cutoff != null ? options.cutoff : .5,\n    radius: options.radius != null ? options.radius : size * .5\n  });\n  return data;\n}\n\nvar path2DSupported;\n\nfunction isPath2DSupported() {\n  if (path2DSupported != null) return path2DSupported;\n  var ctx = document.createElement('canvas').getContext('2d');\n  ctx.canvas.width = ctx.canvas.height = 1;\n  if (!window.Path2D) return path2DSupported = false;\n  var path = new Path2D('M0,0h1v1h-1v-1Z');\n  ctx.fillStyle = 'black';\n  ctx.fill(path);\n  var idata = ctx.getImageData(0, 0, 1, 1);\n  return path2DSupported = idata && idata.data && idata.data[3] === 255;\n}","map":null,"metadata":{},"sourceType":"script"}