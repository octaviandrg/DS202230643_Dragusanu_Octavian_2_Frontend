{"ast":null,"code":"'use strict';\n\nvar scatterAttrs = require('../scatter/attributes');\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar scatterGlAttrs = require('../scattergl/attributes');\n\nvar cartesianIdRegex = require('../../plots/cartesian/constants').idRegex;\n\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\nvar markerLineAttrs = extendFlat(colorScaleAttrs('marker.line', {\n  editTypeOverride: 'calc'\n}), {\n  width: extendFlat({}, scatterMarkerLineAttrs.width, {\n    editType: 'calc'\n  }),\n  editType: 'calc'\n});\nvar markerAttrs = extendFlat(colorScaleAttrs('marker'), {\n  symbol: scatterMarkerAttrs.symbol,\n  angle: scatterMarkerAttrs.angle,\n  size: extendFlat({}, scatterMarkerAttrs.size, {\n    editType: 'markerSize'\n  }),\n  sizeref: scatterMarkerAttrs.sizeref,\n  sizemin: scatterMarkerAttrs.sizemin,\n  sizemode: scatterMarkerAttrs.sizemode,\n  opacity: scatterMarkerAttrs.opacity,\n  colorbar: scatterMarkerAttrs.colorbar,\n  line: markerLineAttrs,\n  editType: 'calc'\n});\nmarkerAttrs.color.editType = markerAttrs.cmin.editType = markerAttrs.cmax.editType = 'style';\n\nfunction makeAxesValObject(axLetter) {\n  return {\n    valType: 'info_array',\n    freeLength: true,\n    editType: 'calc',\n    items: {\n      valType: 'subplotid',\n      regex: cartesianIdRegex[axLetter],\n      editType: 'plot'\n    },\n    description: ['Sets the list of ' + axLetter + ' axes', 'corresponding to dimensions of this splom trace.', 'By default, a splom will match the first N ' + axLetter + 'axes', 'where N is the number of input dimensions.', 'Note that, in case where `diagonal.visible` is false and `showupperhalf`', 'or `showlowerhalf` is false, this splom trace will generate', 'one less x-axis and one less y-axis.'].join(' ')\n  };\n}\n\nmodule.exports = {\n  dimensions: templatedArray('dimension', {\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'calc',\n      description: ['Determines whether or not this dimension is shown on the graph.', 'Note that even visible false dimension contribute to the', 'default grid generate by this splom trace.'].join(' ')\n    },\n    label: {\n      valType: 'string',\n      editType: 'calc',\n      description: 'Sets the label corresponding to this splom dimension.'\n    },\n    values: {\n      valType: 'data_array',\n      editType: 'calc+clearAxisTypes',\n      description: 'Sets the dimension values to be plotted.'\n    },\n    axis: {\n      type: {\n        valType: 'enumerated',\n        values: ['linear', 'log', 'date', 'category'],\n        editType: 'calc+clearAxisTypes',\n        description: ['Sets the axis type for this dimension\\'s generated', 'x and y axes.', 'Note that the axis `type` values set in layout take', 'precedence over this attribute.'].join(' ')\n      },\n      // TODO make 'true' the default in v3?\n      matches: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'calc',\n        description: ['Determines whether or not the x & y axes generated by this', 'dimension match.', 'Equivalent to setting the `matches` axis attribute in the layout', 'with the correct axis id.'].join(' ')\n      },\n      editType: 'calc+clearAxisTypes'\n    },\n    // TODO should add an attribute to pin down x only vars and y only vars\n    // like https://seaborn.pydata.org/generated/seaborn.pairplot.html\n    // x_vars and y_vars\n    // maybe more axis defaulting option e.g. `showgrid: false`\n    editType: 'calc+clearAxisTypes'\n  }),\n  // mode: {}, (only 'markers' for now)\n  text: extendFlat({}, scatterGlAttrs.text, {\n    description: ['Sets text elements associated with each (x,y) pair to appear on hover.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (x,y) coordinates.'].join(' ')\n  }),\n  hovertext: extendFlat({}, scatterGlAttrs.hovertext, {\n    description: 'Same as `text`.'\n  }),\n  hovertemplate: hovertemplateAttrs(),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  marker: markerAttrs,\n  xaxes: makeAxesValObject('x'),\n  yaxes: makeAxesValObject('y'),\n  diagonal: {\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'calc',\n      description: ['Determines whether or not subplots on the diagonal are displayed.'].join(' ')\n    },\n    // type: 'scattergl' | 'histogram' | 'box' | 'violin'\n    // ...\n    // more options\n    editType: 'calc'\n  },\n  showupperhalf: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not subplots on the upper half', 'from the diagonal are displayed.'].join(' ')\n  },\n  showlowerhalf: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not subplots on the lower half', 'from the diagonal are displayed.'].join(' ')\n  },\n  selected: {\n    marker: scatterGlAttrs.selected.marker,\n    editType: 'calc'\n  },\n  unselected: {\n    marker: scatterGlAttrs.unselected.marker,\n    editType: 'calc'\n  },\n  opacity: scatterGlAttrs.opacity\n};","map":null,"metadata":{},"sourceType":"script"}