{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar Color = require('../../components/color');\n\nvar handleText = require('../bar/defaults').handleText;\n\nvar handleStyleDefaults = require('../bar/style_defaults');\n\nvar attributes = require('./attributes');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var x = coerce('x');\n  var y = coerce('y');\n  var cumulative = coerce('cumulative.enabled');\n\n  if (cumulative) {\n    coerce('cumulative.direction');\n    coerce('cumulative.currentbin');\n  }\n\n  coerce('text');\n  var textposition = coerce('textposition');\n  handleText(traceIn, traceOut, layout, coerce, textposition, {\n    moduleHasSelected: true,\n    moduleHasUnselected: true,\n    moduleHasConstrain: true,\n    moduleHasCliponaxis: true,\n    moduleHasTextangle: true,\n    moduleHasInsideanchor: true\n  });\n  coerce('hovertext');\n  coerce('hovertemplate');\n  coerce('xhoverformat');\n  coerce('yhoverformat');\n  var orientation = coerce('orientation', y && !x ? 'h' : 'v');\n  var sampleLetter = orientation === 'v' ? 'x' : 'y';\n  var aggLetter = orientation === 'v' ? 'y' : 'x';\n  var len = x && y ? Math.min(Lib.minRowLength(x) && Lib.minRowLength(y)) : Lib.minRowLength(traceOut[sampleLetter] || []);\n\n  if (!len) {\n    traceOut.visible = false;\n    return;\n  }\n\n  traceOut._length = len;\n  var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleTraceDefaults');\n  handleCalendarDefaults(traceIn, traceOut, ['x', 'y'], layout);\n  var hasAggregationData = traceOut[aggLetter];\n  if (hasAggregationData) coerce('histfunc');\n  coerce('histnorm'); // Note: bin defaults are now handled in Histogram.crossTraceDefaults\n  // autobin(x|y) are only included here to appease Plotly.validate\n\n  coerce('autobin' + sampleLetter);\n  handleStyleDefaults(traceIn, traceOut, coerce, defaultColor, layout);\n  Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n  var lineColor = (traceOut.marker.line || {}).color; // override defaultColor for error bars with defaultLine\n\n  var errorBarsSupplyDefaults = Registry.getComponentMethod('errorbars', 'supplyDefaults');\n  errorBarsSupplyDefaults(traceIn, traceOut, lineColor || Color.defaultLine, {\n    axis: 'y'\n  });\n  errorBarsSupplyDefaults(traceIn, traceOut, lineColor || Color.defaultLine, {\n    axis: 'x',\n    inherit: 'y'\n  });\n};","map":null,"metadata":{},"sourceType":"script"}