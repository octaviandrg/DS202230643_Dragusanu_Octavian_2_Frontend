{"ast":null,"code":"/*\n * @copyright 2016 Sean Connelly (@voidqk), http://syntheti.cc\n * @license MIT\n * @preserve Project Home: https://github.com/voidqk/polybooljs\n */\nvar BuildLog = require('./lib/build-log');\n\nvar Epsilon = require('./lib/epsilon');\n\nvar Intersecter = require('./lib/intersecter');\n\nvar SegmentChainer = require('./lib/segment-chainer');\n\nvar SegmentSelector = require('./lib/segment-selector');\n\nvar GeoJSON = require('./lib/geojson');\n\nvar _buildLog = false;\n\nvar _epsilon = Epsilon();\n\nvar PolyBool;\nPolyBool = {\n  // getter/setter for buildLog\n  buildLog: function buildLog(bl) {\n    if (bl === true) _buildLog = BuildLog();else if (bl === false) _buildLog = false;\n    return _buildLog === false ? false : _buildLog.list;\n  },\n  // getter/setter for epsilon\n  epsilon: function epsilon(v) {\n    return _epsilon.epsilon(v);\n  },\n  // core API\n  segments: function segments(poly) {\n    var i = Intersecter(true, _epsilon, _buildLog);\n    poly.regions.forEach(i.addRegion);\n    return {\n      segments: i.calculate(poly.inverted),\n      inverted: poly.inverted\n    };\n  },\n  combine: function combine(segments1, segments2) {\n    var i3 = Intersecter(false, _epsilon, _buildLog);\n    return {\n      combined: i3.calculate(segments1.segments, segments1.inverted, segments2.segments, segments2.inverted),\n      inverted1: segments1.inverted,\n      inverted2: segments2.inverted\n    };\n  },\n  selectUnion: function selectUnion(combined) {\n    return {\n      segments: SegmentSelector.union(combined.combined, _buildLog),\n      inverted: combined.inverted1 || combined.inverted2\n    };\n  },\n  selectIntersect: function selectIntersect(combined) {\n    return {\n      segments: SegmentSelector.intersect(combined.combined, _buildLog),\n      inverted: combined.inverted1 && combined.inverted2\n    };\n  },\n  selectDifference: function selectDifference(combined) {\n    return {\n      segments: SegmentSelector.difference(combined.combined, _buildLog),\n      inverted: combined.inverted1 && !combined.inverted2\n    };\n  },\n  selectDifferenceRev: function selectDifferenceRev(combined) {\n    return {\n      segments: SegmentSelector.differenceRev(combined.combined, _buildLog),\n      inverted: !combined.inverted1 && combined.inverted2\n    };\n  },\n  selectXor: function selectXor(combined) {\n    return {\n      segments: SegmentSelector.xor(combined.combined, _buildLog),\n      inverted: combined.inverted1 !== combined.inverted2\n    };\n  },\n  polygon: function polygon(segments) {\n    return {\n      regions: SegmentChainer(segments.segments, _epsilon, _buildLog),\n      inverted: segments.inverted\n    };\n  },\n  // GeoJSON converters\n  polygonFromGeoJSON: function polygonFromGeoJSON(geojson) {\n    return GeoJSON.toPolygon(PolyBool, geojson);\n  },\n  polygonToGeoJSON: function polygonToGeoJSON(poly) {\n    return GeoJSON.fromPolygon(PolyBool, _epsilon, poly);\n  },\n  // helper functions for common operations\n  union: function union(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectUnion);\n  },\n  intersect: function intersect(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectIntersect);\n  },\n  difference: function difference(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectDifference);\n  },\n  differenceRev: function differenceRev(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectDifferenceRev);\n  },\n  xor: function xor(poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectXor);\n  }\n};\n\nfunction operate(poly1, poly2, selector) {\n  var seg1 = PolyBool.segments(poly1);\n  var seg2 = PolyBool.segments(poly2);\n  var comb = PolyBool.combine(seg1, seg2);\n  var seg3 = selector(comb);\n  return PolyBool.polygon(seg3);\n}\n\nif (typeof window === 'object') window.PolyBool = PolyBool;\nmodule.exports = PolyBool;","map":null,"metadata":{},"sourceType":"script"}