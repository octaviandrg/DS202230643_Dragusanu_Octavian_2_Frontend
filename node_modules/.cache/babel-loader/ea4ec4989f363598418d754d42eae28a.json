{"ast":null,"code":"'use strict';\n\nvar Ternary = require('./ternary');\n\nvar getSubplotCalcData = require('../../plots/get_data').getSubplotCalcData;\n\nvar counterRegex = require('../../lib').counterRegex;\n\nvar TERNARY = 'ternary';\nexports.name = TERNARY;\nvar attr = exports.attr = 'subplot';\nexports.idRoot = TERNARY;\nexports.idRegex = exports.attrRegex = counterRegex(TERNARY);\nvar attributes = exports.attributes = {};\nattributes[attr] = {\n  valType: 'subplotid',\n  dflt: 'ternary',\n  editType: 'calc',\n  description: ['Sets a reference between this trace\\'s data coordinates and', 'a ternary subplot.', 'If *ternary* (the default value), the data refer to `layout.ternary`.', 'If *ternary2*, the data refer to `layout.ternary2`, and so on.'].join(' ')\n};\nexports.layoutAttributes = require('./layout_attributes');\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var calcData = gd.calcdata;\n  var ternaryIds = fullLayout._subplots[TERNARY];\n\n  for (var i = 0; i < ternaryIds.length; i++) {\n    var ternaryId = ternaryIds[i];\n    var ternaryCalcData = getSubplotCalcData(calcData, TERNARY, ternaryId);\n    var ternary = fullLayout[ternaryId]._subplot; // If ternary is not instantiated, create one!\n\n    if (!ternary) {\n      ternary = new Ternary({\n        id: ternaryId,\n        graphDiv: gd,\n        container: fullLayout._ternarylayer.node()\n      }, fullLayout);\n      fullLayout[ternaryId]._subplot = ternary;\n    }\n\n    ternary.plot(ternaryCalcData, fullLayout, gd._promises);\n  }\n};\n\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldTernaryKeys = oldFullLayout._subplots[TERNARY] || [];\n\n  for (var i = 0; i < oldTernaryKeys.length; i++) {\n    var oldTernaryKey = oldTernaryKeys[i];\n    var oldTernary = oldFullLayout[oldTernaryKey]._subplot;\n\n    if (!newFullLayout[oldTernaryKey] && !!oldTernary) {\n      oldTernary.plotContainer.remove();\n      oldTernary.clipDef.remove();\n      oldTernary.clipDefRelative.remove();\n      oldTernary.layers['a-title'].remove();\n      oldTernary.layers['b-title'].remove();\n      oldTernary.layers['c-title'].remove();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}