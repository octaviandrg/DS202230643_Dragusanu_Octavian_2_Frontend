{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar calcColorscale = require('../scatter/colorscale_calc');\n\nvar arraysToCalcdata = require('../scatter/arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nvar calcMarkerSize = require('../scatter/calc').calcMarkerSize;\n\nvar lookupCarpet = require('../carpet/lookup_carpetid');\n\nmodule.exports = function calc(gd, trace) {\n  var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n  if (!carpet || !carpet.visible || carpet.visible === 'legendonly') return;\n  var i; // Transfer this over from carpet before plotting since this is a necessary\n  // condition in order for cartesian to actually plot this trace:\n\n  trace.xaxis = carpet.xaxis;\n  trace.yaxis = carpet.yaxis; // make the calcdata array\n\n  var serieslen = trace._length;\n  var cd = new Array(serieslen);\n  var a, b;\n  var needsCull = false;\n\n  for (i = 0; i < serieslen; i++) {\n    a = trace.a[i];\n    b = trace.b[i];\n\n    if (isNumeric(a) && isNumeric(b)) {\n      var xy = carpet.ab2xy(+a, +b, true);\n      var visible = carpet.isVisible(+a, +b);\n      if (!visible) needsCull = true;\n      cd[i] = {\n        x: xy[0],\n        y: xy[1],\n        a: a,\n        b: b,\n        vis: visible\n      };\n    } else cd[i] = {\n      x: false,\n      y: false\n    };\n  }\n\n  trace._needsCull = needsCull;\n  cd[0].carpet = carpet;\n  cd[0].trace = trace;\n  calcMarkerSize(trace, serieslen);\n  calcColorscale(gd, trace);\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};","map":null,"metadata":{},"sourceType":"script"}