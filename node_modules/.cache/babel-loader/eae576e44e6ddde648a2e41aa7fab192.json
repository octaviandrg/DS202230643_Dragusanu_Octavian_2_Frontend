{"ast":null,"code":"'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar axesAttrs = require('../cartesian/layout_attributes');\n\nvar domainAttrs = require('../domain').attributes;\n\nvar extendFlat = require('../../lib').extendFlat;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar axisLineGridAttr = overrideAll({\n  color: axesAttrs.color,\n  showline: extendFlat({}, axesAttrs.showline, {\n    dflt: true\n  }),\n  linecolor: axesAttrs.linecolor,\n  linewidth: axesAttrs.linewidth,\n  showgrid: extendFlat({}, axesAttrs.showgrid, {\n    dflt: true\n  }),\n  gridcolor: axesAttrs.gridcolor,\n  gridwidth: axesAttrs.gridwidth,\n  griddash: axesAttrs.griddash // TODO add spike* attributes down the road\n  // should we add zeroline* attributes?\n\n}, 'plot', 'from-root');\nvar axisTickAttrs = overrideAll({\n  tickmode: axesAttrs.tickmode,\n  nticks: axesAttrs.nticks,\n  tick0: axesAttrs.tick0,\n  dtick: axesAttrs.dtick,\n  tickvals: axesAttrs.tickvals,\n  ticktext: axesAttrs.ticktext,\n  ticks: axesAttrs.ticks,\n  ticklen: axesAttrs.ticklen,\n  tickwidth: axesAttrs.tickwidth,\n  tickcolor: axesAttrs.tickcolor,\n  ticklabelstep: axesAttrs.ticklabelstep,\n  showticklabels: axesAttrs.showticklabels,\n  showtickprefix: axesAttrs.showtickprefix,\n  tickprefix: axesAttrs.tickprefix,\n  showticksuffix: axesAttrs.showticksuffix,\n  ticksuffix: axesAttrs.ticksuffix,\n  showexponent: axesAttrs.showexponent,\n  exponentformat: axesAttrs.exponentformat,\n  minexponent: axesAttrs.minexponent,\n  separatethousands: axesAttrs.separatethousands,\n  tickfont: axesAttrs.tickfont,\n  tickangle: axesAttrs.tickangle,\n  tickformat: axesAttrs.tickformat,\n  tickformatstops: axesAttrs.tickformatstops,\n  layer: axesAttrs.layer\n}, 'plot', 'from-root');\nvar radialAxisAttrs = {\n  visible: extendFlat({}, axesAttrs.visible, {\n    dflt: true\n  }),\n  type: extendFlat({}, axesAttrs.type, {\n    values: ['-', 'linear', 'log', 'date', 'category']\n  }),\n  autotypenumbers: axesAttrs.autotypenumbers,\n  autorange: extendFlat({}, axesAttrs.autorange, {\n    editType: 'plot'\n  }),\n  rangemode: {\n    valType: 'enumerated',\n    values: ['tozero', 'nonnegative', 'normal'],\n    dflt: 'tozero',\n    editType: 'calc',\n    description: ['If *tozero*`, the range extends to 0,', 'regardless of the input data', 'If *nonnegative*, the range is non-negative,', 'regardless of the input data.', 'If *normal*, the range is computed in relation to the extrema', 'of the input data (same behavior as for cartesian axes).'].join(' ')\n  },\n  range: extendFlat({}, axesAttrs.range, {\n    items: [{\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        '^autorange': false\n      }\n    }, {\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        '^autorange': false\n      }\n    }],\n    editType: 'plot'\n  }),\n  categoryorder: axesAttrs.categoryorder,\n  categoryarray: axesAttrs.categoryarray,\n  angle: {\n    valType: 'angle',\n    editType: 'plot',\n    description: ['Sets the angle (in degrees) from which the radial axis is drawn.', 'Note that by default, radial axis line on the theta=0 line', 'corresponds to a line pointing right (like what mathematicians prefer).', 'Defaults to the first `polar.sector` angle.'].join(' ')\n  },\n  side: {\n    valType: 'enumerated',\n    // TODO add 'center' for `showline: false` radial axes\n    values: ['clockwise', 'counterclockwise'],\n    dflt: 'clockwise',\n    editType: 'plot',\n    description: ['Determines on which side of radial axis line', 'the tick and tick labels appear.'].join(' ')\n  },\n  title: {\n    // radial title is not gui-editable at the moment,\n    // so it needs dflt: '', similar to carpet axes.\n    text: extendFlat({}, axesAttrs.title.text, {\n      editType: 'plot',\n      dflt: ''\n    }),\n    font: extendFlat({}, axesAttrs.title.font, {\n      editType: 'plot'\n    }),\n    // TODO\n    // - might need a 'titleside' and even 'titledirection' down the road\n    // - what about standoff ??\n    editType: 'plot'\n  },\n  hoverformat: axesAttrs.hoverformat,\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis `range`,', '`autorange`, `angle`, and `title` if in `editable: true` configuration.', 'Defaults to `polar<N>.uirevision`.'].join(' ')\n  },\n  editType: 'calc',\n  _deprecated: {\n    title: axesAttrs._deprecated.title,\n    titlefont: axesAttrs._deprecated.titlefont\n  }\n};\nextendFlat(radialAxisAttrs, // N.B. radialaxis grid lines are circular,\n// but radialaxis lines are straight from circle center to outer bound\naxisLineGridAttr, axisTickAttrs);\nvar angularAxisAttrs = {\n  visible: extendFlat({}, axesAttrs.visible, {\n    dflt: true\n  }),\n  type: {\n    valType: 'enumerated',\n    // 'linear' should maybe be called 'angle' or 'angular' here\n    // to make clear that axis here is periodic and more tightly match\n    // `thetaunit`?\n    //\n    // skip 'date' for first push\n    // no 'log' for now\n    values: ['-', 'linear', 'category'],\n    dflt: '-',\n    editType: 'calc',\n    _noTemplating: true,\n    description: ['Sets the angular axis type.', 'If *linear*, set `thetaunit` to determine the unit in which axis value are shown.', 'If *category, use `period` to set the number of integer coordinates around polar axis.'].join(' ')\n  },\n  autotypenumbers: axesAttrs.autotypenumbers,\n  categoryorder: axesAttrs.categoryorder,\n  categoryarray: axesAttrs.categoryarray,\n  thetaunit: {\n    valType: 'enumerated',\n    values: ['radians', 'degrees'],\n    dflt: 'degrees',\n    editType: 'calc',\n    description: ['Sets the format unit of the formatted *theta* values.', 'Has an effect only when `angularaxis.type` is *linear*.'].join(' ')\n  },\n  period: {\n    valType: 'number',\n    editType: 'calc',\n    min: 0,\n    description: ['Set the angular period.', 'Has an effect only when `angularaxis.type` is *category*.'].join(' ') // Examples for date axes:\n    //\n    // - period that equals the timeseries length\n    //  http://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/18-polar-coordinates/\n    // - and 1-year periods (focusing on seasonal change0\n    //  http://otexts.org/fpp2/seasonal-plots.html\n    //  https://blogs.scientificamerican.com/sa-visual/why-are-so-many-babies-born-around-8-00-a-m/\n    //  http://www.seasonaladjustment.com/2012/09/05/clock-plot-visualising-seasonality-using-r-and-ggplot2-part-3/\n    //  https://i.pinimg.com/736x/49/b9/72/49b972ccb3206a1a6d6f870dac543280.jpg\n    //  https://www.climate-lab-book.ac.uk/spirals/\n\n  },\n  direction: {\n    valType: 'enumerated',\n    values: ['counterclockwise', 'clockwise'],\n    dflt: 'counterclockwise',\n    editType: 'calc',\n    description: ['Sets the direction corresponding to positive angles.'].join(' ')\n  },\n  rotation: {\n    valType: 'angle',\n    editType: 'calc',\n    description: ['Sets that start position (in degrees) of the angular axis', 'By default, polar subplots with `direction` set to *counterclockwise*', 'get a `rotation` of *0*', 'which corresponds to due East (like what mathematicians prefer).', 'In turn, polar with `direction` set to *clockwise* get a rotation of *90*', 'which corresponds to due North (like on a compass),'].join(' ')\n  },\n  hoverformat: axesAttrs.hoverformat,\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis `rotation`.', 'Defaults to `polar<N>.uirevision`.'].join(' ')\n  },\n  editType: 'calc'\n};\nextendFlat(angularAxisAttrs, // N.B. angular grid lines are straight lines from circle center to outer bound\n// the angular line is circular bounding the polar plot area.\naxisLineGridAttr, // N.B. ticksuffix defaults to 'Â°' for angular axes with `thetaunit: 'degrees'`\naxisTickAttrs);\nmodule.exports = {\n  // TODO for x/y/zoom system for paper-based zooming:\n  // x: {},\n  // y: {},\n  // zoom: {},\n  domain: domainAttrs({\n    name: 'polar',\n    editType: 'plot'\n  }),\n  sector: {\n    valType: 'info_array',\n    items: [{\n      valType: 'number',\n      editType: 'plot'\n    }, {\n      valType: 'number',\n      editType: 'plot'\n    }],\n    dflt: [0, 360],\n    editType: 'plot',\n    description: ['Sets angular span of this polar subplot with two angles (in degrees).', 'Sector are assumed to be spanned in the counterclockwise direction', 'with *0* corresponding to rightmost limit of the polar subplot.'].join(' ')\n  },\n  hole: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 0,\n    editType: 'plot',\n    description: ['Sets the fraction of the radius to cut out of the polar subplot.'].join(' ')\n  },\n  bgcolor: {\n    valType: 'color',\n    editType: 'plot',\n    dflt: colorAttrs.background,\n    description: 'Set the background color of the subplot'\n  },\n  radialaxis: radialAxisAttrs,\n  angularaxis: angularAxisAttrs,\n  gridshape: {\n    valType: 'enumerated',\n    values: ['circular', 'linear'],\n    dflt: 'circular',\n    editType: 'plot',\n    description: ['Determines if the radial axis grid lines and angular axis line are drawn', 'as *circular* sectors or as *linear* (polygon) sectors.', 'Has an effect only when the angular axis has `type` *category*.', 'Note that `radialaxis.angle` is snapped to the angle of the closest', 'vertex when `gridshape` is *circular*', '(so that radial axis scale is the same as the data scale).'].join(' ')\n  },\n  // TODO maybe?\n  // annotations:\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis attributes,', 'if not overridden in the individual axes.', 'Defaults to `layout.uirevision`.'].join(' ')\n  },\n  editType: 'calc'\n};","map":null,"metadata":{},"sourceType":"script"}