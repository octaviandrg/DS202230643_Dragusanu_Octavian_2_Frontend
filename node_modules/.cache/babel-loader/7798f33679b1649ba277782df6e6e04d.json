{"ast":null,"code":"import _classCallCheck from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/src/client/client-container.js\";\nimport React from 'react';\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Button, Card, CardHeader, Col, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\nimport ClientUpdateForm from \"./components/client-update\";\nimport ClientDeleteForm from \"./components/client-delete\";\nimport ClientForm from \"./components/client-form\";\nimport * as API_CLIENTS from \"./api/client-api\";\nimport ClientTable from \"./components/client-table\";\n\nvar ClientContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ClientContainer, _React$Component);\n\n  function ClientContainer(props) {\n    var _this;\n\n    _classCallCheck(this, ClientContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClientContainer).call(this, props));\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleFormDelete = _this.toggleFormDelete.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleFormUpdate = _this.toggleFormUpdate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onViewClientClicked = _this.onViewClientClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reload = _this.reload.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      selected: false,\n      selectedDelete: false,\n      selectedUpdate: false,\n      collapseForm: false,\n      tableData: [],\n      isLoaded: false,\n      errorStatus: 0,\n      error: null,\n      viewClientsToggle: false\n    };\n    return _this;\n  }\n\n  _createClass(ClientContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchClients();\n    }\n  }, {\n    key: \"fetchClients\",\n    value: function fetchClients() {\n      var _this2 = this;\n\n      return API_CLIENTS.getClients(function (result, status, err) {\n        if (result !== null && status === 200) {\n          _this2.setState({\n            tableData: result,\n            isLoaded: true\n          });\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: err\n          });\n        }\n      });\n    }\n  }, {\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        selected: !this.state.selected\n      });\n    }\n  }, {\n    key: \"toggleFormDelete\",\n    value: function toggleFormDelete() {\n      this.setState({\n        selectedDelete: !this.state.selectedDelete\n      });\n    }\n  }, {\n    key: \"toggleFormUpdate\",\n    value: function toggleFormUpdate() {\n      this.setState({\n        selectedUpdate: !this.state.selectedUpdate\n      });\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      this.setState({\n        isLoaded: false,\n        selected: false,\n        selectedDelete: false,\n        selectedUpdate: false\n      }); //this.toggleForm();\n\n      this.fetchClients();\n    }\n  }, {\n    key: \"onViewClientClicked\",\n    value: function onViewClientClicked() {\n      this.setState({\n        viewClientsToggle: !this.state.viewClientsToggle\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Client\")), \"  \")), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '8',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggleForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Add Client \")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(Col, {\n        sm: {\n          size: '8',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggleFormUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Update Client \")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Col, {\n        sm: {\n          size: '8',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggleFormDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Delete Client \"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '8',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, this.state.isLoaded && React.createElement(ClientTable, {\n        tableData: this.state.tableData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })))), React.createElement(Modal, {\n        isOpen: this.state.selected,\n        toggle: this.toggleForm,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \" Add Client: \"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(ClientForm, {\n        reloadHandler: this.reload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }))), React.createElement(Modal, {\n        isOpen: this.state.selectedDelete,\n        toggle: this.toggleFormDelete,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleFormDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \" Delete Client: \"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(ClientDeleteForm, {\n        reloadHandler: this.reload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }))), React.createElement(Modal, {\n        isOpen: this.state.selectedUpdate,\n        toggle: this.toggleFormUpdate,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleFormUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \" Update Client: \"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(ClientUpdateForm, {\n        reloadHandler: this.reload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ClientContainer;\n}(React.Component);\n\nexport default ClientContainer;","map":{"version":3,"sources":["/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/src/client/client-container.js"],"names":["React","APIResponseErrorMessage","Button","Card","CardHeader","Col","Modal","ModalBody","ModalHeader","Row","ClientUpdateForm","ClientDeleteForm","ClientForm","API_CLIENTS","ClientTable","ClientContainer","props","toggleForm","bind","toggleFormDelete","toggleFormUpdate","onViewClientClicked","reload","state","selected","selectedDelete","selectedUpdate","collapseForm","tableData","isLoaded","errorStatus","error","viewClientsToggle","fetchClients","getClients","result","status","err","setState","size","offset","className","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport {\n    Button,\n    Card,\n    CardHeader,\n    Col,\n    Modal,\n    ModalBody,\n    ModalHeader,\n    Row\n} from 'reactstrap';\nimport ClientUpdateForm from \"./components/client-update\";\nimport ClientDeleteForm from \"./components/client-delete\";\nimport ClientForm from \"./components/client-form\";\n\nimport * as API_CLIENTS from \"./api/client-api\"\nimport ClientTable from \"./components/client-table\";\n\n\n\nclass ClientContainer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.toggleFormDelete = this.toggleFormDelete.bind(this);\n        this.toggleFormUpdate = this.toggleFormUpdate.bind(this);\n        this.onViewClientClicked = this.onViewClientClicked.bind(this);\n        this.reload = this.reload.bind(this);\n        this.state = {\n            selected: false,\n            selectedDelete: false,\n            selectedUpdate: false,\n            collapseForm: false,\n            tableData: [],\n            isLoaded: false,\n            errorStatus: 0,\n            error: null,\n            viewClientsToggle: false\n        };\n    }\n\n    componentDidMount() {\n        this.fetchClients();\n    }\n\n    fetchClients() {\n        return API_CLIENTS.getClients((result, status, err) => {\n\n            if (result !== null && status === 200) {\n                this.setState({\n                    tableData: result,\n                    isLoaded: true\n                });\n            } else {\n                this.setState(({\n                    errorStatus: status,\n                    error: err\n                }));\n            }\n        });\n    }\n\n    toggleForm() {\n        this.setState({selected: !this.state.selected});\n    }\n\n    toggleFormDelete() {\n        this.setState({selectedDelete: !this.state.selectedDelete});\n    }\n\n    toggleFormUpdate() {\n        this.setState({selectedUpdate: !this.state.selectedUpdate});\n    }\n\n\n    reload() {\n        this.setState({\n            isLoaded: false,\n            selected: false,\n            selectedDelete: false,\n            selectedUpdate : false,\n        });\n        //this.toggleForm();\n        this.fetchClients();\n    }\n\n    onViewClientClicked() {\n        this.setState({\n            viewClientsToggle: !this.state.viewClientsToggle\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <CardHeader>\n                    <strong><h2><center>Client</center></h2>  </strong>\n                </CardHeader>\n                <Card>\n                    <br/>\n                    <Row>\n                        <Col sm={{size: '8', offset: 1}}>\n                            <Button color=\"primary\" onClick={this.toggleForm}>Add Client </Button>\n                        </Col>\n                        <br/>\n                        <br/>\n                        <Col sm={{size: '8', offset: 1}}>\n                            <Button color=\"primary\" onClick={this.toggleFormUpdate}>Update Client </Button>\n                        </Col>\n                        <br/>\n                        <br/>\n                        <Col sm={{size: '8', offset: 1}}>\n                            <Button color=\"primary\" onClick={this.toggleFormDelete}>Delete Client </Button>\n                        </Col>\n                    </Row>\n                    <br/>\n                    <Row>\n                        <Col sm={{size: '8', offset: 1}}>\n                            {this.state.isLoaded && <ClientTable tableData = {this.state.tableData}/>}\n                            {this.state.errorStatus > 0 && <APIResponseErrorMessage\n                                errorStatus={this.state.errorStatus}\n                                error={this.state.error}\n                            />   }\n                        </Col>\n                    </Row>\n\n               \n                    \n                    \n                </Card>\n\n\n                <Modal isOpen={this.state.selected} toggle={this.toggleForm}\n                       className={this.props.className} size=\"lg\">\n                    <ModalHeader toggle={this.toggleForm}> Add Client: </ModalHeader>\n                    <ModalBody>\n                        <ClientForm reloadHandler={this.reload}/>\n                    </ModalBody>\n                </Modal>\n\n                <Modal isOpen={this.state.selectedDelete} toggle={this.toggleFormDelete}\n                       className={this.props.className} size=\"lg\">\n                    <ModalHeader toggle={this.toggleFormDelete}> Delete Client: </ModalHeader>\n                    <ModalBody>\n                        <ClientDeleteForm reloadHandler={this.reload}/>\n                    </ModalBody>\n                </Modal>\n\n                <Modal isOpen={this.state.selectedUpdate} toggle={this.toggleFormUpdate}\n                       className={this.props.className} size=\"lg\">\n                    <ModalHeader toggle={this.toggleFormUpdate}> Update Client: </ModalHeader>\n                    <ModalBody>\n                        <ClientUpdateForm reloadHandler={this.reload}/>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n\n    }\n}\n\n\nexport default ClientContainer;\n"]},"metadata":{},"sourceType":"module"}