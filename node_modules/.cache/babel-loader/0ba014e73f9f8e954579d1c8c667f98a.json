{"ast":null,"code":"'use strict';\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n/*\n * Construct a 2D array of cheater values given a, b, and a slope.\n * If\n */\n\n\nmodule.exports = function (a, b, cheaterslope) {\n  var i, j, ascal, bscal, aval, bval;\n  var data = [];\n  var na = isArrayOrTypedArray(a) ? a.length : a;\n  var nb = isArrayOrTypedArray(b) ? b.length : b;\n  var adata = isArrayOrTypedArray(a) ? a : null;\n  var bdata = isArrayOrTypedArray(b) ? b : null; // If we're using data, scale it so that for data that's just barely\n  // not evenly spaced, the switch to value-based indexing is continuous.\n  // This means evenly spaced data should look the same whether value\n  // or index cheatertype.\n\n  if (adata) {\n    ascal = (adata.length - 1) / (adata[adata.length - 1] - adata[0]) / (na - 1);\n  }\n\n  if (bdata) {\n    bscal = (bdata.length - 1) / (bdata[bdata.length - 1] - bdata[0]) / (nb - 1);\n  }\n\n  var xval;\n  var xmin = Infinity;\n  var xmax = -Infinity;\n\n  for (j = 0; j < nb; j++) {\n    data[j] = [];\n    bval = bdata ? (bdata[j] - bdata[0]) * bscal : j / (nb - 1);\n\n    for (i = 0; i < na; i++) {\n      aval = adata ? (adata[i] - adata[0]) * ascal : i / (na - 1);\n      xval = aval - bval * cheaterslope;\n      xmin = Math.min(xval, xmin);\n      xmax = Math.max(xval, xmax);\n      data[j][i] = xval;\n    }\n  } // Normalize cheater values to the 0-1 range. This comes into play when you have\n  // multiple cheater plots. After careful consideration, it seems better if cheater\n  // values are normalized to a consistent range. Otherwise one cheater affects the\n  // layout of other cheaters on the same axis.\n\n\n  var slope = 1.0 / (xmax - xmin);\n  var offset = -xmin * slope;\n\n  for (j = 0; j < nb; j++) {\n    for (i = 0; i < na; i++) {\n      data[j][i] = slope * data[j][i] + offset;\n    }\n  }\n\n  return data;\n};","map":null,"metadata":{},"sourceType":"script"}