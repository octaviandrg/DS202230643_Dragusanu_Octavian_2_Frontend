{"ast":null,"code":"/*\n * World Calendars\n * https://github.com/alexcjohnson/world-calendars\n *\n * Batch-converted from kbwood/calendars\n * Many thanks to Keith Wood and all of the contributors to the original project!\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* http://keith-wood.name/calendars.html\n   Nanakshahi calendar for jQuery v2.0.2.\n   Written by Keith Wood (wood.keith{at}optusnet.com.au) January 2016.\n   Available under the MIT (http://keith-wood.name/licence.html) license. \n   Please attribute the author if you use it. */\nvar main = require('../main');\n\nvar assign = require('object-assign');\n/** Implementation of the Nanakshahi calendar.\n    See also <a href=\"https://en.wikipedia.org/wiki/Nanakshahi_calendar\">https://en.wikipedia.org/wiki/Nanakshahi_calendar</a>.\n    @class NanakshahiCalendar\n    @param [language=''] {string} The language code (default English) for localisation. */\n\n\nfunction NanakshahiCalendar(language) {\n  this.local = this.regionalOptions[language || ''] || this.regionalOptions[''];\n}\n\nNanakshahiCalendar.prototype = new main.baseCalendar();\nvar gregorian = main.instance('gregorian');\nassign(NanakshahiCalendar.prototype, {\n  /** The calendar name.\n      @memberof NanakshahiCalendar */\n  name: 'Nanakshahi',\n\n  /** Julian date of start of Nanakshahi epoch: 14 March 1469 CE.\n      @memberof NanakshahiCalendar */\n  jdEpoch: 2257673.5,\n\n  /** Days per month in a common year.\n      @memberof NanakshahiCalendar */\n  daysPerMonth: [31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30],\n\n  /** <code>true</code> if has a year zero, <code>false</code> if not.\n      @memberof NanakshahiCalendar */\n  hasYearZero: false,\n\n  /** The minimum month number.\n      @memberof NanakshahiCalendar */\n  minMonth: 1,\n\n  /** The first month in the year.\n      @memberof NanakshahiCalendar */\n  firstMonth: 1,\n\n  /** The minimum day number.\n      @memberof NanakshahiCalendar */\n  minDay: 1,\n\n  /** Localisations for the plugin.\n      Entries are objects indexed by the language code ('' being the default US/English).\n      Each object has the following attributes.\n      @memberof NanakshahiCalendar\n      @property name {string} The calendar name.\n      @property epochs {string[]} The epoch names.\n      @property monthNames {string[]} The long names of the months of the year.\n      @property monthNamesShort {string[]} The short names of the months of the year.\n      @property dayNames {string[]} The long names of the days of the week.\n      @property dayNamesShort {string[]} The short names of the days of the week.\n      @property dayNamesMin {string[]} The minimal names of the days of the week.\n      @property dateFormat {string} The date format for this calendar.\n              See the options on <a href=\"BaseCalendar.html#formatDate\"><code>formatDate</code></a> for details.\n      @property firstDay {number} The number of the first day of the week, starting at 0.\n      @property isRTL {number} <code>true</code> if this localisation reads right-to-left. */\n  regionalOptions: {\n    // Localisations\n    '': {\n      name: 'Nanakshahi',\n      epochs: ['BN', 'AN'],\n      monthNames: ['Chet', 'Vaisakh', 'Jeth', 'Harh', 'Sawan', 'Bhadon', 'Assu', 'Katak', 'Maghar', 'Poh', 'Magh', 'Phagun'],\n      monthNamesShort: ['Che', 'Vai', 'Jet', 'Har', 'Saw', 'Bha', 'Ass', 'Kat', 'Mgr', 'Poh', 'Mgh', 'Pha'],\n      dayNames: ['Somvaar', 'Mangalvar', 'Budhvaar', 'Veervaar', 'Shukarvaar', 'Sanicharvaar', 'Etvaar'],\n      dayNamesShort: ['Som', 'Mangal', 'Budh', 'Veer', 'Shukar', 'Sanichar', 'Et'],\n      dayNamesMin: ['So', 'Ma', 'Bu', 'Ve', 'Sh', 'Sa', 'Et'],\n      digits: null,\n      dateFormat: 'dd-mm-yyyy',\n      firstDay: 0,\n      isRTL: false\n    }\n  },\n\n  /** Determine whether this date is in a leap year.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.\n      @throws Error if an invalid year or a different calendar used. */\n  leapYear: function leapYear(year) {\n    var date = this._validate(year, this.minMonth, this.minDay, main.local.invalidYear || main.regionalOptions[''].invalidYear);\n\n    return gregorian.leapYear(date.year() + (date.year() < 1 ? 1 : 0) + 1469);\n  },\n\n  /** Determine the week of the year for a date.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {number} The week of the year.\n      @throws Error if an invalid date or a different calendar used. */\n  weekOfYear: function weekOfYear(year, month, day) {\n    // Find Monday of this week starting on Monday\n    var checkDate = this.newDate(year, month, day);\n    checkDate.add(1 - (checkDate.dayOfWeek() || 7), 'd');\n    return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;\n  },\n\n  /** Retrieve the number of days in a month.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year of the month.\n      @param [month] {number} The month.\n      @return {number} The number of days in this month.\n      @throws Error if an invalid month/year or a different calendar used. */\n  daysInMonth: function daysInMonth(year, month) {\n    var date = this._validate(year, month, this.minDay, main.local.invalidMonth);\n\n    return this.daysPerMonth[date.month() - 1] + (date.month() === 12 && this.leapYear(date.year()) ? 1 : 0);\n  },\n\n  /** Determine whether this date is a week day.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to examine or the year to examine.\n      @param [month] {number} The month to examine.\n      @param [day] {number} The day to examine.\n      @return {boolean} <code>true</code> if a week day, <code>false</code> if not.\n      @throws Error if an invalid date or a different calendar used. */\n  weekDay: function weekDay(year, month, day) {\n    return (this.dayOfWeek(year, month, day) || 7) < 6;\n  },\n\n  /** Retrieve the Julian date equivalent for this date,\n      i.e. days since January 1, 4713 BCE Greenwich noon.\n      @memberof NanakshahiCalendar\n      @param year {CDate|number} The date to convert or the year to convert.\n      @param [month] {number} The month to convert.\n      @param [day] {number} The day to convert.\n      @return {number} The equivalent Julian date.\n      @throws Error if an invalid date or a different calendar used. */\n  toJD: function toJD(year, month, day) {\n    var date = this._validate(year, month, day, main.local.invalidMonth);\n\n    var year = date.year();\n\n    if (year < 0) {\n      year++;\n    } // No year zero\n\n\n    var doy = date.day();\n\n    for (var m = 1; m < date.month(); m++) {\n      doy += this.daysPerMonth[m - 1];\n    }\n\n    return doy + gregorian.toJD(year + 1468, 3, 13);\n  },\n\n  /** Create a new date from a Julian date.\n      @memberof NanakshahiCalendar\n      @param jd {number} The Julian date to convert.\n      @return {CDate} The equivalent date. */\n  fromJD: function fromJD(jd) {\n    jd = Math.floor(jd + 0.5);\n    var year = Math.floor((jd - (this.jdEpoch - 1)) / 366);\n\n    while (jd >= this.toJD(year + 1, 1, 1)) {\n      year++;\n    }\n\n    var day = jd - Math.floor(this.toJD(year, 1, 1) + 0.5) + 1;\n    var month = 1;\n\n    while (day > this.daysInMonth(year, month)) {\n      day -= this.daysInMonth(year, month);\n      month++;\n    }\n\n    return this.newDate(year, month, day);\n  }\n}); // Nanakshahi calendar implementation\n\nmain.calendars.nanakshahi = NanakshahiCalendar;","map":null,"metadata":{},"sourceType":"script"}