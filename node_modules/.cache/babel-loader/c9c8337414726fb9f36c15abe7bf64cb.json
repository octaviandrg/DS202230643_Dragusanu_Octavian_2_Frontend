{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Registry = require('../../registry');\n\nvar helpers = require('./helpers');\n\nvar attributes = require('./attributes');\n\nvar constants = require('../scatter/constants');\n\nvar subTypes = require('../scatter/subtypes');\n\nvar handleXYDefaults = require('../scatter/xy_defaults');\n\nvar handlePeriodDefaults = require('../scatter/period_defaults');\n\nvar handleMarkerDefaults = require('../scatter/marker_defaults');\n\nvar handleLineDefaults = require('../scatter/line_defaults');\n\nvar handleFillColorDefaults = require('../scatter/fillcolor_defaults');\n\nvar handleTextDefaults = require('../scatter/text_defaults');\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var isOpen = traceIn.marker ? helpers.isOpenSymbol(traceIn.marker.symbol) : false;\n  var isBubble = subTypes.isBubble(traceIn);\n  var len = handleXYDefaults(traceIn, traceOut, layout, coerce);\n\n  if (!len) {\n    traceOut.visible = false;\n    return;\n  }\n\n  handlePeriodDefaults(traceIn, traceOut, layout, coerce);\n  coerce('xhoverformat');\n  coerce('yhoverformat');\n  var defaultMode = len < constants.PTS_LINESONLY ? 'lines+markers' : 'lines';\n  coerce('text');\n  coerce('hovertext');\n  coerce('hovertemplate');\n  coerce('mode', defaultMode);\n\n  if (subTypes.hasLines(traceOut)) {\n    coerce('connectgaps');\n    handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n    coerce('line.shape');\n  }\n\n  if (subTypes.hasMarkers(traceOut)) {\n    handleMarkerDefaults(traceIn, traceOut, defaultColor, layout, coerce, {\n      noAngleRef: true,\n      noStandOff: true\n    });\n    coerce('marker.line.width', isOpen || isBubble ? 1 : 0);\n  }\n\n  if (subTypes.hasText(traceOut)) {\n    coerce('texttemplate');\n    handleTextDefaults(traceIn, traceOut, layout, coerce);\n  }\n\n  var lineColor = (traceOut.line || {}).color;\n  var markerColor = (traceOut.marker || {}).color;\n  coerce('fill');\n\n  if (traceOut.fill !== 'none') {\n    handleFillColorDefaults(traceIn, traceOut, defaultColor, coerce);\n  }\n\n  var errorBarsSupplyDefaults = Registry.getComponentMethod('errorbars', 'supplyDefaults');\n  errorBarsSupplyDefaults(traceIn, traceOut, lineColor || markerColor || defaultColor, {\n    axis: 'y'\n  });\n  errorBarsSupplyDefaults(traceIn, traceOut, lineColor || markerColor || defaultColor, {\n    axis: 'x',\n    inherit: 'y'\n  });\n  Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n};","map":null,"metadata":{},"sourceType":"script"}