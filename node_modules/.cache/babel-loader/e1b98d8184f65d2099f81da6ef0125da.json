{"ast":null,"code":"'use strict';\n\nvar Fx = require('../../components/fx');\n\nvar Lib = require('../../lib');\n\nvar constants = require('./constants');\n\nmodule.exports = function hoverPoints(pointData, xval, yval) {\n  var cd0 = pointData.cd[0];\n  var trace = cd0.trace;\n  var xa = pointData.xa;\n  var ya = pointData.ya; // Return early if not on image\n\n  if (Fx.inbox(xval - cd0.x0, xval - (cd0.x0 + cd0.w * trace.dx), 0) > 0 || Fx.inbox(yval - cd0.y0, yval - (cd0.y0 + cd0.h * trace.dy), 0) > 0) {\n    return;\n  } // Find nearest pixel's index\n\n\n  var nx = Math.floor((xval - cd0.x0) / trace.dx);\n  var ny = Math.floor(Math.abs(yval - cd0.y0) / trace.dy);\n  var pixel;\n\n  if (trace._hasZ) {\n    pixel = cd0.z[ny][nx];\n  } else if (trace._hasSource) {\n    pixel = trace._canvas.el.getContext('2d', {\n      willReadFrequently: true\n    }).getImageData(nx, ny, 1, 1).data;\n  } // return early if pixel is undefined\n\n\n  if (!pixel) return;\n  var hoverinfo = cd0.hi || trace.hoverinfo;\n  var fmtColor;\n\n  if (hoverinfo) {\n    var parts = hoverinfo.split('+');\n    if (parts.indexOf('all') !== -1) parts = ['color'];\n    if (parts.indexOf('color') !== -1) fmtColor = true;\n  }\n\n  var cr = constants.colormodel[trace.colormodel];\n  var colormodel = cr.colormodel || trace.colormodel;\n  var dims = colormodel.length;\n\n  var c = trace._scaler(pixel);\n\n  var s = cr.suffix;\n  var colorstring = [];\n\n  if (trace.hovertemplate || fmtColor) {\n    colorstring.push('[' + [c[0] + s[0], c[1] + s[1], c[2] + s[2]].join(', '));\n    if (dims === 4) colorstring.push(', ' + c[3] + s[3]);\n    colorstring.push(']');\n    colorstring = colorstring.join('');\n    pointData.extraText = colormodel.toUpperCase() + ': ' + colorstring;\n  }\n\n  var text;\n\n  if (Array.isArray(trace.hovertext) && Array.isArray(trace.hovertext[ny])) {\n    text = trace.hovertext[ny][nx];\n  } else if (Array.isArray(trace.text) && Array.isArray(trace.text[ny])) {\n    text = trace.text[ny][nx];\n  } // TODO: for color model with 3 dims, display something useful for hovertemplate `%{color[3]}`\n\n\n  var py = ya.c2p(cd0.y0 + (ny + 0.5) * trace.dy);\n  var xVal = cd0.x0 + (nx + 0.5) * trace.dx;\n  var yVal = cd0.y0 + (ny + 0.5) * trace.dy;\n  var zLabel = '[' + pixel.slice(0, trace.colormodel.length).join(', ') + ']';\n  return [Lib.extendFlat(pointData, {\n    index: [ny, nx],\n    x0: xa.c2p(cd0.x0 + nx * trace.dx),\n    x1: xa.c2p(cd0.x0 + (nx + 1) * trace.dx),\n    y0: py,\n    y1: py,\n    color: c,\n    xVal: xVal,\n    xLabelVal: xVal,\n    yVal: yVal,\n    yLabelVal: yVal,\n    zLabelVal: zLabel,\n    text: text,\n    hovertemplateLabels: {\n      'zLabel': zLabel,\n      'colorLabel': colorstring,\n      'color[0]Label': c[0] + s[0],\n      'color[1]Label': c[1] + s[1],\n      'color[2]Label': c[2] + s[2],\n      'color[3]Label': c[3] + s[3]\n    }\n  })];\n};","map":null,"metadata":{},"sourceType":"script"}