{"ast":null,"code":"'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar alignPeriod = require('../../plots/cartesian/align_period');\n\nvar arraysToCalcdata = require('./arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function calc(gd, trace) {\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var size, pos, origPos, pObj, hasPeriod, pLetter, i, cdi;\n\n  if (trace.orientation === 'h') {\n    size = xa.makeCalcdata(trace, 'x');\n    origPos = ya.makeCalcdata(trace, 'y');\n    pObj = alignPeriod(trace, ya, 'y', origPos);\n    hasPeriod = !!trace.yperiodalignment;\n    pLetter = 'y';\n  } else {\n    size = ya.makeCalcdata(trace, 'y');\n    origPos = xa.makeCalcdata(trace, 'x');\n    pObj = alignPeriod(trace, xa, 'x', origPos);\n    hasPeriod = !!trace.xperiodalignment;\n    pLetter = 'x';\n  }\n\n  pos = pObj.vals; // create the \"calculated data\" to plot\n\n  var serieslen = Math.min(pos.length, size.length);\n  var cd = new Array(serieslen); // Unlike other bar-like traces funnels do not support base attribute.\n  // bases for funnels are computed internally in a way that\n  // the mid-point of each bar are located on the axis line.\n\n  trace._base = []; // set position and size\n\n  for (i = 0; i < serieslen; i++) {\n    // treat negative values as bad numbers\n    if (size[i] < 0) size[i] = BADNUM;\n    var connectToNext = false;\n\n    if (size[i] !== BADNUM) {\n      if (i + 1 < serieslen && size[i + 1] !== BADNUM) {\n        connectToNext = true;\n      }\n    }\n\n    cdi = cd[i] = {\n      p: pos[i],\n      s: size[i],\n      cNext: connectToNext\n    };\n    trace._base[i] = -0.5 * cdi.s;\n\n    if (hasPeriod) {\n      cd[i].orig_p = origPos[i]; // used by hover\n\n      cd[i][pLetter + 'End'] = pObj.ends[i];\n      cd[i][pLetter + 'Start'] = pObj.starts[i];\n    }\n\n    if (trace.ids) {\n      cdi.id = String(trace.ids[i]);\n    } // calculate total values\n\n\n    if (i === 0) cd[0].vTotal = 0;\n    cd[0].vTotal += fixNum(cdi.s); // ratio from initial value\n\n    cdi.begR = fixNum(cdi.s) / fixNum(cd[0].s);\n  }\n\n  var prevGoodNum;\n\n  for (i = 0; i < serieslen; i++) {\n    cdi = cd[i];\n    if (cdi.s === BADNUM) continue; // ratio of total value\n\n    cdi.sumR = cdi.s / cd[0].vTotal; // ratio of previous (good) value\n\n    cdi.difR = prevGoodNum !== undefined ? cdi.s / prevGoodNum : 1;\n    prevGoodNum = cdi.s;\n  }\n\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};\n\nfunction fixNum(a) {\n  return a === BADNUM ? 0 : a;\n}","map":null,"metadata":{},"sourceType":"script"}