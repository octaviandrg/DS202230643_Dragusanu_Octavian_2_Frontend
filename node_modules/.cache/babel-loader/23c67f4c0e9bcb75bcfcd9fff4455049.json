{"ast":null,"code":"'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar alignPeriod = require('../../plots/cartesian/align_period');\n\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar arraysToCalcdata = require('./arrays_to_calcdata');\n\nvar calcSelection = require('../scatter/calc_selection');\n\nmodule.exports = function calc(gd, trace) {\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var size, pos, origPos, pObj, hasPeriod, pLetter;\n  var sizeOpts = {\n    msUTC: !!(trace.base || trace.base === 0)\n  };\n\n  if (trace.orientation === 'h') {\n    size = xa.makeCalcdata(trace, 'x', sizeOpts);\n    origPos = ya.makeCalcdata(trace, 'y');\n    pObj = alignPeriod(trace, ya, 'y', origPos);\n    hasPeriod = !!trace.yperiodalignment;\n    pLetter = 'y';\n  } else {\n    size = ya.makeCalcdata(trace, 'y', sizeOpts);\n    origPos = xa.makeCalcdata(trace, 'x');\n    pObj = alignPeriod(trace, xa, 'x', origPos);\n    hasPeriod = !!trace.xperiodalignment;\n    pLetter = 'x';\n  }\n\n  pos = pObj.vals; // create the \"calculated data\" to plot\n\n  var serieslen = Math.min(pos.length, size.length);\n  var cd = new Array(serieslen); // set position and size\n\n  for (var i = 0; i < serieslen; i++) {\n    cd[i] = {\n      p: pos[i],\n      s: size[i]\n    };\n\n    if (hasPeriod) {\n      cd[i].orig_p = origPos[i]; // used by hover\n\n      cd[i][pLetter + 'End'] = pObj.ends[i];\n      cd[i][pLetter + 'Start'] = pObj.starts[i];\n    }\n\n    if (trace.ids) {\n      cd[i].id = String(trace.ids[i]);\n    }\n  } // auto-z and autocolorscale if applicable\n\n\n  if (hasColorscale(trace, 'marker')) {\n    colorscaleCalc(gd, trace, {\n      vals: trace.marker.color,\n      containerStr: 'marker',\n      cLetter: 'c'\n    });\n  }\n\n  if (hasColorscale(trace, 'marker.line')) {\n    colorscaleCalc(gd, trace, {\n      vals: trace.marker.line.color,\n      containerStr: 'marker.line',\n      cLetter: 'c'\n    });\n  }\n\n  arraysToCalcdata(cd, trace);\n  calcSelection(cd, trace);\n  return cd;\n};","map":null,"metadata":{},"sourceType":"script"}