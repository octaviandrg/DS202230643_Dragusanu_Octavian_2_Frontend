{"ast":null,"code":"'use strict';\n\nvar pick = require('pick-by-alias');\n\nvar isSize = require('./lib/util').isSize;\n\nvar globals = a2o(require('css-global-keywords'));\nvar systems = a2o(require('css-system-font-keywords'));\nvar weights = a2o(require('css-font-weight-keywords'));\nvar styles = a2o(require('css-font-style-keywords'));\nvar stretches = a2o(require('css-font-stretch-keywords'));\nvar variants = {\n  'normal': 1,\n  'small-caps': 1\n};\nvar fams = {\n  'serif': 1,\n  'sans-serif': 1,\n  'monospace': 1,\n  'cursive': 1,\n  'fantasy': 1,\n  'system-ui': 1\n};\nvar defaults = {\n  style: 'normal',\n  variant: 'normal',\n  weight: 'normal',\n  stretch: 'normal',\n  size: '1rem',\n  lineHeight: 'normal',\n  family: 'serif'\n};\n\nmodule.exports = function stringifyFont(o) {\n  o = pick(o, {\n    style: 'style fontstyle fontStyle font-style slope distinction',\n    variant: 'variant font-variant fontVariant fontvariant var capitalization',\n    weight: 'weight w font-weight fontWeight fontweight',\n    stretch: 'stretch font-stretch fontStretch fontstretch width',\n    size: 'size s font-size fontSize fontsize height em emSize',\n    lineHeight: 'lh line-height lineHeight lineheight leading',\n    family: 'font family fontFamily font-family fontfamily type typeface face',\n    system: 'system reserved default global'\n  });\n\n  if (o.system) {\n    if (o.system) verify(o.system, systems);\n    return o.system;\n  }\n\n  verify(o.style, styles);\n  verify(o.variant, variants);\n  verify(o.weight, weights);\n  verify(o.stretch, stretches); // default root value is medium, but by default it's inherited\n\n  if (o.size == null) o.size = defaults.size;\n  if (typeof o.size === 'number') o.size += 'px';\n  if (!isSize) throw Error('Bad size value `' + o.size + '`'); // many user-agents use serif, we don't detect that for consistency\n\n  if (!o.family) o.family = defaults.family;\n\n  if (Array.isArray(o.family)) {\n    if (!o.family.length) o.family = [defaults.family];\n    o.family = o.family.map(function (f) {\n      return fams[f] ? f : '\"' + f + '\"';\n    }).join(', ');\n  } // [ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ]\n\n\n  var result = [];\n  result.push(o.style);\n  if (o.variant !== o.style) result.push(o.variant);\n  if (o.weight !== o.variant && o.weight !== o.style) result.push(o.weight);\n  if (o.stretch !== o.weight && o.stretch !== o.variant && o.stretch !== o.style) result.push(o.stretch);\n  result.push(o.size + (o.lineHeight == null || o.lineHeight === 'normal' || o.lineHeight + '' === '1' ? '' : '/' + o.lineHeight));\n  result.push(o.family);\n  return result.filter(Boolean).join(' ');\n};\n\nfunction verify(value, values) {\n  if (value && !values[value] && !globals[value]) throw Error('Unknown keyword `' + value + '`');\n  return value;\n} // ['a', 'b'] -> {a: true, b: true}\n\n\nfunction a2o(a) {\n  var o = {};\n\n  for (var i = 0; i < a.length; i++) {\n    o[a[i]] = 1;\n  }\n\n  return o;\n}","map":null,"metadata":{},"sourceType":"script"}