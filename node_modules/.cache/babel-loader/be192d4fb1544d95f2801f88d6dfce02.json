{"ast":null,"code":"import _classCallCheck from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/src/device/components/device-update.js\";\nimport React from 'react';\nimport validate from \"./validators/device-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_DEVICES from \"../api/device-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar DeviceUpdateForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DeviceUpdateForm, _React$Component);\n\n  function DeviceUpdateForm(props) {\n    var _this;\n\n    _classCallCheck(this, DeviceUpdateForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DeviceUpdateForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: true,\n      formControls: {\n        deviceId: {\n          value: '',\n          placeholder: 'Insert the device id you want to update',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 1,\n            isRequired: true\n          }\n        },\n        description: {\n          value: '',\n          placeholder: 'Description...',\n          valid: false,\n          touched: false\n        },\n        address: {\n          value: '',\n          placeholder: 'Adddress...',\n          valid: false,\n          touched: false\n        },\n        maxConsumption: {\n          value: '',\n          placeholder: 'Maximum Comsumption...',\n          valid: false,\n          touched: false\n        },\n        userId: {\n          value: '',\n          placeholder: 'User ID...',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DeviceUpdateForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"updateDevice\",\n    value: function updateDevice(device, deviceId) {\n      var _this2 = this;\n\n      return API_DEVICES.putDevice(device, deviceId, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully updated device with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var device = {\n        address: this.state.formControls.address.value,\n        description: this.state.formControls.description.value,\n        maxConsumption: this.state.formControls.maxConsumption.value,\n        userId: this.state.formControls.userId.value\n      };\n      console.log(device);\n      var deviceId = this.state.formControls.deviceId.value;\n      this.updateDevice(device, deviceId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"deviceId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"deviceIdField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \" Device ID: \"), React.createElement(Input, {\n        name: \"deviceId\",\n        id: \"deviceIdField\",\n        placeholder: this.state.formControls.deviceId.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.deviceId.value,\n        touched: this.state.formControls.deviceId.touched ? 1 : 0,\n        valid: this.state.formControls.deviceId.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), this.state.formControls.deviceId.touched && !this.state.formControls.deviceId.valid && React.createElement(\"div\", {\n        className: \"error-messagage row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \" * Id must have at least 1 characters \")), React.createElement(FormGroup, {\n        id: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"descriptionField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \" Description: \"), React.createElement(Input, {\n        name: \"description\",\n        id: \"descriptionField\",\n        placeholder: this.state.formControls.description.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.description.value,\n        touched: this.state.formControls.description.touched ? 1 : 0,\n        valid: this.state.formControls.description.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"addressField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \" Address: \"), React.createElement(Input, {\n        name: \"address\",\n        id: \"addressField\",\n        placeholder: this.state.formControls.address.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.address.value,\n        touched: this.state.formControls.address.touched ? 1 : 0,\n        valid: this.state.formControls.address.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"maxConsumption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"maxConsumptionField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \" Max Consumption: \"), React.createElement(Input, {\n        name: \"maxConsumption\",\n        id: \"maxConsumptionField\",\n        placeholder: this.state.formControls.maxConsumption.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.maxConsumption.value,\n        touched: this.state.formControls.maxConsumption.touched ? 1 : 0,\n        valid: this.state.formControls.maxConsumption.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"userId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"userIdField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \" User ID: \"), React.createElement(Input, {\n        name: \"userId\",\n        id: \"userIdField\",\n        placeholder: this.state.formControls.userId.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.userId.value,\n        touched: this.state.formControls.userId.touched ? 1 : 0,\n        valid: this.state.formControls.userId.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"  Submit \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DeviceUpdateForm;\n}(React.Component);\n\nexport default DeviceUpdateForm;","map":{"version":3,"sources":["/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/src/device/components/device-update.js"],"names":["React","validate","Button","API_DEVICES","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","DeviceUpdateForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","errorStatus","error","deviceId","placeholder","minLength","isRequired","description","address","maxConsumption","userId","handleSubmit","collapseForm","device","putDevice","result","status","console","log","updateDevice","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport validate from \"./validators/device-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_DEVICES from \"../api/device-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport {Col, Row} from \"reactstrap\";\nimport { FormGroup, Input, Label} from 'reactstrap';\n\n\n\nclass DeviceUpdateForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.reloadHandler = this.props.reloadHandler;\n\n        this.state = {\n\n            errorStatus: 0,\n            error: null,\n\n            formIsValid: true,\n\n            formControls: {\n                deviceId: {\n                    value: '',\n                    placeholder: 'Insert the device id you want to update',\n                    valid: false,\n                    touched: false,\n                    validationRules: {\n                        minLength: 1,\n                        isRequired: true\n                    }\n                },\n                description: {\n                    value: '',\n                    placeholder: 'Description...',\n                    valid: false,\n                    touched: false,\n                },\n                address: {\n                    value: '',\n                    placeholder: 'Adddress...',\n                    valid: false,\n                    touched: false,\n                },\n\n                maxConsumption: {\n                    value: '',\n                    placeholder: 'Maximum Comsumption...',\n                    valid: false,\n                    touched: false,\n                },\n                userId: {\n                    value: '',\n                    placeholder: 'User ID...',\n                    valid: false,\n                    touched: false,\n                }\n            }\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    toggleForm() {\n        this.setState({collapseForm: !this.state.collapseForm});\n    }\n\n\n    handleChange = event => {\n\n        const name = event.target.name;\n        const value = event.target.value;\n\n        const updatedControls = this.state.formControls;\n\n        const updatedFormElement = updatedControls[name];\n\n        updatedFormElement.value = value;\n        updatedFormElement.touched = true;\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n        updatedControls[name] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let updatedFormElementName in updatedControls) {\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n        }\n\n        this.setState({\n            formControls: updatedControls,\n            formIsValid: formIsValid\n        });\n\n    };\n\n    updateDevice(device, deviceId) {\n        return API_DEVICES.putDevice(device, deviceId, (result, status, error) => {\n            if (result !== null && (status === 200 || status === 201)) {\n                console.log(\"Successfully updated device with id: \" + result);\n                this.reloadHandler();\n            } else {\n                this.setState(({\n                    errorStatus: status,\n                    error: error\n                }));\n            }\n        });\n    }\n\n    handleSubmit() {\n        let device = {\n            address: this.state.formControls.address.value,\n            description: this.state.formControls.description.value,\n            maxConsumption: this.state.formControls.maxConsumption.value,\n            userId: this.state.formControls.userId.value\n        };\n\n        console.log(device);\n        const deviceId = this.state.formControls.deviceId.value;\n        this.updateDevice(device, deviceId);\n    }\n\n    render() {\n        return (\n            <div>\n\n                <FormGroup id='deviceId'>\n                    <Label for='deviceIdField'> Device ID: </Label>\n                    <Input name='deviceId' id='deviceIdField' placeholder={this.state.formControls.deviceId.placeholder}\n                           onChange={this.handleChange}\n                           defaultValue={this.state.formControls.deviceId.value}\n                           touched={this.state.formControls.deviceId.touched? 1 : 0}\n                           valid={this.state.formControls.deviceId.valid}\n                           required\n                    />\n                    {this.state.formControls.deviceId.touched && !this.state.formControls.deviceId.valid &&\n                    <div className={\"error-messagage row\"}> * Id must have at least 1 characters </div>}\n                </FormGroup>\n\n                <FormGroup id='description'>\n                    <Label for='descriptionField'> Description: </Label>\n                    <Input name='description' id='descriptionField' placeholder={this.state.formControls.description.placeholder}\n                           onChange={this.handleChange}\n                           defaultValue={this.state.formControls.description.value}\n                           touched={this.state.formControls.description.touched? 1 : 0}\n                           valid={this.state.formControls.description.valid}\n                           required\n                    />\n                </FormGroup>\n\n                <FormGroup id='address'>\n                    <Label for='addressField'> Address: </Label>\n                    <Input name='address' id='addressField' placeholder={this.state.formControls.address.placeholder}\n                           onChange={this.handleChange}\n                           defaultValue={this.state.formControls.address.value}\n                           touched={this.state.formControls.address.touched? 1 : 0}\n                           valid={this.state.formControls.address.valid}\n                           required\n                    />\n                </FormGroup>\n\n                <FormGroup id='maxConsumption'>\n                    <Label for='maxConsumptionField'> Max Consumption: </Label>\n                    <Input name='maxConsumption' id='maxConsumptionField' placeholder={this.state.formControls.maxConsumption.placeholder}\n                           onChange={this.handleChange}\n                           defaultValue={this.state.formControls.maxConsumption.value}\n                           touched={this.state.formControls.maxConsumption.touched? 1 : 0}\n                           valid={this.state.formControls.maxConsumption.valid}\n                           required\n                    />\n                </FormGroup>\n\n                <FormGroup id='userId'>\n                    <Label for='userIdField'> User ID: </Label>\n                    <Input name='userId' id='userIdField' placeholder={this.state.formControls.userId.placeholder}\n                           onChange={this.handleChange}\n                           defaultValue={this.state.formControls.userId.value}\n                           touched={this.state.formControls.userId.touched? 1 : 0}\n                           valid={this.state.formControls.userId.valid}\n                           required\n                    />\n                </FormGroup>\n\n                <Row>\n                    <Col sm={{size: '4', offset: 8}}>\n                        <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\n                    </Col>\n                </Row>\n\n                {\n                    this.state.errorStatus > 0 &&\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\n                }\n            </div>\n        ) ;\n    }\n}\n\nexport default DeviceUpdateForm;\n"]},"metadata":{},"sourceType":"module"}