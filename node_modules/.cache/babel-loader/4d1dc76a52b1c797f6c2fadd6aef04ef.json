{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar attributes = require('./attributes');\n\nvar subTypes = require('../scatter/subtypes');\n\nvar handleMarkerDefaults = require('../scatter/marker_defaults');\n\nvar mergeLength = require('../parcoords/merge_length');\n\nvar isOpenSymbol = require('../scattergl/helpers').isOpenSymbol;\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n\n  var dimensions = handleArrayContainerDefaults(traceIn, traceOut, {\n    name: 'dimensions',\n    handleItemDefaults: dimensionDefaults\n  });\n  var showDiag = coerce('diagonal.visible');\n  var showUpper = coerce('showupperhalf');\n  var showLower = coerce('showlowerhalf');\n  var dimLength = mergeLength(traceOut, dimensions, 'values');\n\n  if (!dimLength || !showDiag && !showUpper && !showLower) {\n    traceOut.visible = false;\n    return;\n  }\n\n  coerce('text');\n  coerce('hovertext');\n  coerce('hovertemplate');\n  coerce('xhoverformat');\n  coerce('yhoverformat');\n  handleMarkerDefaults(traceIn, traceOut, defaultColor, layout, coerce, {\n    noAngleRef: true,\n    noStandOff: true\n  });\n  var isOpen = isOpenSymbol(traceOut.marker.symbol);\n  var isBubble = subTypes.isBubble(traceOut);\n  coerce('marker.line.width', isOpen || isBubble ? 1 : 0);\n  handleAxisDefaults(traceIn, traceOut, layout, coerce);\n  Lib.coerceSelectionMarkerOpacity(traceOut, coerce);\n};\n\nfunction dimensionDefaults(dimIn, dimOut) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(dimIn, dimOut, attributes.dimensions, attr, dflt);\n  }\n\n  coerce('label');\n  var values = coerce('values');\n  if (!(values && values.length)) dimOut.visible = false;else coerce('visible');\n  coerce('axis.type');\n  coerce('axis.matches');\n}\n\nfunction handleAxisDefaults(traceIn, traceOut, layout, coerce) {\n  var dimensions = traceOut.dimensions;\n  var dimLength = dimensions.length;\n  var showUpper = traceOut.showupperhalf;\n  var showLower = traceOut.showlowerhalf;\n  var showDiag = traceOut.diagonal.visible;\n  var i, j;\n  var xAxesDflt = new Array(dimLength);\n  var yAxesDflt = new Array(dimLength);\n\n  for (i = 0; i < dimLength; i++) {\n    var suffix = i ? i + 1 : '';\n    xAxesDflt[i] = 'x' + suffix;\n    yAxesDflt[i] = 'y' + suffix;\n  }\n\n  var xaxes = coerce('xaxes', xAxesDflt);\n  var yaxes = coerce('yaxes', yAxesDflt); // build list of [x,y] axis corresponding to each dimensions[i],\n  // very useful for passing options to regl-splom\n\n  var diag = traceOut._diag = new Array(dimLength); // lookup for 'drawn' x|y axes, to avoid costly indexOf downstream\n\n  traceOut._xaxes = {};\n  traceOut._yaxes = {}; // list of 'drawn' x|y axes, use to generate list of subplots\n\n  var xList = [];\n  var yList = [];\n\n  function fillAxisStashes(axId, counterAxId, dim, list) {\n    if (!axId) return;\n    var axLetter = axId.charAt(0);\n    var stash = layout._splomAxes[axLetter];\n    traceOut['_' + axLetter + 'axes'][axId] = 1;\n    list.push(axId);\n\n    if (!(axId in stash)) {\n      var s = stash[axId] = {};\n\n      if (dim) {\n        s.label = dim.label || '';\n\n        if (dim.visible && dim.axis) {\n          if (dim.axis.type) s.type = dim.axis.type;\n          if (dim.axis.matches) s.matches = counterAxId;\n        }\n      }\n    }\n  } // cases where showDiag and showLower or showUpper are false\n  // no special treatment as the 'drawn' x-axes and y-axes no longer match\n  // the dimensions items and xaxes|yaxes 1-to-1\n\n\n  var mustShiftX = !showDiag && !showLower;\n  var mustShiftY = !showDiag && !showUpper;\n  traceOut._axesDim = {};\n\n  for (i = 0; i < dimLength; i++) {\n    var dim = dimensions[i];\n    var i0 = i === 0;\n    var iN = i === dimLength - 1;\n    var xaId = i0 && mustShiftX || iN && mustShiftY ? undefined : xaxes[i];\n    var yaId = i0 && mustShiftY || iN && mustShiftX ? undefined : yaxes[i];\n    fillAxisStashes(xaId, yaId, dim, xList);\n    fillAxisStashes(yaId, xaId, dim, yList);\n    diag[i] = [xaId, yaId];\n    traceOut._axesDim[xaId] = i;\n    traceOut._axesDim[yaId] = i;\n  } // fill in splom subplot keys\n\n\n  for (i = 0; i < xList.length; i++) {\n    for (j = 0; j < yList.length; j++) {\n      var id = xList[i] + yList[j];\n\n      if (i > j && showUpper) {\n        layout._splomSubplots[id] = 1;\n      } else if (i < j && showLower) {\n        layout._splomSubplots[id] = 1;\n      } else if (i === j && (showDiag || !showLower || !showUpper)) {\n        // need to include diagonal subplots when\n        // hiding one half and the diagonal\n        layout._splomSubplots[id] = 1;\n      }\n    }\n  } // when lower half is omitted, or when just the diagonal is gone,\n  // override grid default to make sure axes remain on\n  // the left/bottom of the plot area\n\n\n  if (!showLower || !showDiag && showUpper && showLower) {\n    layout._splomGridDflt.xside = 'bottom';\n    layout._splomGridDflt.yside = 'left';\n  }\n}","map":null,"metadata":{},"sourceType":"script"}