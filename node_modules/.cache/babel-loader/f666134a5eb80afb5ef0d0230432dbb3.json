{"ast":null,"code":"'use strict';\n/* eslint-disable consistent-return */\n\nvar str2arr = require('../common').str2arr;\n\nvar sliceEq = require('../common').sliceEq;\n\nvar readUInt16LE = require('../common').readUInt16LE;\n\nvar readUInt16BE = require('../common').readUInt16BE;\n\nvar readUInt32LE = require('../common').readUInt32LE;\n\nvar readUInt32BE = require('../common').readUInt32BE;\n\nvar SIG_1 = str2arr('II\\x2A\\0');\nvar SIG_2 = str2arr('MM\\0\\x2A');\n\nfunction readUInt16(buffer, offset, is_big_endian) {\n  return is_big_endian ? readUInt16BE(buffer, offset) : readUInt16LE(buffer, offset);\n}\n\nfunction readUInt32(buffer, offset, is_big_endian) {\n  return is_big_endian ? readUInt32BE(buffer, offset) : readUInt32LE(buffer, offset);\n}\n\nfunction readIFDValue(data, data_offset, is_big_endian) {\n  var type = readUInt16(data, data_offset + 2, is_big_endian);\n  var values = readUInt32(data, data_offset + 4, is_big_endian);\n  if (values !== 1 || type !== 3 && type !== 4) return null;\n\n  if (type === 3) {\n    return readUInt16(data, data_offset + 8, is_big_endian);\n  }\n\n  return readUInt32(data, data_offset + 8, is_big_endian);\n}\n\nmodule.exports = function (data) {\n  if (data.length < 8) return; // check TIFF signature\n\n  if (!sliceEq(data, 0, SIG_1) && !sliceEq(data, 0, SIG_2)) return;\n  var is_big_endian = data[0] === 77\n  /* 'MM' */\n  ;\n  var count = readUInt32(data, 4, is_big_endian) - 8;\n  if (count < 0) return; // skip until IFD\n\n  var offset = count + 8;\n  if (data.length - offset < 2) return; // read number of IFD entries\n\n  var ifd_size = readUInt16(data, offset + 0, is_big_endian) * 12;\n  if (ifd_size <= 0) return;\n  offset += 2; // read all IFD entries\n\n  if (data.length - offset < ifd_size) return;\n  var i, width, height, tag;\n\n  for (i = 0; i < ifd_size; i += 12) {\n    tag = readUInt16(data, offset + i, is_big_endian);\n\n    if (tag === 256) {\n      width = readIFDValue(data, offset + i, is_big_endian);\n    } else if (tag === 257) {\n      height = readIFDValue(data, offset + i, is_big_endian);\n    }\n  }\n\n  if (width && height) {\n    return {\n      width: width,\n      height: height,\n      type: 'tiff',\n      mime: 'image/tiff',\n      wUnits: 'px',\n      hUnits: 'px'\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}