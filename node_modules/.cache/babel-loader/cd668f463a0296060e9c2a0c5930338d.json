{"ast":null,"code":"import _assertThisInitialized from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _regeneratorRuntime from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\n\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(function () {\n    if (!document) {\n      return;\n    } // Find script tag with same src in DOM.\n\n\n    var foundScript = document.querySelector(\"script[src=\\\"\".concat(src, \"\\\"]\")); // Call onLoad if script marked as loaded.\n\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    } // Create or get existed tag.\n\n\n    var script = foundScript || document.createElement(\"script\"); // Set src if no script was found.\n\n    if (!foundScript) {\n      script.src = src;\n    } // Mark script as loaded on load event.\n\n\n    var onLoadWithMarker = function onLoadWithMarker() {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    } // Add to DOM if not yet added.\n\n\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return function () {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\n\n\nfunction useLoadGoogleCharts(param) {\n  var _param$chartVersion = param.chartVersion,\n      chartVersion = _param$chartVersion === void 0 ? \"current\" : _param$chartVersion,\n      _param$chartPackages = param.chartPackages,\n      chartPackages = _param$chartPackages === void 0 ? [\"corechart\", \"controls\"] : _param$chartPackages,\n      _param$chartLanguage = param.chartLanguage,\n      chartLanguage = _param$chartLanguage === void 0 ? \"en\" : _param$chartLanguage,\n      mapsApiKey = param.mapsApiKey;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      googleCharts = _useState2[0],\n      setGoogleCharts = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      failed = _useState4[0],\n      setFailed = _useState4[1];\n\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", function () {\n    // @ts-expect-error Getting object from global namespace.\n    var google = window === null || window === void 0 ? void 0 : window.google;\n\n    if (!google) {\n      return;\n    }\n\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey: mapsApiKey\n    });\n    google.charts.setOnLoadCallback(function () {\n      setGoogleCharts(google);\n    });\n  }, function () {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\n\n\nfunction LoadGoogleCharts(param) {\n  var onLoad = param.onLoad,\n      onError = param.onError,\n      params = _objectWithoutProperties(param, [\"onLoad\", \"onError\"]);\n\n  var _useLoadGoogleCharts = useLoadGoogleCharts(params),\n      _useLoadGoogleCharts2 = _slicedToArray(_useLoadGoogleCharts, 2),\n      googleCharts = _useLoadGoogleCharts2[0],\n      failed = _useLoadGoogleCharts2[1];\n\n  useEffect(function () {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(function () {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\n\nvar chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: function getChartWrapper() {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nvar uniqueID = 0;\n\nvar generateUniqueID = function generateUniqueID() {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\n\nvar DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\n\nvar loadDataTableFromSpreadSheet =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(googleViz, spreadSheetUrl) {\n    var urlParams,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            urlParams = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n              var queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n              var gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n              var sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n              var access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n              var urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n              var urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n\n              var query = new googleViz.visualization.Query(urlToSpreadSheet);\n              query.send(function (response) {\n                if (response.isError()) {\n                  reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n                } else {\n                  resolve(response.getDataTable());\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function loadDataTableFromSpreadSheet(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _React$createContext =\n/*#__PURE__*/\nReact.createContext(chartDefaultProps),\n    Provider = _React$createContext.Provider,\n    Consumer = _React$createContext.Consumer;\n\nvar ContextProvider = function ContextProvider(param) {\n  var children = param.children,\n      value = param.value;\n  return (\n    /*#__PURE__*/\n    React.createElement(Provider, {\n      value: value\n    }, children)\n  );\n};\n\nvar ContextConsumer = function ContextConsumer(param) {\n  var render = param.render;\n  return (\n    /*#__PURE__*/\n    React.createElement(Consumer, null, function (context) {\n      return render(context);\n    })\n  );\n};\n\nvar GRAY_COLOR = \"#CCCCCC\";\n\nvar GoogleChartDataTableInner =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GoogleChartDataTableInner, _React$Component);\n\n  _createClass(GoogleChartDataTableInner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.draw(this.props);\n      window.addEventListener(\"resize\", this.onResize);\n\n      if (this.props.legend_toggle || this.props.legendToggle) {\n        this.listenToLegendToggle();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props = this.props,\n          google = _this$props.google,\n          googleChartWrapper = _this$props.googleChartWrapper;\n      window.removeEventListener(\"resize\", this.onResize);\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.draw(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  function GoogleChartDataTableInner() {\n    var _getPrototypeOf2;\n\n    var _this2;\n\n    _classCallCheck(this, GoogleChartDataTableInner);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GoogleChartDataTableInner)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this2.state = {\n      hiddenColumns: []\n    };\n\n    _this2.listenToLegendToggle = function () {\n      var _this2$props = _this2.props,\n          google = _this2$props.google,\n          googleChartWrapper = _this2$props.googleChartWrapper;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", function () {\n        var chart = googleChartWrapper.getChart();\n        var selection = chart.getSelection();\n        var dataTable = googleChartWrapper.getDataTable();\n\n        if (selection.length === 0 || // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n\n        var columnIndex = selection[0].column;\n\n        var columnID = _this2.getColumnID(dataTable, columnIndex);\n\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          _this2.setState(function (state) {\n            return _objectSpread({}, state, {\n              hiddenColumns: _toConsumableArray(state.hiddenColumns.filter(function (colID) {\n                return colID !== columnID;\n              }))\n            });\n          });\n        } else {\n          _this2.setState(function (state) {\n            return _objectSpread({}, state, {\n              hiddenColumns: [].concat(_toConsumableArray(state.hiddenColumns), [columnID])\n            });\n          });\n        }\n      });\n    };\n\n    _this2.applyFormatters = function (dataTable, formatters) {\n      var google = _this2.props.google;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = formatters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var formatter = _step.value;\n\n          switch (formatter.type) {\n            case \"ArrowFormat\":\n              {\n                var vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n                vizFormatter.format(dataTable, formatter.column);\n                break;\n              }\n\n            case \"BarFormat\":\n              {\n                var _vizFormatter = new google.visualization.BarFormat(formatter.options);\n\n                _vizFormatter.format(dataTable, formatter.column);\n\n                break;\n              }\n\n            case \"ColorFormat\":\n              {\n                var _vizFormatter2 = new google.visualization.ColorFormat(formatter.options);\n\n                var ranges = formatter.ranges;\n                var _iteratorNormalCompletion2 = true;\n                var _didIteratorError2 = false;\n                var _iteratorError2 = undefined;\n\n                try {\n                  for (var _iterator2 = ranges[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var range = _step2.value;\n\n                    _vizFormatter2.addRange.apply(_vizFormatter2, _toConsumableArray(range));\n                  }\n                } catch (err) {\n                  _didIteratorError2 = true;\n                  _iteratorError2 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                      _iterator2.return();\n                    }\n                  } finally {\n                    if (_didIteratorError2) {\n                      throw _iteratorError2;\n                    }\n                  }\n                }\n\n                _vizFormatter2.format(dataTable, formatter.column);\n\n                break;\n              }\n\n            case \"DateFormat\":\n              {\n                var _vizFormatter3 = new google.visualization.DateFormat(formatter.options);\n\n                _vizFormatter3.format(dataTable, formatter.column);\n\n                break;\n              }\n\n            case \"NumberFormat\":\n              {\n                var _vizFormatter4 = new google.visualization.NumberFormat(formatter.options);\n\n                _vizFormatter4.format(dataTable, formatter.column);\n\n                break;\n              }\n\n            case \"PatternFormat\":\n              {\n                var _vizFormatter5 = new google.visualization.PatternFormat(formatter.options);\n\n                _vizFormatter5.format(dataTable, formatter.column);\n\n                break;\n              }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n\n    _this2.getColumnID = function (dataTable, columnIndex) {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n\n    _this2.draw =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(param) {\n        var data, diffdata, rows, columns, options, legend_toggle, legendToggle, chartType, formatters, spreadSheetUrl, spreadSheetQueryParameters, _this2$props2, google, googleChartWrapper, dataTable, chartDiff, oldData, newData, columnCount, i, columnID, previousColumnLabel, previousColumnID, previousColumnType, chart;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = param.data, diffdata = param.diffdata, rows = param.rows, columns = param.columns, options = param.options, legend_toggle = param.legend_toggle, legendToggle = param.legendToggle, chartType = param.chartType, formatters = param.formatters, spreadSheetUrl = param.spreadSheetUrl, spreadSheetQueryParameters = param.spreadSheetQueryParameters;\n                _this2$props2 = _this2.props, google = _this2$props2.google, googleChartWrapper = _this2$props2.googleChartWrapper;\n                chartDiff = null;\n\n                if (diffdata) {\n                  oldData = google.visualization.arrayToDataTable(diffdata.old);\n                  newData = google.visualization.arrayToDataTable(diffdata.new);\n                  chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n                }\n\n                if (!(data !== null)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                if (Array.isArray(data)) {\n                  dataTable = google.visualization.arrayToDataTable(data);\n                } else {\n                  dataTable = new google.visualization.DataTable(data);\n                }\n\n                _context2.next = 19;\n                break;\n\n              case 8:\n                if (!(rows && columns)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                dataTable = google.visualization.arrayToDataTable([columns].concat(_toConsumableArray(rows)));\n                _context2.next = 19;\n                break;\n\n              case 12:\n                if (!spreadSheetUrl) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.next = 15;\n                return loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n\n              case 15:\n                dataTable = _context2.sent;\n                _context2.next = 19;\n                break;\n\n              case 18:\n                dataTable = google.visualization.arrayToDataTable([]);\n\n              case 19:\n                columnCount = dataTable.getNumberOfColumns();\n\n                for (i = 0; i < columnCount; i += 1) {\n                  columnID = _this2.getColumnID(dataTable, i);\n\n                  if (_this2.state.hiddenColumns.includes(columnID)) {\n                    previousColumnLabel = dataTable.getColumnLabel(i);\n                    previousColumnID = dataTable.getColumnId(i);\n                    previousColumnType = dataTable.getColumnType(i);\n                    dataTable.removeColumn(i);\n                    dataTable.addColumn({\n                      label: previousColumnLabel,\n                      id: previousColumnID,\n                      type: previousColumnType\n                    });\n                  }\n                }\n\n                chart = googleChartWrapper.getChart();\n\n                if (googleChartWrapper.getChartType() === \"Timeline\") {\n                  chart && chart.clearChart();\n                }\n\n                googleChartWrapper.setChartType(chartType);\n                googleChartWrapper.setOptions(options || {});\n                googleChartWrapper.setDataTable(dataTable);\n                googleChartWrapper.draw();\n\n                if (_this2.props.googleChartDashboard !== null) {\n                  _this2.props.googleChartDashboard.draw(dataTable);\n                }\n\n                if (chartDiff) {\n                  googleChartWrapper.setDataTable(chartDiff);\n                  googleChartWrapper.draw();\n                }\n\n                if (formatters) {\n                  _this2.applyFormatters(dataTable, formatters);\n\n                  googleChartWrapper.setDataTable(dataTable);\n                  googleChartWrapper.draw();\n                }\n\n                if (legendToggle === true || legend_toggle === true) {\n                  _this2.grayOutHiddenColumns({\n                    options: options\n                  });\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this2.grayOutHiddenColumns = function (param) {\n      var options = param.options;\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      var dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      var columnCount = dataTable.getNumberOfColumns();\n      var hasAHiddenColumn = _this2.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      var colors = Array.from({\n        length: columnCount - 1\n      }).map(function (dontcare, i) {\n        var columnID = _this2.getColumnID(dataTable, i + 1);\n\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions(_objectSpread({}, options, {\n        colors: colors\n      }));\n      googleChartWrapper.draw();\n    };\n\n    _this2.onResize = function () {\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      googleChartWrapper.draw();\n    };\n\n    return _this2;\n  }\n\n  return GoogleChartDataTableInner;\n}(React.Component);\n\nvar GoogleChartDataTable =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(GoogleChartDataTable, _React$Component2);\n\n  function GoogleChartDataTable() {\n    _classCallCheck(this, GoogleChartDataTable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GoogleChartDataTable).apply(this, arguments));\n  }\n\n  _createClass(GoogleChartDataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          google = _this$props2.google,\n          googleChartWrapper = _this$props2.googleChartWrapper,\n          googleChartDashboard = _this$props2.googleChartDashboard;\n      return (\n        /*#__PURE__*/\n        React.createElement(ContextConsumer, {\n          render: function render(props) {\n            return (\n              /*#__PURE__*/\n              React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n                google: google,\n                googleChartWrapper: googleChartWrapper,\n                googleChartDashboard: googleChartDashboard\n              }))\n            );\n          }\n        })\n      );\n    }\n  }]);\n\n  return GoogleChartDataTable;\n}(React.Component);\n\nvar GoogleChartEvents =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(GoogleChartEvents, _React$Component3);\n\n  function GoogleChartEvents() {\n    _classCallCheck(this, GoogleChartEvents);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GoogleChartEvents).apply(this, arguments));\n  }\n\n  _createClass(GoogleChartEvents, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"listenToEvents\",\n    value: function listenToEvents(param) {\n      var _this3 = this;\n\n      var chartEvents = param.chartEvents,\n          google = param.google,\n          googleChartWrapper = param.googleChartWrapper;\n\n      if (!chartEvents) {\n        return;\n      }\n\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var event = _step3.value;\n          _this = _this3;\n          var eventName = event.eventName,\n              callback = event.callback;\n          google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            callback({\n              chartWrapper: googleChartWrapper,\n              props: _this.props,\n              google: google,\n              eventArgs: args\n            });\n          });\n        };\n\n        for (var _iterator3 = chartEvents[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _this;\n\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props3 = this.props,\n          google = _this$props3.google,\n          googleChartWrapper = _this$props3.googleChartWrapper;\n      return (\n        /*#__PURE__*/\n        React.createElement(ContextConsumer, {\n          render: function render(propsFromContext) {\n            _this4.listenToEvents({\n              chartEvents: propsFromContext.chartEvents || null,\n              google: google,\n              googleChartWrapper: googleChartWrapper\n            });\n\n            return null;\n          }\n        })\n      );\n    }\n  }]);\n\n  return GoogleChartEvents;\n}(React.Component);\n\nvar controlCounter = 0;\n\nvar GoogleChart =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(GoogleChart, _React$Component4);\n\n  _createClass(GoogleChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          options = _this$props4.options,\n          google = _this$props4.google,\n          chartType = _this$props4.chartType,\n          chartWrapperParams = _this$props4.chartWrapperParams,\n          toolbarItems = _this$props4.toolbarItems,\n          getChartEditor = _this$props4.getChartEditor,\n          getChartWrapper = _this$props4.getChartWrapper;\n\n      var chartConfig = _objectSpread({\n        chartType: chartType,\n        options: options,\n        containerId: this.getGraphID()\n      }, chartWrapperParams);\n\n      var googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n      googleChartWrapper.setOptions(options || {});\n\n      if (getChartWrapper) {\n        getChartWrapper(googleChartWrapper, google);\n      }\n\n      var googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n      var googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n\n      if (toolbarItems) {\n        google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n      }\n\n      var googleChartEditor = null;\n\n      if (getChartEditor) {\n        googleChartEditor = new google.visualization.ChartEditor();\n        getChartEditor({\n          chartEditor: googleChartEditor,\n          chartWrapper: googleChartWrapper,\n          google: google\n        });\n      }\n\n      this.setState({\n        googleChartEditor: googleChartEditor,\n        googleChartControls: googleChartControls,\n        googleChartDashboard: googleChartDashboard,\n        googleChartWrapper: googleChartWrapper,\n        isReady: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this.state.googleChartWrapper) return;\n      if (!this.state.googleChartDashboard) return;\n      if (!this.state.googleChartControls) return;\n      var controls = this.props.controls;\n\n      if (controls) {\n        for (var i = 0; i < controls.length; i += 1) {\n          var _controls$i = controls[i],\n              controlType = _controls$i.controlType,\n              options = _controls$i.options,\n              controlWrapperParams = _controls$i.controlWrapperParams;\n\n          if (controlWrapperParams && \"state\" in controlWrapperParams) {\n            this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n          }\n\n          this.state.googleChartControls[i].control.setOptions(options);\n          this.state.googleChartControls[i].control.setControlType(controlType);\n        }\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          width = _this$props5.width,\n          height = _this$props5.height,\n          options = _this$props5.options,\n          style = _this$props5.style;\n\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n\n      if (this.props.render) {\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", {\n            ref: this.dashboard_ref,\n            style: divStyle\n          },\n          /*#__PURE__*/\n          React.createElement(\"div\", {\n            ref: this.toolbar_ref,\n            id: \"toolbar\"\n          }), this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar\n          }))\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", {\n            ref: this.dashboard_ref,\n            style: divStyle\n          }, this.renderControl(function (param) {\n            var controlProp = param.controlProp;\n            return controlProp.controlPosition !== \"bottom\";\n          }), this.renderChart(), this.renderControl(function (param) {\n            var controlProp = param.controlProp;\n            return controlProp.controlPosition === \"bottom\";\n          }), this.renderToolBar())\n        );\n      }\n    }\n  }]);\n\n  function GoogleChart() {\n    var _this5;\n\n    for (var _len3 = arguments.length, args1 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args1[_key3] = arguments[_key3];\n    }\n\n    _classCallCheck(this, GoogleChart);\n\n    var _this1;\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(GoogleChart).call(this)), _this1 = _assertThisInitialized(_assertThisInitialized(_this5));\n    _this5.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    _this5.graphID = null;\n    _this5.dashboard_ref =\n    /*#__PURE__*/\n    React.createRef();\n    _this5.toolbar_ref =\n    /*#__PURE__*/\n    React.createRef();\n\n    _this5.getGraphID = function () {\n      var _this5$props = _this5.props,\n          graphID = _this5$props.graphID,\n          graph_id = _this5$props.graph_id;\n      var instanceGraphID;\n\n      if (!graphID && !graph_id) {\n        if (!_this5.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = _this5.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n\n      _this5.graphID = instanceGraphID;\n      return _this5.graphID;\n    };\n\n    _this5.getControlID = function (id, index) {\n      controlCounter += 1;\n      var controlID;\n\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n\n      return controlID;\n    };\n\n    _this5.addControls = function (googleChartWrapper, googleChartDashboard) {\n      var _this5$props2 = _this5.props,\n          google = _this5$props2.google,\n          controls = _this5$props2.controls;\n      var googleChartControls = !controls ? null : controls.map(function (control, i) {\n        var controlIDMaybe = control.controlID,\n            controlType = control.controlType,\n            controlOptions = control.options,\n            controlWrapperParams = control.controlWrapperParams;\n\n        var controlID = _this5.getControlID(controlIDMaybe, i);\n\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper(_objectSpread({\n            containerId: controlID,\n            controlType: controlType,\n            options: controlOptions\n          }, controlWrapperParams))\n        };\n      });\n\n      if (!googleChartControls) {\n        return null;\n      }\n\n      googleChartDashboard.bind(googleChartControls.map(function (param) {\n        var control = param.control;\n        return control;\n      }), googleChartWrapper);\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        var _loop2 = function _loop2() {\n          var chartControl = _step4.value;\n          var control = chartControl.control,\n              controlProp = chartControl.controlProp;\n          var _controlProp$controlE = controlProp.controlEvents,\n              controlEvents = _controlProp$controlE === void 0 ? [] : _controlProp$controlE;\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            var _loop3 = function _loop3() {\n              var event = _step5.value;\n              _this = _assertThisInitialized(_assertThisInitialized(_this5));\n              var callback = event.callback,\n                  eventName = event.eventName;\n              google.visualization.events.removeListener(control, eventName, callback);\n              google.visualization.events.addListener(control, eventName, function () {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n\n                callback({\n                  chartWrapper: googleChartWrapper,\n                  controlWrapper: control,\n                  props: _this.props,\n                  google: google,\n                  eventArgs: args\n                });\n              });\n            };\n\n            for (var _iterator5 = controlEvents[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              _loop3();\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        };\n\n        for (var _iterator4 = googleChartControls[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _this;\n\n          _loop2();\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      return googleChartControls;\n    };\n\n    _this5.renderChart = function () {\n      var _this5$props3 = _this5.props,\n          width = _this5$props3.width,\n          height = _this5$props3.height,\n          options = _this5$props3.options,\n          style = _this5$props3.style,\n          className = _this5$props3.className,\n          rootProps = _this5$props3.rootProps,\n          google = _this5$props3.google;\n\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", Object.assign({\n          id: _this5.getGraphID(),\n          style: divStyle,\n          className: className\n        }, rootProps), _this5.state.isReady && _this5.state.googleChartWrapper !== null ?\n        /*#__PURE__*/\n        React.createElement(React.Fragment, null,\n        /*#__PURE__*/\n        React.createElement(GoogleChartDataTable, {\n          googleChartWrapper: _this5.state.googleChartWrapper,\n          google: google,\n          googleChartDashboard: _this5.state.googleChartDashboard\n        }),\n        /*#__PURE__*/\n        React.createElement(GoogleChartEvents, {\n          googleChartWrapper: _this5.state.googleChartWrapper,\n          google: google\n        })) : null)\n      );\n    };\n\n    _this5.renderControl = function () {\n      var filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function (param) {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ?\n      /*#__PURE__*/\n      React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(function (param) {\n        var controlProp = param.controlProp,\n            control = param.control;\n        return filter({\n          control: control,\n          controlProp: controlProp\n        });\n      }).map(function (param) {\n        var control = param.control,\n            controlProp = param.controlProp;\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", {\n            key: control.getContainerId(),\n            id: control.getContainerId()\n          })\n        );\n      })) : null;\n    };\n\n    _this5.renderToolBar = function () {\n      if (!_this5.props.toolbarItems) return null;\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          ref: _this5.toolbar_ref\n        })\n      );\n    };\n\n    return _this5;\n  }\n\n  return GoogleChart;\n}(React.Component);\n\nvar Chart$1 =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(Chart$1, _React$Component5);\n\n  _createClass(Chart$1, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          chartLanguage = _this$props6.chartLanguage,\n          chartPackages = _this$props6.chartPackages,\n          chartVersion = _this$props6.chartVersion,\n          mapsApiKey = _this$props6.mapsApiKey,\n          loader = _this$props6.loader,\n          errorElement = _this$props6.errorElement;\n      return (\n        /*#__PURE__*/\n        React.createElement(ContextProvider, {\n          value: this.props\n        }, this.state.loadingStatus === \"ready\" && this.state.google !== null ?\n        /*#__PURE__*/\n        React.createElement(GoogleChart, Object.assign({}, this.props, {\n          google: this.state.google\n        })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader,\n        /*#__PURE__*/\n        React.createElement(LoadGoogleCharts, {\n          chartLanguage: chartLanguage,\n          chartPackages: chartPackages,\n          chartVersion: chartVersion,\n          mapsApiKey: mapsApiKey,\n          onLoad: this.onLoad,\n          onError: this.onError\n        }))\n      );\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"isFullyLoaded\",\n    value: function isFullyLoaded(google) {\n      var _this$props7 = this.props,\n          controls = _this$props7.controls,\n          toolbarItems = _this$props7.toolbarItems,\n          getChartEditor = _this$props7.getChartEditor;\n      return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n    }\n  }]);\n\n  function Chart$1() {\n    var _getPrototypeOf3;\n\n    var _this6;\n\n    _classCallCheck(this, Chart$1);\n\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    _this6 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(Chart$1)).call.apply(_getPrototypeOf3, [this].concat(args)));\n    _this6._isMounted = false;\n    _this6.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n\n    _this6.onLoad = function (google1) {\n      if (_this6.props.onLoad) {\n        _this6.props.onLoad(google1);\n      }\n\n      if (_this6.isFullyLoaded(google1)) {\n        _this6.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        var id = setInterval(function () {\n          var google = window.google;\n\n          if (_this6._isMounted) {\n            if (google && _this6.isFullyLoaded(google)) {\n              clearInterval(id);\n\n              _this6.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n\n    _this6.onSuccess = function (google) {\n      _this6.setState({\n        loadingStatus: \"ready\",\n        google: google\n      });\n    };\n\n    _this6.onError = function () {\n      _this6.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n\n    return _this6;\n  }\n\n  return Chart$1;\n}(React.Component);\n\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\n\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":null,"metadata":{},"sourceType":"module"}