{"ast":null,"code":"'use strict';\n\nmodule.exports = function (arrays, asmoothing, bsmoothing) {\n  if (asmoothing && bsmoothing) {\n    return function (out, i0, j0, u, v) {\n      if (!out) out = [];\n      var f0, f1, f2, f3, ak, k; // Since it's a grid of control points, the actual indices are * 3:\n\n      i0 *= 3;\n      j0 *= 3; // Precompute some numbers:\n\n      var u2 = u * u;\n      var u3 = u2 * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ou3 = ou2 * ou;\n      var v2 = v * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ovv2 = ov * v * 2;\n      var a = -3 * ov2;\n      var b = 3 * (ov2 - ovv2);\n      var c = 3 * (ovv2 - v2);\n      var d = 3 * v2;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k]; // Compute the derivatives in the v-direction:\n\n        f0 = a * ak[j0][i0] + b * ak[j0 + 1][i0] + c * ak[j0 + 2][i0] + d * ak[j0 + 3][i0];\n        f1 = a * ak[j0][i0 + 1] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 2][i0 + 1] + d * ak[j0 + 3][i0 + 1];\n        f2 = a * ak[j0][i0 + 2] + b * ak[j0 + 1][i0 + 2] + c * ak[j0 + 2][i0 + 2] + d * ak[j0 + 3][i0 + 2];\n        f3 = a * ak[j0][i0 + 3] + b * ak[j0 + 1][i0 + 3] + c * ak[j0 + 2][i0 + 3] + d * ak[j0 + 3][i0 + 3]; // Now just interpolate in the v-direction since it's all separable:\n\n        out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3;\n      }\n\n      return out;\n    };\n  } else if (asmoothing) {\n    // Handle smooth in the a-direction but linear in the b-direction by performing four\n    // linear interpolations followed by one cubic interpolation of the result\n    return function (out, i0, j0, v, u) {\n      if (!out) out = [];\n      var f0, f1, f2, f3, k, ak;\n      i0 *= 3;\n      var u2 = u * u;\n      var u3 = u2 * u;\n      var ou = 1 - u;\n      var ou2 = ou * ou;\n      var ou3 = ou2 * ou;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ak[j0 + 1][i0] - ak[j0][i0];\n        f1 = ak[j0 + 1][i0 + 1] - ak[j0][i0 + 1];\n        f2 = ak[j0 + 1][i0 + 2] - ak[j0][i0 + 2];\n        f3 = ak[j0 + 1][i0 + 3] - ak[j0][i0 + 3];\n        out[k] = ou3 * f0 + 3 * (ou2 * u * f1 + ou * u2 * f2) + u3 * f3; // mathematically equivalent:\n        // f0 = ou3 * ak[j0    ][i0] + 3 * (ou2 * u * ak[j0    ][i0 + 1] + ou * u2 * ak[j0    ][i0 + 2]) + u3 * ak[j0    ][i0 + 3];\n        // f1 = ou3 * ak[j0 + 1][i0] + 3 * (ou2 * u * ak[j0 + 1][i0 + 1] + ou * u2 * ak[j0 + 1][i0 + 2]) + u3 * ak[j0 + 1][i0 + 3];\n        // out[k] = f1 - f0;\n      }\n\n      return out;\n    };\n  } else if (bsmoothing) {\n    // Same as the above case, except reversed:\n\n    /* eslint-disable no-unused-vars */\n    return function (out, i0, j0, u, v) {\n      /* eslint-enable no-unused-vars */\n      if (!out) out = [];\n      var f0, f1, k, ak;\n      j0 *= 3;\n      var ou = 1 - u;\n      var v2 = v * v;\n      var ov = 1 - v;\n      var ov2 = ov * ov;\n      var ovv2 = ov * v * 2;\n      var a = -3 * ov2;\n      var b = 3 * (ov2 - ovv2);\n      var c = 3 * (ovv2 - v2);\n      var d = 3 * v2;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = a * ak[j0][i0] + b * ak[j0 + 1][i0] + c * ak[j0 + 2][i0] + d * ak[j0 + 3][i0];\n        f1 = a * ak[j0][i0 + 1] + b * ak[j0 + 1][i0 + 1] + c * ak[j0 + 2][i0 + 1] + d * ak[j0 + 3][i0 + 1];\n        out[k] = ou * f0 + u * f1;\n      }\n\n      return out;\n    };\n  } else {\n    // Finally, both directions are linear:\n\n    /* eslint-disable no-unused-vars */\n    return function (out, i0, j0, v, u) {\n      /* eslint-enable no-unused-vars */\n      if (!out) out = [];\n      var f0, f1, k, ak;\n      var ov = 1 - v;\n\n      for (k = 0; k < arrays.length; k++) {\n        ak = arrays[k];\n        f0 = ak[j0 + 1][i0] - ak[j0][i0];\n        f1 = ak[j0 + 1][i0 + 1] - ak[j0][i0 + 1];\n        out[k] = ov * f0 + v * f1;\n      }\n\n      return out;\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}