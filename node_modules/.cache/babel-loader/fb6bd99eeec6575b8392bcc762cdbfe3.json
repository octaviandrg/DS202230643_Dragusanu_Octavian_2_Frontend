{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nmodule.exports = {\n  domain: domainAttrs({\n    name: 'parcoords',\n    trace: true,\n    editType: 'plot'\n  }),\n  labelangle: {\n    valType: 'angle',\n    dflt: 0,\n    editType: 'plot',\n    description: ['Sets the angle of the labels with respect to the horizontal.', 'For example, a `tickangle` of -90 draws the labels vertically.', 'Tilted labels with *labelangle* may be positioned better', 'inside margins when `labelposition` is set to *bottom*.'].join(' ')\n  },\n  labelside: {\n    valType: 'enumerated',\n    values: ['top', 'bottom'],\n    dflt: 'top',\n    editType: 'plot',\n    description: ['Specifies the location of the `label`.', '*top* positions labels above, next to the title', '*bottom* positions labels below the graph', 'Tilted labels with *labelangle* may be positioned better', 'inside margins when `labelposition` is set to *bottom*.'].join(' ')\n  },\n  labelfont: fontAttrs({\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` labels.'\n  }),\n  tickfont: fontAttrs({\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` tick values.'\n  }),\n  rangefont: fontAttrs({\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` range values.'\n  }),\n  dimensions: templatedArray('dimension', {\n    label: {\n      valType: 'string',\n      editType: 'plot',\n      description: 'The shown name of the dimension.'\n    },\n    // TODO: better way to determine ordinal vs continuous axes,\n    // so users can use tickvals/ticktext with a continuous axis.\n    tickvals: extendFlat({}, axesAttrs.tickvals, {\n      editType: 'plot',\n      description: ['Sets the values at which ticks on this axis appear.'].join(' ')\n    }),\n    ticktext: extendFlat({}, axesAttrs.ticktext, {\n      editType: 'plot',\n      description: ['Sets the text displayed at the ticks position via `tickvals`.'].join(' ')\n    }),\n    tickformat: extendFlat({}, axesAttrs.tickformat, {\n      editType: 'plot'\n    }),\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n    },\n    range: {\n      valType: 'info_array',\n      items: [{\n        valType: 'number',\n        editType: 'plot'\n      }, {\n        valType: 'number',\n        editType: 'plot'\n      }],\n      editType: 'plot',\n      description: ['The domain range that represents the full, shown axis extent. Defaults to the `values` extent.', 'Must be an array of `[fromValue, toValue]` with finite numbers as elements.'].join(' ')\n    },\n    constraintrange: {\n      valType: 'info_array',\n      freeLength: true,\n      dimensions: '1-2',\n      items: [{\n        valType: 'any',\n        editType: 'plot'\n      }, {\n        valType: 'any',\n        editType: 'plot'\n      }],\n      editType: 'plot',\n      description: ['The domain range to which the filter on the dimension is constrained. Must be an array', 'of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not', 'disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.'].join(' ')\n    },\n    multiselect: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: 'Do we allow multiple selection ranges or just a single range?'\n    },\n    values: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Dimension values. `values[n]` represents the value of the `n`th point in the dataset,', 'therefore the `values` vector for all dimensions must be the same (longer vectors', 'will be truncated). Each value must be a finite number.'].join(' ')\n    },\n    editType: 'calc',\n    description: 'The dimensions (variables) of the parallel coordinates chart. 2..60 dimensions are supported.'\n  }),\n  line: extendFlat({\n    editType: 'calc'\n  }, colorScaleAttrs('line', {\n    // the default autocolorscale isn't quite usable for parcoords due to context ambiguity around 0 (grey, off-white)\n    // autocolorscale therefore defaults to false too, to avoid being overridden by the blue-white-red autocolor palette\n    colorscaleDflt: 'Viridis',\n    autoColorDflt: false,\n    editTypeOverride: 'calc'\n  })),\n  unselected: {\n    line: {\n      color: {\n        valType: 'color',\n        dflt: '#7f7f7f',\n        editType: 'plot',\n        description: ['Sets the base color of unselected lines.', 'in connection with `unselected.line.opacity`.'].join(' ')\n      },\n      opacity: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 'auto',\n        editType: 'plot',\n        description: ['Sets the opacity of unselected lines.', 'The default *auto* decreases the opacity smoothly as the number of lines increases.', 'Use *1* to achieve exact `unselected.line.color`.'].join(' ')\n      },\n      editType: 'plot'\n    },\n    editType: 'plot'\n  }\n};","map":null,"metadata":{},"sourceType":"script"}