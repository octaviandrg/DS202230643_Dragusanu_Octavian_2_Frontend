{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib'); // arrayOk attributes, merge them into calcdata array\n\n\nmodule.exports = function arraysToCalcdata(cd, trace) {\n  // so each point knows which index it originally came from\n  for (var i = 0; i < cd.length; i++) {\n    cd[i].i = i;\n  }\n\n  Lib.mergeArray(trace.text, cd, 'tx');\n  Lib.mergeArray(trace.texttemplate, cd, 'txt');\n  Lib.mergeArray(trace.hovertext, cd, 'htx');\n  Lib.mergeArray(trace.customdata, cd, 'data');\n  Lib.mergeArray(trace.textposition, cd, 'tp');\n\n  if (trace.textfont) {\n    Lib.mergeArrayCastPositive(trace.textfont.size, cd, 'ts');\n    Lib.mergeArray(trace.textfont.color, cd, 'tc');\n    Lib.mergeArray(trace.textfont.family, cd, 'tf');\n  }\n\n  var marker = trace.marker;\n\n  if (marker) {\n    Lib.mergeArrayCastPositive(marker.size, cd, 'ms');\n    Lib.mergeArrayCastPositive(marker.opacity, cd, 'mo');\n    Lib.mergeArray(marker.symbol, cd, 'mx');\n    Lib.mergeArray(marker.angle, cd, 'ma');\n    Lib.mergeArray(marker.standoff, cd, 'mf');\n    Lib.mergeArray(marker.color, cd, 'mc');\n    var markerLine = marker.line;\n\n    if (marker.line) {\n      Lib.mergeArray(markerLine.color, cd, 'mlc');\n      Lib.mergeArrayCastPositive(markerLine.width, cd, 'mlw');\n    }\n\n    var markerGradient = marker.gradient;\n\n    if (markerGradient && markerGradient.type !== 'none') {\n      Lib.mergeArray(markerGradient.type, cd, 'mgt');\n      Lib.mergeArray(markerGradient.color, cd, 'mgc');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}