{"ast":null,"code":"import _classCallCheck from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/src/user/components/user-form.js\";\nimport React from 'react';\nimport validate from \"./validators/user-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"../api/user-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar UserForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserForm, _React$Component);\n\n  function UserForm(props) {\n    var _this;\n\n    _classCallCheck(this, UserForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        username: {\n          value: '',\n          placeholder: 'What is your username?...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: true\n          }\n        },\n        password: {\n          value: '',\n          placeholder: 'Set your password',\n          valid: false,\n          touched: false\n        },\n        role: {\n          value: '',\n          placeholder: 'ADMIN or REGULAR',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(UserForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerUser\",\n    value: function registerUser(user) {\n      var _this2 = this;\n\n      return API_USERS.postUser(user, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted user with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var user = {\n        username: this.state.formControls.username.value,\n        password: this.state.formControls.password.value,\n        role: this.state.formControls.role.value\n      };\n      console.log(user);\n      this.registerUser(user);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"usernameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \" Username: \"), React.createElement(Input, {\n        name: \"username\",\n        id: \"usernameField\",\n        placeholder: this.state.formControls.username.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.username.value,\n        touched: this.state.formControls.username.touched ? 1 : 0,\n        valid: this.state.formControls.username.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), this.state.formControls.username.touched && !this.state.formControls.username.valid && React.createElement(\"div\", {\n        className: \"error-messagage row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \" * Username must have at least 3 characters \")), React.createElement(FormGroup, {\n        id: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"passwordField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \" Password: \"), React.createElement(Input, {\n        name: \"password\",\n        id: \"passwordField\",\n        placeholder: this.state.formControls.password.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.password.value,\n        touched: this.state.formControls.password.touched ? 1 : 0,\n        valid: this.state.formControls.password.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"role\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"roleField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \" Role: \"), React.createElement(Input, {\n        name: \"role\",\n        id: \"roleField\",\n        placeholder: this.state.formControls.role.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.role.value,\n        touched: this.state.formControls.role.touched ? 1 : 0,\n        valid: this.state.formControls.role.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"  Submit \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return UserForm;\n}(React.Component);\n\nexport default UserForm;","map":{"version":3,"sources":["/Users/danaliulica/Documents/PROIECT/DS202230643_Dragusanu_Octavian_1_Frontend/src/user/components/user-form.js"],"names":["React","validate","Button","API_USERS","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","UserForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","errorStatus","error","username","placeholder","minLength","isRequired","password","role","handleSubmit","collapseForm","user","postUser","result","status","console","log","registerUser","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport validate from \"./validators/user-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"../api/user-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport {Col, Row} from \"reactstrap\";\nimport { FormGroup, Input, Label} from 'reactstrap';\n\n\n\nclass UserForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.reloadHandler = this.props.reloadHandler;\n\n        this.state = {\n\n            errorStatus: 0,\n            error: null,\n\n            formIsValid: false,\n\n            formControls: {\n                username: {\n                    value: '',\n                    placeholder: 'What is your username?...',\n                    valid: false,\n                    touched: false,\n                    validationRules: {\n                        minLength: 3,\n                        isRequired: true\n                    }\n                },\n                password: {\n                    value: '',\n                    placeholder: 'Set your password',\n                    valid: false,\n                    touched: false,\n                },\n                role: {\n                    value: '',\n                    placeholder: 'ADMIN or REGULAR',\n                    valid: false,\n                    touched: false,\n                },\n            }\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    toggleForm() {\n        this.setState({collapseForm: !this.state.collapseForm});\n    }\n\n\n    handleChange = event => {\n\n        const name = event.target.name;\n        const value = event.target.value;\n\n        const updatedControls = this.state.formControls;\n\n        const updatedFormElement = updatedControls[name];\n\n        updatedFormElement.value = value;\n        updatedFormElement.touched = true;\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n        updatedControls[name] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let updatedFormElementName in updatedControls) {\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n        }\n\n        this.setState({\n            formControls: updatedControls,\n            formIsValid: formIsValid\n        });\n\n    };\n\n    registerUser(user) {\n        return API_USERS.postUser(user, (result, status, error) => {\n            if (result !== null && (status === 200 || status === 201)) {\n                console.log(\"Successfully inserted user with id: \" + result);\n                this.reloadHandler();\n            } else {\n                this.setState(({\n                    errorStatus: status,\n                    error: error\n                }));\n            }\n        });\n    }\n\n    handleSubmit() {\n        let user = {\n            username: this.state.formControls.username.value,\n            password: this.state.formControls.password.value,\n            role: this.state.formControls.role.value\n            \n        };\n\n        console.log(user);\n        this.registerUser(user);\n    }\n\n    render() {\n        return (\n            <div>\n\n                <FormGroup id='username'>\n                    <Label for='usernameField'> Username: </Label>\n                    <Input name='username' id='usernameField' placeholder={this.state.formControls.username.placeholder}\n                           onChange={this.handleChange}\n                           defaultValue={this.state.formControls.username.value}\n                           touched={this.state.formControls.username.touched? 1 : 0}\n                           valid={this.state.formControls.username.valid}\n                           required\n                    />\n                    {this.state.formControls.username.touched && !this.state.formControls.username.valid &&\n                    <div className={\"error-messagage row\"}> * Username must have at least 3 characters </div>}\n                </FormGroup>\n\n                <FormGroup id='password'>\n                    <Label for='passwordField'> Password: </Label>\n                    <Input name='password' id='passwordField' placeholder={this.state.formControls.password.placeholder}\n                           onChange={this.handleChange}\n                           defaultValue={this.state.formControls.password.value}\n                           touched={this.state.formControls.password.touched? 1 : 0}\n                           valid={this.state.formControls.password.valid}\n                           required\n                    />\n                </FormGroup>\n\n                <FormGroup id='role'>\n                    <Label for='roleField'> Role: </Label>\n                    <Input name='role' id='roleField' placeholder={this.state.formControls.role.placeholder}\n                           onChange={this.handleChange}\n                           defaultValue={this.state.formControls.role.value}\n                           touched={this.state.formControls.role.touched? 1 : 0}\n                           valid={this.state.formControls.role.valid}\n                           required\n                    />\n                </FormGroup>\n\n                <Row>\n                    <Col sm={{size: '4', offset: 8}}>\n                        <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\n                    </Col>\n                </Row>\n\n                {\n                    this.state.errorStatus > 0 &&\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\n                }\n            </div>\n        ) ;\n    }\n}\n\nexport default UserForm;\n"]},"metadata":{},"sourceType":"module"}