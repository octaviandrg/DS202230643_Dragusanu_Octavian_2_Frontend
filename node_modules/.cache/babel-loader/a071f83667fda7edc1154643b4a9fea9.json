{"ast":null,"code":"'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterPolarAttrs = require('../scatterpolar/attributes');\n\nvar barAttrs = require('../bar/attributes');\n\nmodule.exports = {\n  r: scatterPolarAttrs.r,\n  theta: scatterPolarAttrs.theta,\n  r0: scatterPolarAttrs.r0,\n  dr: scatterPolarAttrs.dr,\n  theta0: scatterPolarAttrs.theta0,\n  dtheta: scatterPolarAttrs.dtheta,\n  thetaunit: scatterPolarAttrs.thetaunit,\n  // orientation: {\n  //     valType: 'enumerated',\n  //     values: ['radial', 'angular'],\n  //     editType: 'calc+clearAxisTypes',\n  //     description: 'Sets the orientation of the bars.'\n  // },\n  base: extendFlat({}, barAttrs.base, {\n    description: ['Sets where the bar base is drawn (in radial axis units).', 'In *stack* barmode,', 'traces that set *base* will be excluded', 'and drawn in *overlay* mode instead.'].join(' ')\n  }),\n  offset: extendFlat({}, barAttrs.offset, {\n    description: ['Shifts the angular position where the bar is drawn', '(in *thetatunit* units).'].join(' ')\n  }),\n  width: extendFlat({}, barAttrs.width, {\n    description: ['Sets the bar angular width (in *thetaunit* units).'].join(' ')\n  }),\n  text: extendFlat({}, barAttrs.text, {\n    description: ['Sets hover text elements associated with each bar.', 'If a single string, the same string appears over all bars.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s coordinates.'].join(' ')\n  }),\n  hovertext: extendFlat({}, barAttrs.hovertext, {\n    description: 'Same as `text`.'\n  }),\n  // textposition: {},\n  // textfont: {},\n  // insidetextfont: {},\n  // outsidetextfont: {},\n  // constraintext: {},\n  // cliponaxis: extendFlat({}, barAttrs.cliponaxis, {dflt: false}),\n  marker: barAttrs.marker,\n  hoverinfo: scatterPolarAttrs.hoverinfo,\n  hovertemplate: hovertemplateAttrs(),\n  selected: barAttrs.selected,\n  unselected: barAttrs.unselected // error_x (error_r, error_theta)\n  // error_y\n\n};","map":null,"metadata":{},"sourceType":"script"}