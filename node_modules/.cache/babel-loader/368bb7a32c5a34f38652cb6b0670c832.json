{"ast":null,"code":"'use strict';\n\nvar unquote = require('unquote');\n\nvar globalKeywords = require('css-global-keywords');\n\nvar systemFontKeywords = require('css-system-font-keywords');\n\nvar fontWeightKeywords = require('css-font-weight-keywords');\n\nvar fontStyleKeywords = require('css-font-style-keywords');\n\nvar fontStretchKeywords = require('css-font-stretch-keywords');\n\nvar splitBy = require('string-split-by');\n\nvar isSize = require('./lib/util').isSize;\n\nmodule.exports = parseFont;\nvar cache = parseFont.cache = {};\n\nfunction parseFont(value) {\n  if (typeof value !== 'string') throw new Error('Font argument must be a string.');\n  if (cache[value]) return cache[value];\n\n  if (value === '') {\n    throw new Error('Cannot parse an empty string.');\n  }\n\n  if (systemFontKeywords.indexOf(value) !== -1) {\n    return cache[value] = {\n      system: value\n    };\n  }\n\n  var font = {\n    style: 'normal',\n    variant: 'normal',\n    weight: 'normal',\n    stretch: 'normal',\n    lineHeight: 'normal',\n    size: '1rem',\n    family: ['serif']\n  };\n  var tokens = splitBy(value, /\\s+/);\n  var token;\n\n  while (token = tokens.shift()) {\n    if (globalKeywords.indexOf(token) !== -1) {\n      ['style', 'variant', 'weight', 'stretch'].forEach(function (prop) {\n        font[prop] = token;\n      });\n      return cache[value] = font;\n    }\n\n    if (fontStyleKeywords.indexOf(token) !== -1) {\n      font.style = token;\n      continue;\n    }\n\n    if (token === 'normal' || token === 'small-caps') {\n      font.variant = token;\n      continue;\n    }\n\n    if (fontStretchKeywords.indexOf(token) !== -1) {\n      font.stretch = token;\n      continue;\n    }\n\n    if (fontWeightKeywords.indexOf(token) !== -1) {\n      font.weight = token;\n      continue;\n    }\n\n    if (isSize(token)) {\n      var parts = splitBy(token, '/');\n      font.size = parts[0];\n\n      if (parts[1] != null) {\n        font.lineHeight = parseLineHeight(parts[1]);\n      } else if (tokens[0] === '/') {\n        tokens.shift();\n        font.lineHeight = parseLineHeight(tokens.shift());\n      }\n\n      if (!tokens.length) {\n        throw new Error('Missing required font-family.');\n      }\n\n      font.family = splitBy(tokens.join(' '), /\\s*,\\s*/).map(unquote);\n      return cache[value] = font;\n    }\n\n    throw new Error('Unknown or unsupported font token: ' + token);\n  }\n\n  throw new Error('Missing required font-size.');\n}\n\nfunction parseLineHeight(value) {\n  var parsed = parseFloat(value);\n\n  if (parsed.toString() === value) {\n    return parsed;\n  }\n\n  return value;\n}","map":null,"metadata":{},"sourceType":"script"}