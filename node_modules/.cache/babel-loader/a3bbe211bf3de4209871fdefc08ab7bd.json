{"ast":null,"code":"'use strict';\n\nvar cleanTicks = require('./clean_ticks');\n\nvar isArrayOrTypedArray = require('../../lib').isArrayOrTypedArray;\n\nmodule.exports = function handleTickValueDefaults(containerIn, containerOut, coerce, axType, opts) {\n  if (!opts) opts = {};\n  var isMinor = opts.isMinor;\n  var cIn = isMinor ? containerIn.minor || {} : containerIn;\n  var cOut = isMinor ? containerOut.minor : containerOut;\n  var prefix = isMinor ? 'minor.' : '';\n\n  function readInput(attr) {\n    var v = cIn[attr];\n    return v !== undefined ? v : (cOut._template || {})[attr];\n  }\n\n  var _tick0 = readInput('tick0');\n\n  var _dtick = readInput('dtick');\n\n  var _tickvals = readInput('tickvals');\n\n  var tickmodeDefault = isArrayOrTypedArray(_tickvals) ? 'array' : _dtick ? 'linear' : 'auto';\n  var tickmode = coerce(prefix + 'tickmode', tickmodeDefault);\n\n  if (tickmode === 'auto') {\n    coerce(prefix + 'nticks');\n  } else if (tickmode === 'linear') {\n    // dtick is usually a positive number, but there are some\n    // special strings available for log or date axes\n    // tick0 also has special logic\n    var dtick = cOut.dtick = cleanTicks.dtick(_dtick, axType);\n    cOut.tick0 = cleanTicks.tick0(_tick0, axType, containerOut.calendar, dtick);\n  } else if (axType !== 'multicategory') {\n    var tickvals = coerce(prefix + 'tickvals');\n    if (tickvals === undefined) cOut.tickmode = 'auto';else if (!isMinor) coerce('ticktext');\n  }\n};","map":null,"metadata":{},"sourceType":"script"}