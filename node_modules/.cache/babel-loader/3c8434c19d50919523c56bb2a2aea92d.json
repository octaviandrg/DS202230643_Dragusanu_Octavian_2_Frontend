{"ast":null,"code":"'use strict';\n\nvar scatterAttrs = require('../scatter/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = extendFlat({\n  z: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the z data.'\n  },\n  x: extendFlat({}, scatterAttrs.x, {\n    impliedEdits: {\n      xtype: 'array'\n    }\n  }),\n  x0: extendFlat({}, scatterAttrs.x0, {\n    impliedEdits: {\n      xtype: 'scaled'\n    }\n  }),\n  dx: extendFlat({}, scatterAttrs.dx, {\n    impliedEdits: {\n      xtype: 'scaled'\n    }\n  }),\n  y: extendFlat({}, scatterAttrs.y, {\n    impliedEdits: {\n      ytype: 'array'\n    }\n  }),\n  y0: extendFlat({}, scatterAttrs.y0, {\n    impliedEdits: {\n      ytype: 'scaled'\n    }\n  }),\n  dy: extendFlat({}, scatterAttrs.dy, {\n    impliedEdits: {\n      ytype: 'scaled'\n    }\n  }),\n  xperiod: extendFlat({}, scatterAttrs.xperiod, {\n    impliedEdits: {\n      xtype: 'scaled'\n    }\n  }),\n  yperiod: extendFlat({}, scatterAttrs.yperiod, {\n    impliedEdits: {\n      ytype: 'scaled'\n    }\n  }),\n  xperiod0: extendFlat({}, scatterAttrs.xperiod0, {\n    impliedEdits: {\n      xtype: 'scaled'\n    }\n  }),\n  yperiod0: extendFlat({}, scatterAttrs.yperiod0, {\n    impliedEdits: {\n      ytype: 'scaled'\n    }\n  }),\n  xperiodalignment: extendFlat({}, scatterAttrs.xperiodalignment, {\n    impliedEdits: {\n      xtype: 'scaled'\n    }\n  }),\n  yperiodalignment: extendFlat({}, scatterAttrs.yperiodalignment, {\n    impliedEdits: {\n      ytype: 'scaled'\n    }\n  }),\n  text: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Sets the text elements associated with each z value.'\n  },\n  hovertext: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: 'Same as `text`.'\n  },\n  transpose: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: 'Transposes the z data.'\n  },\n  xtype: {\n    valType: 'enumerated',\n    values: ['array', 'scaled'],\n    editType: 'calc+clearAxisTypes',\n    description: ['If *array*, the heatmap\\'s x coordinates are given by *x*', '(the default behavior when `x` is provided).', 'If *scaled*, the heatmap\\'s x coordinates are given by *x0* and *dx*', '(the default behavior when `x` is not provided).'].join(' ')\n  },\n  ytype: {\n    valType: 'enumerated',\n    values: ['array', 'scaled'],\n    editType: 'calc+clearAxisTypes',\n    description: ['If *array*, the heatmap\\'s y coordinates are given by *y*', '(the default behavior when `y` is provided)', 'If *scaled*, the heatmap\\'s y coordinates are given by *y0* and *dy*', '(the default behavior when `y` is not provided)'].join(' ')\n  },\n  zsmooth: {\n    valType: 'enumerated',\n    values: ['fast', 'best', false],\n    dflt: false,\n    editType: 'calc',\n    description: ['Picks a smoothing algorithm use to smooth `z` data.'].join(' ')\n  },\n  hoverongaps: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'none',\n    description: ['Determines whether or not gaps', '(i.e. {nan} or missing values)', 'in the `z` data have hover labels associated with them.'].join(' ')\n  },\n  connectgaps: {\n    valType: 'boolean',\n    editType: 'calc',\n    description: ['Determines whether or not gaps', '(i.e. {nan} or missing values)', 'in the `z` data are filled in.', 'It is defaulted to true if `z` is a', 'one dimensional array and `zsmooth` is not false;', 'otherwise it is defaulted to false.'].join(' ')\n  },\n  xgap: {\n    valType: 'number',\n    dflt: 0,\n    min: 0,\n    editType: 'plot',\n    description: 'Sets the horizontal gap (in pixels) between bricks.'\n  },\n  ygap: {\n    valType: 'number',\n    dflt: 0,\n    min: 0,\n    editType: 'plot',\n    description: 'Sets the vertical gap (in pixels) between bricks.'\n  },\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z', 1),\n  hovertemplate: hovertemplateAttrs(),\n  texttemplate: texttemplateAttrs({\n    arrayOk: false,\n    editType: 'plot'\n  }, {\n    keys: ['x', 'y', 'z', 'text']\n  }),\n  textfont: fontAttrs({\n    editType: 'plot',\n    autoSize: true,\n    autoColor: true,\n    colorEditType: 'style',\n    description: 'Sets the text font.'\n  }),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n}, {\n  transforms: undefined\n}, colorScaleAttrs('', {\n  cLetter: 'z',\n  autoColorDflt: false\n}));","map":null,"metadata":{},"sourceType":"script"}