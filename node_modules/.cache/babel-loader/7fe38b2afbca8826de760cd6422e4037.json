{"ast":null,"code":"'use strict';\n\nvar heatmapAttrs = require('../heatmap/attributes');\n\nvar scatterAttrs = require('../scatter/attributes');\n\nvar axisFormat = require('../../plots/cartesian/axis_format_attributes');\n\nvar axisHoverFormat = axisFormat.axisHoverFormat;\nvar descriptionOnlyNumbers = axisFormat.descriptionOnlyNumbers;\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\n\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar filterOps = require('../../constants/filter_ops');\n\nvar COMPARISON_OPS2 = filterOps.COMPARISON_OPS2;\nvar INTERVAL_OPS = filterOps.INTERVAL_OPS;\nvar scatterLineAttrs = scatterAttrs.line;\nmodule.exports = extendFlat({\n  z: heatmapAttrs.z,\n  x: heatmapAttrs.x,\n  x0: heatmapAttrs.x0,\n  dx: heatmapAttrs.dx,\n  y: heatmapAttrs.y,\n  y0: heatmapAttrs.y0,\n  dy: heatmapAttrs.dy,\n  xperiod: heatmapAttrs.xperiod,\n  yperiod: heatmapAttrs.yperiod,\n  xperiod0: scatterAttrs.xperiod0,\n  yperiod0: scatterAttrs.yperiod0,\n  xperiodalignment: heatmapAttrs.xperiodalignment,\n  yperiodalignment: heatmapAttrs.yperiodalignment,\n  text: heatmapAttrs.text,\n  hovertext: heatmapAttrs.hovertext,\n  transpose: heatmapAttrs.transpose,\n  xtype: heatmapAttrs.xtype,\n  ytype: heatmapAttrs.ytype,\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z', 1),\n  hovertemplate: heatmapAttrs.hovertemplate,\n  texttemplate: extendFlat({}, heatmapAttrs.texttemplate, {\n    description: ['For this trace it only has an effect if `coloring` is set to *heatmap*.', heatmapAttrs.texttemplate.description].join(' ')\n  }),\n  textfont: extendFlat({}, heatmapAttrs.textfont, {\n    description: ['For this trace it only has an effect if `coloring` is set to *heatmap*.', heatmapAttrs.textfont.description].join(' ')\n  }),\n  hoverongaps: heatmapAttrs.hoverongaps,\n  connectgaps: extendFlat({}, heatmapAttrs.connectgaps, {\n    description: ['Determines whether or not gaps', '(i.e. {nan} or missing values)', 'in the `z` data are filled in.', 'It is defaulted to true if `z` is a', 'one dimensional array', 'otherwise it is defaulted to false.'].join(' ')\n  }),\n  fillcolor: {\n    valType: 'color',\n    editType: 'calc',\n    description: ['Sets the fill color if `contours.type` is *constraint*.', 'Defaults to a half-transparent variant of the line color,', 'marker color, or marker line color, whichever is available.'].join(' ')\n  },\n  autocontour: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'calc',\n    impliedEdits: {\n      'contours.start': undefined,\n      'contours.end': undefined,\n      'contours.size': undefined\n    },\n    description: ['Determines whether or not the contour level attributes are', 'picked by an algorithm.', 'If *true*, the number of contour levels can be set in `ncontours`.', 'If *false*, set the contour level attributes in `contours`.'].join(' ')\n  },\n  ncontours: {\n    valType: 'integer',\n    dflt: 15,\n    min: 1,\n    editType: 'calc',\n    description: ['Sets the maximum number of contour levels. The actual number', 'of contours will be chosen automatically to be less than or', 'equal to the value of `ncontours`.', 'Has an effect only if `autocontour` is *true* or if', '`contours.size` is missing.'].join(' ')\n  },\n  contours: {\n    type: {\n      valType: 'enumerated',\n      values: ['levels', 'constraint'],\n      dflt: 'levels',\n      editType: 'calc',\n      description: ['If `levels`, the data is represented as a contour plot with multiple', 'levels displayed. If `constraint`, the data is represented as constraints', 'with the invalid region shaded as specified by the `operation` and', '`value` parameters.'].join(' ')\n    },\n    start: {\n      valType: 'number',\n      dflt: null,\n      editType: 'plot',\n      impliedEdits: {\n        '^autocontour': false\n      },\n      description: ['Sets the starting contour level value.', 'Must be less than `contours.end`'].join(' ')\n    },\n    end: {\n      valType: 'number',\n      dflt: null,\n      editType: 'plot',\n      impliedEdits: {\n        '^autocontour': false\n      },\n      description: ['Sets the end contour level value.', 'Must be more than `contours.start`'].join(' ')\n    },\n    size: {\n      valType: 'number',\n      dflt: null,\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^autocontour': false\n      },\n      description: ['Sets the step between each contour level.', 'Must be positive.'].join(' ')\n    },\n    coloring: {\n      valType: 'enumerated',\n      values: ['fill', 'heatmap', 'lines', 'none'],\n      dflt: 'fill',\n      editType: 'calc',\n      description: ['Determines the coloring method showing the contour values.', 'If *fill*, coloring is done evenly between each contour level', 'If *heatmap*, a heatmap gradient coloring is applied', 'between each contour level.', 'If *lines*, coloring is done on the contour lines.', 'If *none*, no coloring is applied on this trace.'].join(' ')\n    },\n    showlines: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: ['Determines whether or not the contour lines are drawn.', 'Has an effect only if `contours.coloring` is set to *fill*.'].join(' ')\n    },\n    showlabels: {\n      valType: 'boolean',\n      dflt: false,\n      editType: 'plot',\n      description: ['Determines whether to label the contour lines with their values.'].join(' ')\n    },\n    labelfont: fontAttrs({\n      editType: 'plot',\n      colorEditType: 'style',\n      description: ['Sets the font used for labeling the contour levels.', 'The default color comes from the lines, if shown.', 'The default family and size come from `layout.font`.'].join(' ')\n    }),\n    labelformat: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: descriptionOnlyNumbers('contour label')\n    },\n    operation: {\n      valType: 'enumerated',\n      values: [].concat(COMPARISON_OPS2).concat(INTERVAL_OPS),\n      dflt: '=',\n      editType: 'calc',\n      description: ['Sets the constraint operation.', '*=* keeps regions equal to `value`', '*<* and *<=* keep regions less than `value`', '*>* and *>=* keep regions greater than `value`', '*[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]`', '*][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]`', 'Open vs. closed intervals make no difference to constraint display, but', 'all versions are allowed for consistency with filter transforms.'].join(' ')\n    },\n    value: {\n      valType: 'any',\n      dflt: 0,\n      editType: 'calc',\n      description: ['Sets the value or values of the constraint boundary.', 'When `operation` is set to one of the comparison values', '(' + COMPARISON_OPS2 + ')', '*value* is expected to be a number.', 'When `operation` is set to one of the interval values', '(' + INTERVAL_OPS + ')', '*value* is expected to be an array of two numbers where the first', 'is the lower bound and the second is the upper bound.'].join(' ')\n    },\n    editType: 'calc',\n    impliedEdits: {\n      'autocontour': false\n    }\n  },\n  line: {\n    color: extendFlat({}, scatterLineAttrs.color, {\n      editType: 'style+colorbars',\n      description: ['Sets the color of the contour level.', 'Has no effect if `contours.coloring` is set to *lines*.'].join(' ')\n    }),\n    width: {\n      valType: 'number',\n      min: 0,\n      editType: 'style+colorbars',\n      description: ['Sets the contour line width in (in px)', 'Defaults to *0.5* when `contours.type` is *levels*.', 'Defaults to *2* when `contour.type` is *constraint*.'].join(' ')\n    },\n    dash: dash,\n    smoothing: extendFlat({}, scatterLineAttrs.smoothing, {\n      description: ['Sets the amount of smoothing for the contour lines,', 'where *0* corresponds to no smoothing.'].join(' ')\n    }),\n    editType: 'plot'\n  }\n}, colorScaleAttrs('', {\n  cLetter: 'z',\n  autoColorDflt: false,\n  editTypeOverride: 'calc'\n}));","map":null,"metadata":{},"sourceType":"script"}