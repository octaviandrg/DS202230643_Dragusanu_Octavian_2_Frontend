{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar handleLabelDefaults = require('./label_defaults');\n\nvar Color = require('../../components/color');\n\nvar addOpacity = Color.addOpacity;\nvar opacity = Color.opacity;\n\nvar filterOps = require('../../constants/filter_ops');\n\nvar CONSTRAINT_REDUCTION = filterOps.CONSTRAINT_REDUCTION;\nvar COMPARISON_OPS2 = filterOps.COMPARISON_OPS2;\n\nmodule.exports = function handleConstraintDefaults(traceIn, traceOut, coerce, layout, defaultColor, opts) {\n  var contours = traceOut.contours;\n  var showLines, lineColor, fillColor;\n  var operation = coerce('contours.operation');\n  contours._operation = CONSTRAINT_REDUCTION[operation];\n  handleConstraintValueDefaults(coerce, contours);\n\n  if (operation === '=') {\n    showLines = contours.showlines = true;\n  } else {\n    showLines = coerce('contours.showlines');\n    fillColor = coerce('fillcolor', addOpacity((traceIn.line || {}).color || defaultColor, 0.5));\n  }\n\n  if (showLines) {\n    var lineDfltColor = fillColor && opacity(fillColor) ? addOpacity(traceOut.fillcolor, 1) : defaultColor;\n    lineColor = coerce('line.color', lineDfltColor);\n    coerce('line.width', 2);\n    coerce('line.dash');\n  }\n\n  coerce('line.smoothing');\n  handleLabelDefaults(coerce, layout, lineColor, opts);\n};\n\nfunction handleConstraintValueDefaults(coerce, contours) {\n  var zvalue;\n\n  if (COMPARISON_OPS2.indexOf(contours.operation) === -1) {\n    // Requires an array of two numbers:\n    coerce('contours.value', [0, 1]);\n\n    if (!Array.isArray(contours.value)) {\n      if (isNumeric(contours.value)) {\n        zvalue = parseFloat(contours.value);\n        contours.value = [zvalue, zvalue + 1];\n      }\n    } else if (contours.value.length > 2) {\n      contours.value = contours.value.slice(2);\n    } else if (contours.length === 0) {\n      contours.value = [0, 1];\n    } else if (contours.length < 2) {\n      zvalue = parseFloat(contours.value[0]);\n      contours.value = [zvalue, zvalue + 1];\n    } else {\n      contours.value = [parseFloat(contours.value[0]), parseFloat(contours.value[1])];\n    }\n  } else {\n    // Requires a single scalar:\n    coerce('contours.value', 0);\n\n    if (!isNumeric(contours.value)) {\n      if (Array.isArray(contours.value)) {\n        contours.value = parseFloat(contours.value[0]);\n      } else {\n        contours.value = 0;\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}