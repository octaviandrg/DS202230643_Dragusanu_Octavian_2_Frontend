{"ast":null,"code":"'use strict';\n\nvar gl3dAxisAttrs = require('./axis_attributes');\n\nvar domainAttrs = require('../../domain').attributes;\n\nvar extendFlat = require('../../../lib/extend').extendFlat;\n\nvar counterRegex = require('../../../lib').counterRegex;\n\nfunction makeCameraVector(x, y, z) {\n  return {\n    x: {\n      valType: 'number',\n      dflt: x,\n      editType: 'camera'\n    },\n    y: {\n      valType: 'number',\n      dflt: y,\n      editType: 'camera'\n    },\n    z: {\n      valType: 'number',\n      dflt: z,\n      editType: 'camera'\n    },\n    editType: 'camera'\n  };\n}\n\nmodule.exports = {\n  _arrayAttrRegexps: [counterRegex('scene', '.annotations', true)],\n  bgcolor: {\n    valType: 'color',\n    dflt: 'rgba(0,0,0,0)',\n    editType: 'plot'\n  },\n  camera: {\n    up: extendFlat(makeCameraVector(0, 0, 1), {\n      description: ['Sets the (x,y,z) components of the \\'up\\' camera vector.', 'This vector determines the up direction of this scene', 'with respect to the page.', 'The default is *{x: 0, y: 0, z: 1}* which means that', 'the z axis points up.'].join(' ')\n    }),\n    center: extendFlat(makeCameraVector(0, 0, 0), {\n      description: ['Sets the (x,y,z) components of the \\'center\\' camera vector', 'This vector determines the translation (x,y,z) space', 'about the center of this scene.', 'By default, there is no such translation.'].join(' ')\n    }),\n    eye: extendFlat(makeCameraVector(1.25, 1.25, 1.25), {\n      description: ['Sets the (x,y,z) components of the \\'eye\\' camera vector.', 'This vector determines the view point about the origin', 'of this scene.'].join(' ')\n    }),\n    projection: {\n      type: {\n        valType: 'enumerated',\n        values: ['perspective', 'orthographic'],\n        dflt: 'perspective',\n        editType: 'calc',\n        description: ['Sets the projection type. The projection type could be', 'either *perspective* or *orthographic*. The default is', '*perspective*.'].join(' ')\n      },\n      editType: 'calc'\n    },\n    editType: 'camera'\n  },\n  domain: domainAttrs({\n    name: 'scene',\n    editType: 'plot'\n  }),\n  aspectmode: {\n    valType: 'enumerated',\n    values: ['auto', 'cube', 'data', 'manual'],\n    dflt: 'auto',\n    editType: 'plot',\n    impliedEdits: {\n      'aspectratio.x': undefined,\n      'aspectratio.y': undefined,\n      'aspectratio.z': undefined\n    },\n    description: ['If *cube*, this scene\\'s axes are drawn as a cube,', 'regardless of the axes\\' ranges.', 'If *data*, this scene\\'s axes are drawn', 'in proportion with the axes\\' ranges.', 'If *manual*, this scene\\'s axes are drawn', 'in proportion with the input of *aspectratio*', '(the default behavior if *aspectratio* is provided).', 'If *auto*, this scene\\'s axes are drawn', 'using the results of *data* except when one axis', 'is more than four times the size of the two others,', 'where in that case the results of *cube* are used.'].join(' ')\n  },\n  aspectratio: {\n    // must be positive (0's are coerced to 1)\n    x: {\n      valType: 'number',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    y: {\n      valType: 'number',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    z: {\n      valType: 'number',\n      min: 0,\n      editType: 'plot',\n      impliedEdits: {\n        '^aspectmode': 'manual'\n      }\n    },\n    editType: 'plot',\n    impliedEdits: {\n      aspectmode: 'manual'\n    },\n    description: ['Sets this scene\\'s axis aspectratio.'].join(' ')\n  },\n  xaxis: gl3dAxisAttrs,\n  yaxis: gl3dAxisAttrs,\n  zaxis: gl3dAxisAttrs,\n  dragmode: {\n    valType: 'enumerated',\n    values: ['orbit', 'turntable', 'zoom', 'pan', false],\n    editType: 'plot',\n    description: ['Determines the mode of drag interactions for this scene.'].join(' ')\n  },\n  hovermode: {\n    valType: 'enumerated',\n    values: ['closest', false],\n    dflt: 'closest',\n    editType: 'modebar',\n    description: ['Determines the mode of hover interactions for this scene.'].join(' ')\n  },\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in camera attributes.', 'Defaults to `layout.uirevision`.'].join(' ')\n  },\n  editType: 'plot',\n  _deprecated: {\n    cameraposition: {\n      valType: 'info_array',\n      editType: 'camera',\n      description: 'Obsolete. Use `camera` instead.'\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}