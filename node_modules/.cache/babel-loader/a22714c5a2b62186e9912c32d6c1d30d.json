{"ast":null,"code":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n//\n// used strictly for logging the processing of the algorithm... only useful if you intend on\n// looking under the covers (for pretty UI's or debugging)\n//\nfunction BuildLog() {\n  var my;\n  var nextSegmentId = 0;\n  var curVert = false;\n\n  function push(type, data) {\n    my.list.push({\n      type: type,\n      data: data ? JSON.parse(JSON.stringify(data)) : void 0\n    });\n    return my;\n  }\n\n  my = {\n    list: [],\n    segmentId: function segmentId() {\n      return nextSegmentId++;\n    },\n    checkIntersection: function checkIntersection(seg1, seg2) {\n      return push('check', {\n        seg1: seg1,\n        seg2: seg2\n      });\n    },\n    segmentChop: function segmentChop(seg, end) {\n      push('div_seg', {\n        seg: seg,\n        pt: end\n      });\n      return push('chop', {\n        seg: seg,\n        pt: end\n      });\n    },\n    statusRemove: function statusRemove(seg) {\n      return push('pop_seg', {\n        seg: seg\n      });\n    },\n    segmentUpdate: function segmentUpdate(seg) {\n      return push('seg_update', {\n        seg: seg\n      });\n    },\n    segmentNew: function segmentNew(seg, primary) {\n      return push('new_seg', {\n        seg: seg,\n        primary: primary\n      });\n    },\n    segmentRemove: function segmentRemove(seg) {\n      return push('rem_seg', {\n        seg: seg\n      });\n    },\n    tempStatus: function tempStatus(seg, above, below) {\n      return push('temp_status', {\n        seg: seg,\n        above: above,\n        below: below\n      });\n    },\n    rewind: function rewind(seg) {\n      return push('rewind', {\n        seg: seg\n      });\n    },\n    status: function status(seg, above, below) {\n      return push('status', {\n        seg: seg,\n        above: above,\n        below: below\n      });\n    },\n    vert: function vert(x) {\n      if (x === curVert) return my;\n      curVert = x;\n      return push('vert', {\n        x: x\n      });\n    },\n    log: function log(data) {\n      if (typeof data !== 'string') data = JSON.stringify(data, false, '  ');\n      return push('log', {\n        txt: data\n      });\n    },\n    reset: function reset() {\n      return push('reset');\n    },\n    selected: function selected(segs) {\n      return push('selected', {\n        segs: segs\n      });\n    },\n    chainStart: function chainStart(seg) {\n      return push('chain_start', {\n        seg: seg\n      });\n    },\n    chainRemoveHead: function chainRemoveHead(index, pt) {\n      return push('chain_rem_head', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainRemoveTail: function chainRemoveTail(index, pt) {\n      return push('chain_rem_tail', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainNew: function chainNew(pt1, pt2) {\n      return push('chain_new', {\n        pt1: pt1,\n        pt2: pt2\n      });\n    },\n    chainMatch: function chainMatch(index) {\n      return push('chain_match', {\n        index: index\n      });\n    },\n    chainClose: function chainClose(index) {\n      return push('chain_close', {\n        index: index\n      });\n    },\n    chainAddHead: function chainAddHead(index, pt) {\n      return push('chain_add_head', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainAddTail: function chainAddTail(index, pt) {\n      return push('chain_add_tail', {\n        index: index,\n        pt: pt\n      });\n    },\n    chainConnect: function chainConnect(index1, index2) {\n      return push('chain_con', {\n        index1: index1,\n        index2: index2\n      });\n    },\n    chainReverse: function chainReverse(index) {\n      return push('chain_rev', {\n        index: index\n      });\n    },\n    chainJoin: function chainJoin(index1, index2) {\n      return push('chain_join', {\n        index1: index1,\n        index2: index2\n      });\n    },\n    done: function done() {\n      return push('done');\n    }\n  };\n  return my;\n}\n\nmodule.exports = BuildLog;","map":null,"metadata":{},"sourceType":"script"}