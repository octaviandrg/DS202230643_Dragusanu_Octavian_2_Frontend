{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Lib = require('../../lib');\n\nvar Drawing = require('../../components/drawing');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar barPlot = require('../bar/plot');\n\nvar clearMinTextSize = require('../bar/uniform_text').clearMinTextSize;\n\nmodule.exports = function plot(gd, plotinfo, cdModule, traceLayer) {\n  var fullLayout = gd._fullLayout;\n  clearMinTextSize('waterfall', fullLayout);\n  barPlot.plot(gd, plotinfo, cdModule, traceLayer, {\n    mode: fullLayout.waterfallmode,\n    norm: fullLayout.waterfallmode,\n    gap: fullLayout.waterfallgap,\n    groupgap: fullLayout.waterfallgroupgap\n  });\n  plotConnectors(gd, plotinfo, cdModule, traceLayer);\n};\n\nfunction plotConnectors(gd, plotinfo, cdModule, traceLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(traceLayer, cdModule, 'trace bars').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var trace = cd[0].trace;\n    var group = Lib.ensureSingle(plotGroup, 'g', 'lines');\n\n    if (!trace.connector || !trace.connector.visible) {\n      group.remove();\n      return;\n    }\n\n    var isHorizontal = trace.orientation === 'h';\n    var mode = trace.connector.mode;\n    var connectors = group.selectAll('g.line').data(Lib.identity);\n    connectors.enter().append('g').classed('line', true);\n    connectors.exit().remove();\n    var len = connectors.size();\n    connectors.each(function (di, i) {\n      // don't draw lines between nulls\n      if (i !== len - 1 && !di.cNext) return;\n      var xy = getXY(di, xa, ya, isHorizontal);\n      var x = xy[0];\n      var y = xy[1];\n      var shape = '';\n\n      if (x[0] !== BADNUM && y[0] !== BADNUM && x[1] !== BADNUM && y[1] !== BADNUM) {\n        if (mode === 'spanning') {\n          if (!di.isSum && i > 0) {\n            if (isHorizontal) {\n              shape += 'M' + x[0] + ',' + y[1] + 'V' + y[0];\n            } else {\n              shape += 'M' + x[1] + ',' + y[0] + 'H' + x[0];\n            }\n          }\n        }\n\n        if (mode !== 'between') {\n          if (di.isSum || i < len - 1) {\n            if (isHorizontal) {\n              shape += 'M' + x[1] + ',' + y[0] + 'V' + y[1];\n            } else {\n              shape += 'M' + x[0] + ',' + y[1] + 'H' + x[1];\n            }\n          }\n        }\n\n        if (x[2] !== BADNUM && y[2] !== BADNUM) {\n          if (isHorizontal) {\n            shape += 'M' + x[1] + ',' + y[1] + 'V' + y[2];\n          } else {\n            shape += 'M' + x[1] + ',' + y[1] + 'H' + x[2];\n          }\n        }\n      }\n\n      if (shape === '') shape = 'M0,0Z';\n      Lib.ensureSingle(d3.select(this), 'path').attr('d', shape).call(Drawing.setClipUrl, plotinfo.layerClipId, gd);\n    });\n  });\n}\n\nfunction getXY(di, xa, ya, isHorizontal) {\n  var s = [];\n  var p = [];\n  var sAxis = isHorizontal ? xa : ya;\n  var pAxis = isHorizontal ? ya : xa;\n  s[0] = sAxis.c2p(di.s0, true);\n  p[0] = pAxis.c2p(di.p0, true);\n  s[1] = sAxis.c2p(di.s1, true);\n  p[1] = pAxis.c2p(di.p1, true);\n  s[2] = sAxis.c2p(di.nextS0, true);\n  p[2] = pAxis.c2p(di.nextP0, true);\n  return isHorizontal ? [s, p] : [p, s];\n}","map":null,"metadata":{},"sourceType":"script"}