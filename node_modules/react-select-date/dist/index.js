

function ___$insertStyle(css) {
  if (!css) {
    return;
  }
  if (typeof window === 'undefined') {
    return;
  }

  var style = document.createElement('style');

  style.setAttribute('type', 'text/css');
  style.innerHTML = css;
  document.head.appendChild(style);
  return css;
}

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var tslib = require('tslib');

var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
var days = { sun: 0, mon: 1, tue: 2, wed: 3, thu: 4, fri: 5, sat: 6 };
var daysArr = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
/**
 * @param {Number} num number
 * @returns number if length 1 returns with zero
 */
function addZero(num) {
    return num > 9 ? num : "0" + num;
}
/**
 * @param {string} date date object
 * @returns date object with current time
 */
function setCurrentTime(date) {
    var changeTime = new Date(date);
    var now = new Date();
    changeTime.setHours(now.getHours());
    changeTime.setMinutes(now.getMinutes());
    changeTime.setSeconds(now.getSeconds());
    changeTime.setMilliseconds(now.getMilliseconds());
    return changeTime;
}
/**
 * @param {string} date contain date
 * @param {boolean} format contain boolean value
 * @returns {string} returns a formated date
 */
function formatDay(date, format) {
    if (format === void 0) { format = false; }
    if (date) {
        var addZeroToMonth = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
        var addZeroToDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
        if (format) {
            return months[Number(addZeroToMonth) - 1] + " " + addZeroToDate + "," + date.getFullYear();
        }
        var dateIdFromCld = date.getFullYear() + "-" + addZeroToMonth + "-" + addZeroToDate;
        return dateIdFromCld;
    }
    return "";
}
/**
 * @param {Date} minDate contain a date
 * @param {Date} renderDate contain a date
 * @returns {boolean} for disable date
 */
function setMinDate(minDate, renderDate) {
    var minimumDate = renderDate < new Date(minDate) && "cld_disableDate";
    return minimumDate;
}
/**
 * @param {Date} maxDate contain a date
 * @param {Date} renderDate contain a date
 * @returns {boolean} for disable date
 */
function setMaxDate(maxDate, renderDate) {
    var maximamDate = renderDate > new Date(maxDate) && "cld_disableDate";
    return maximamDate;
}
/**
 * @param {Array} contain disable days
 * @return {boolean} disable the day
 */
function getDisableDays(day, renderDate) {
    var dayDisable = day.some(function (dy) {
        return days[dy] === new Date(renderDate).getDay();
    });
    return dayDisable && "cld_disableDate";
}
/**
 * @param {string} renderDate contain a date
 * @param {string} disableState contain a disable-state past || future
 * @returns {string} disable date
 */
function getDisableDate(renderDate, disableState) {
    var disableRange;
    if (disableState === "past") {
        var subractOneDay = new Date(renderDate);
        subractOneDay.setDate(subractOneDay.getDate() + 1);
        disableRange = subractOneDay < new Date() && "cld_disableDate";
    }
    else if (disableState === "future") {
        disableRange = setCurrentTime(renderDate) > new Date() && "cld_disableDate";
    }
    return disableRange;
}
/**
 * @param {string} disableState contain a disable-state past || future
 * @param {string} minDate contain a min date
 * @returns {string} disable year
 */
function getDisableYear(disableState, minDate, maxDate) {
    if (disableState === "past") {
        if (minDate && maxDate) {
            return {
                startYearOption: new Date(minDate) < new Date() ? new Date().getFullYear() : new Date(minDate).getFullYear(),
                endYearOption: new Date(maxDate).getFullYear()
            };
        }
        if (minDate && new Date(minDate) > new Date()) {
            return {
                startYearOption: new Date(minDate).getFullYear(),
                endYearOption: 2100
            };
        }
        if (maxDate && new Date(maxDate) > new Date()) {
            return {
                startYearOption: new Date().getFullYear(),
                endYearOption: new Date(maxDate).getFullYear()
            };
        }
        return {
            startYearOption: new Date().getFullYear(),
            endYearOption: 2100
        };
    }
    else if (disableState === "future") {
        if (minDate && maxDate) {
            return {
                startYearOption: new Date(minDate).getFullYear(),
                endYearOption: new Date(maxDate) > new Date() ? new Date().getFullYear() : new Date(maxDate).getFullYear()
            };
        }
        if (minDate && new Date(minDate) < new Date()) {
            return {
                startYearOption: new Date(minDate).getFullYear(),
                endYearOption: new Date().getFullYear()
            };
        }
        if (maxDate && new Date(maxDate) < new Date()) {
            return {
                startYearOption: 1921,
                endYearOption: new Date(maxDate).getFullYear()
            };
        }
        return {
            startYearOption: 1921,
            endYearOption: new Date().getFullYear()
        };
    }
    if (minDate && maxDate) {
        return {
            startYearOption: new Date(minDate).getFullYear(),
            endYearOption: new Date(maxDate).getFullYear()
        };
    }
    if (minDate && !disableState) {
        return {
            startYearOption: new Date(minDate).getFullYear(),
            endYearOption: 2100
        };
    }
    if (maxDate && !disableState) {
        return {
            startYearOption: 1921,
            endYearOption: new Date(maxDate).getFullYear()
        };
    }
    return;
}
/**
 * @param {string} disableState contain a disable-state past || future
 * @returns {object} set the start date and end date in field
 */
function getDisableDateForField(disableState) {
    var disablefield;
    if (disableState === "past") {
        disablefield = {
            minDate: formatDay(new Date()),
            maxDate: "2100-12-31",
        };
    }
    else if (disableState === "future") {
        disablefield = {
            minDate: "1921-01-01",
            maxDate: formatDay(new Date()),
        };
    }
    return disablefield;
}
/**
 * @param {string} renderDate contain a date
 * @param {string} disableCertainDate contain a disable-state past || future
 * @returns {string} disable date
 */
function getDisableCertainDate(renderDate, disableCertainDate) {
    var disableCerDate;
    disableCertainDate.forEach(function (dt) {
        var formatDt = new Date(dt);
        if (formatDt.getDate() === renderDate.getDate() &&
            formatDt.getMonth() === renderDate.getMonth() &&
            formatDt.getFullYear() === renderDate.getFullYear()) {
            disableCerDate = "cld_disableDate";
        }
    });
    return disableCerDate;
}
/**
 * @param {string} disableCertainDate contain a disable-state past || future
 * @param {string} dateTypeId contain a render date
 * @param {string} rangeStartDate contain a date
 * @param {string} rangeEndDate contain a date
 * @returns {string} disable date
 */
function getDisableWhenRange(disableCertainDate, disableDays, dateTypeId, rangeStartDate, rangeEndDate, getDayArr, startAndendDate) {
    var disableCertainDateFormat = [];
    disableCertainDate.forEach(function (dt) {
        disableCertainDateFormat.push(formatDay(new Date(dt)));
    });
    if (disableCertainDateFormat.length && disableCertainDateFormat.includes(formatDay(new Date(startAndendDate.startDate))) && formatDay(new Date(startAndendDate.startDate)) === formatDay(new Date(dateTypeId))) {
        return "startDateDisablebg";
    }
    if (disableCertainDateFormat.length && disableCertainDateFormat.includes(formatDay(new Date(startAndendDate.endDate))) && formatDay(new Date(startAndendDate.endDate)) === formatDay(new Date(dateTypeId))) {
        return "endDateDisablebg";
    }
    if (dateTypeId > rangeStartDate &&
        dateTypeId < rangeEndDate &&
        disableCertainDateFormat.includes(formatDay(new Date(dateTypeId)))) {
        return "cld_disablebgColor";
    }
    var disableCertainDayFormat = [];
    getDayArr === null || getDayArr === void 0 ? void 0 : getDayArr.forEach(function (dy) {
        if (disableDays.includes(daysArr[(dy.getDay())])) {
            disableCertainDayFormat.push(formatDay(new Date(dy)));
        }
    });
    if (disableCertainDayFormat.length && disableCertainDayFormat.includes(formatDay(new Date(startAndendDate.startDate))) && formatDay(new Date(startAndendDate.startDate)) === formatDay(new Date(dateTypeId))) {
        return "startDateDisablebg";
    }
    if (disableCertainDayFormat.length && disableCertainDayFormat.includes(formatDay(new Date(startAndendDate.endDate))) && formatDay(new Date(startAndendDate.endDate)) === formatDay(new Date(dateTypeId))) {
        return "endDateDisablebg";
    }
    if (dateTypeId > rangeStartDate &&
        dateTypeId < rangeEndDate &&
        disableCertainDayFormat.includes(formatDay(new Date(dateTypeId)))) {
        return "cld_disablebgColor";
    }
    return;
}

___$insertStyle(".cld_container input {\n  height: 30px;\n  padding: 0px;\n  box-shadow: 0px 0px 3px 0px #8a8a8a;\n  text-transform: uppercase;\n  font-size: 13px;\n  color: #797979;\n  width: 99.5%;\n  text-align: center;\n  border-radius: 3px;\n  outline: none;\n  border: 1px solid #fff;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n}\n\n.cld_container input:focus-within.cld_greenOutline {\n  border: 1px solid #3ecf8e;\n  box-shadow: 0px 0px 2px 0px #3a9c71;\n}\n\n.cld_container input:focus-within.cld_blueOutline {\n  border: 1px solid #3d91ff;\n  box-shadow: 0px 0px 2px 0px #2971d0;\n}\n\n.cld_container input[type=date]::-webkit-inner-spin-button,\n.cld_container input[type=date]::-webkit-calendar-picker-indicator {\n  display: none;\n  -webkit-appearance: none;\n}\n\n.hideSubmitBtn {\n  display: none;\n}\n\n.cld_errmsgContainer {\n  display: flex;\n  height: 15px;\n  justify-content: space-between;\n}\n\n.cld_startaerrmsg {\n  display: flex;\n  height: 15px;\n  justify-content: center;\n}\n\n.cld_errmsg {\n  color: red;\n  font-size: 11px;\n  white-space: nowrap;\n  font-weight: 500;\n}\n\n.hidecld_errmsg {\n  width: fit-content;\n}\n\n.cld_fieldContainer {\n  display: flex;\n  justify-content: space-between;\n  padding: 0 2px;\n}\n\n.cld_fieldContainer label {\n  font-size: 14px;\n  color: #545454;\n  margin-bottom: 17px;\n  font-weight: 500;\n}\n\n.cld_fieldContainer label ~ input {\n  margin-top: 3px;\n}\n\n.cld_fieldContainer > div:first-child {\n  margin-right: 10%;\n  width: 100%;\n}\n\n.cld_fieldContainer > div:nth-child(2) {\n  margin-left: 10%;\n  width: 100%;\n}\n\n.cld_startDateFieldOnly {\n  display: flex;\n  justify-content: center;\n}\n\n.cld_startDateFieldOnly > div label {\n  font-size: 14px;\n  color: #545454;\n  font-weight: 500;\n}\n\nlabel ~ #start_Cld_Field {\n  margin-top: 3px;\n}\n\n.cld_startDateFieldOnly > div:first-child {\n  width: 100%;\n}");

var days$1 = { sun: 0, mon: 1, tue: 2, wed: 3, thu: 4, fri: 5, sat: 6 };
/**
 * @param {*} props all props
 * @returns {React.ReactElement} returns a date-input field
 */
function CldDateField(_a) {
    var disableState = _a.disableState, selectType = _a.selectType, selectedDateFromCld = _a.selectedDateFromCld, selectedDate = _a.selectedDate, disableCertainDate = _a.disableCertainDate, showDatelabel = _a.showDatelabel, templateClr = _a.templateClr, propsMinDate = _a.propsMinDate, propsMaxDate = _a.propsMaxDate, disableDay = _a.disableDay, daysInMonth = _a.daysInMonth;
    var _b = tslib.__read(React.useState(""), 2), startDate = _b[0], setStartDate = _b[1];
    var _c = tslib.__read(React.useState(""), 2), endDate = _c[0], setEndDate = _c[1];
    var _d = tslib.__read(React.useState(), 2), errMsgStart = _d[0], setErrMsgStart = _d[1];
    var _e = tslib.__read(React.useState(), 2), errMsgEnd = _e[0], setErrMsgEnd = _e[1];
    var _f = tslib.__read(React.useState(window.innerWidth), 2), windowDimensions = _f[0], setWindowDimensions = _f[1];
    var _g = tslib.__read(React.useState({
        startDateFromField: "",
        endDateFromField: "",
    }), 2), selectedDateFromField = _g[0], setSelectedDateFromField = _g[1];
    var _h = tslib.__read(React.useState({
        minDate: "1921-01-01",
        maxDate: "2100-12-31",
    }), 2), minAndmaxDate = _h[0], setminAndmaxDate = _h[1];
    var templateOutline = React.useMemo(function () {
        return templateClr === "blue" ? "cld_blueOutline" : "cld_greenOutline";
    }, [templateClr]);
    function handleResize() {
        setWindowDimensions(window.innerWidth);
    }
    React.useEffect(function () {
        window.addEventListener('resize', handleResize);
        return function () { return window.removeEventListener('resize', handleResize); };
    }, []);
    React.useEffect(function () {
        var timer = setTimeout(function () {
            setErrMsgStart("");
            setErrMsgEnd("");
        }, 4000);
        return function () { return clearTimeout(timer); };
    }, [errMsgStart, errMsgEnd]);
    React.useEffect(function () {
        if (disableState === "past" || disableState === "future") {
            setminAndmaxDate(getDisableDateForField(disableState));
        }
    }, [disableState]);
    React.useEffect(function () {
        if (propsMinDate || propsMaxDate || disableState) {
            setminAndmaxDate({
                minDate: disableState === "past" && propsMinDate && new Date(propsMinDate) < new Date() ? formatDay(new Date()) : formatDay(new Date(propsMinDate)),
                maxDate: disableState === "future" && propsMaxDate && new Date(propsMaxDate) > new Date() ? formatDay(new Date()) : formatDay(new Date(propsMaxDate)),
            });
            return;
        }
    }, [minAndmaxDate.maxDate, propsMinDate, propsMaxDate, disableState]);
    React.useEffect(function () {
        if (selectType === "range") {
            var startDate_1 = selectedDateFromCld.startDate, endDate_1 = selectedDateFromCld.endDate;
            setStartDate(formatDay(startDate_1));
            setEndDate(formatDay(endDate_1));
            setSelectedDateFromField({
                startDateFromField: formatDay(startDate_1),
                endDateFromField: formatDay(endDate_1),
            });
        }
        else {
            var dateFromCld = selectedDateFromCld;
            if (dateFromCld) {
                setStartDate(formatDay(dateFromCld));
            }
        }
    }, [selectType, selectedDateFromCld]);
    /**
     * @param {object} e contain selected start date
     */
    var handleStartDate = function (e) {
        setStartDate(e.target.value);
    };
    /**
     * @param {object} e contain selected end date
     */
    var handleEndDate = function (e) {
        setEndDate(e.target.value);
    };
    /**
     * @param {string} date contain date
     * @returns {boolean} return boolean
     */
    var handleDisableDateField = function (date) {
        var disableField = disableCertainDate.find(function (dt) { return formatDay(new Date(dt)) === formatDay(new Date(date)); });
        return disableField;
    };
    /**
     * @param {string} date contain date
     * @returns {boolean} return boolean
     */
    var handleDisableDaycolumn = function (date) {
        var findDisableDay = daysInMonth === null || daysInMonth === void 0 ? void 0 : daysInMonth.find(function (dy) { var _a; return new Date(date).getDay() === days$1[(_a = disableDay[dy.getDay()]) === null || _a === void 0 ? void 0 : _a.toLowerCase()]; });
        return findDisableDay;
    };
    /**
     * @param {*} e contain selected start date
     */
    var startSetError = function (e) {
        if (e.code === "Space") {
            e.preventDefault();
        }
        if ((e.code === "Enter" && startDate) || (e._reactName === "onBlur" && startDate)) {
            var minDate = minAndmaxDate.minDate, maxDate = minAndmaxDate.maxDate;
            if (new Date(startDate) > new Date(maxDate)) {
                setErrMsgStart("Date must be " + formatDay(new Date(maxDate), true) + " or earlier");
            }
            else if (new Date(startDate) < new Date(minDate)) {
                setErrMsgStart("Date must be " + formatDay(new Date(minDate), true) + " or later");
            }
            else if (new Date(startDate) >= new Date(endDate)) {
                setErrMsgStart("start Date should be lower than end Date");
                // setStartDate(selectedDateFromField.startDateFromField)
            }
            else if (handleDisableDateField(startDate) || handleDisableDaycolumn(startDate)) {
                setErrMsgStart("Date must not be disabled date");
            }
            else {
                setSelectedDateFromField(function (prevState) { return (tslib.__assign(tslib.__assign({}, prevState), { startDateFromField: startDate })); });
                selectedDate({
                    startDateFromField: startDate,
                    endDateFromField: selectedDateFromField.endDateFromField,
                    from: "startDateSelect",
                });
            }
        }
        else if (e.key === "Enter" && !startDate) {
            setErrMsgStart("Please enter a valid Date");
        }
    };
    /**
     *
     * @param {*} e contain selected end date
     */
    var endSetError = function (e) {
        if (e.code === "Space") {
            e.preventDefault();
        }
        if ((e.code === "Enter" && endDate) || (e._reactName === "onBlur" && endDate)) {
            var minDate = minAndmaxDate.minDate, maxDate = minAndmaxDate.maxDate;
            if (new Date(endDate) > new Date(maxDate)) {
                setErrMsgEnd("Date must be " + formatDay(new Date(maxDate), true) + " or earlier");
            }
            else if (new Date(endDate) < new Date(minDate)) {
                setErrMsgEnd("Date must be " + formatDay(new Date(minDate), true) + " or later");
            }
            else if (new Date(startDate) >= new Date(endDate)) {
                setErrMsgEnd("End Date should be greater than start Date");
                // setEndDate(selectedDateFromField.endDateFromField)
            }
            else if (!startDate) {
                setStartDate(endDate);
                setEndDate("");
                setSelectedDateFromField(function (prevState) { return (tslib.__assign(tslib.__assign({}, prevState), { startDateFromField: endDate })); });
                selectedDate({
                    startDateFromField: endDate,
                    endDateFromField: selectedDateFromField.endDateFromField,
                    from: "startDateSelect",
                });
            }
            else if (handleDisableDateField(endDate) || handleDisableDaycolumn(endDate)) {
                setErrMsgEnd("Date must not be disabled date");
            }
            else {
                setSelectedDateFromField({
                    startDateFromField: selectedDateFromField.startDateFromField,
                    endDateFromField: endDate,
                });
                selectedDate({
                    startDateFromField: selectedDateFromField.startDateFromField,
                    endDateFromField: endDate,
                    from: "endDateSelect",
                });
            }
        }
        else if (e.key === "Enter" && !endDate) {
            setErrMsgEnd("Please enter a valid Date");
        }
    };
    return (React.createElement("div", null,
        React.createElement("div", { className: "" + (selectType === "range" ? "cld_fieldContainer" : "cld_startDateFieldOnly") },
            React.createElement("div", null,
                showDatelabel && React.createElement("label", { htmlFor: "start_Cld_Field" }, "Start Date"),
                React.createElement("input", { type: "date", id: "start_Cld_Field", value: startDate, onChange: function (e) { return handleStartDate(e); }, onKeyDown: function (e) { return startSetError(e); }, onBlur: startSetError, min: minAndmaxDate.minDate, max: minAndmaxDate.maxDate, className: templateOutline, disabled: windowDimensions <= 612 })),
            selectType === "range" && (React.createElement("div", null,
                showDatelabel && React.createElement("label", { htmlFor: "end_Cld_Field" }, "End Date"),
                React.createElement("input", { type: "date", id: "end_Cld_Field", value: endDate, onChange: function (e) { return handleEndDate(e); }, onKeyDown: function (e) { return endSetError(e); }, onBlur: endSetError, min: minAndmaxDate.minDate, max: minAndmaxDate.maxDate, className: templateOutline, disabled: windowDimensions <= 612 })))),
        React.createElement("div", { className: "" + (selectType === "range" ? "cld_errmsgContainer" : "cld_startaerrmsg") },
            React.createElement("div", { className: "cld_errmsg " + (errMsgStart && "hidecld_errmsg") }, errMsgStart),
            selectType === "range" && React.createElement("div", { className: "cld_errmsg " + (errMsgEnd && "hidecld_errmsg") }, errMsgEnd))));
}

var currentDate = new Date();
/**
 * @param {string} minDate contain a start date
 * @param {number} dynYear contain a year
 * @param {number} dynMonth contain a month
 * @returns {boolean} disable arrow
 */
var disableArrowWhenMinDate = function (minDate, dynYear, dynMonth, disableState) {
    if (minDate) {
        var minNewDate = disableState === "past" && minDate && new Date(minDate) < new Date() ? new Date() : new Date(minDate);
        return minNewDate.getFullYear() === dynYear && (minNewDate.getMonth() + 1) === dynMonth;
    }
    return;
};
/**
 * @param {string} disableState contain a disable-state past || future
 * @param {any} disableArrow contain a boolean
 * @param {string} dynYear contain a year
 * @param {string} dynMonth contain a month
 * @returns {boolean} disable arrow
 */
function disableLeftArrow(disableState, disableArrow, dynYear, dynMonth, minDate) {
    return (disableState === "past" && !minDate && disableArrow) || (dynYear === 1921 && dynMonth === 1) || disableArrowWhenMinDate(minDate, dynYear, dynMonth, disableState);
}
/**
 * @param {string} maxDate contain a start date
 * @param {number} dynYear contain a year
 * @param {number} dynMonth contain a month
 * @returns {boolean} disable arrow
 */
var disableArrowWhenMaxDate = function (maxDate, dynYear, dynMonth, disableState) {
    if (maxDate) {
        var maxNewDate = disableState === "future" && maxDate && new Date(maxDate) > new Date() ? new Date() : new Date(maxDate);
        return maxNewDate.getFullYear() === dynYear && (maxNewDate.getMonth() + 1) === dynMonth;
    }
    return;
};
/**
 * @param {string} disableState contain a disable-state past || future
 * @param {any} disableArrow contain a boolean
 * @param {string} dynYear contain a year
 * @param {string} dynMonth contain a month
 * @returns {boolean} disable arrow
 */
function disableRightArrow(disableState, disableArrow, dynYear, dynMonth, maxDate) {
    return (disableState === "future" && !maxDate && disableArrow) || (dynYear === 2100 && dynMonth === 12) || disableArrowWhenMaxDate(maxDate, dynYear, dynMonth, disableState);
}
/**
 * @param {string} disableState contain a disable-state past || future
 * @param {string} month contain a month value
 * @param {string} year contain a year value
 * @returns {boolean} for disable arrow
 */
function getDisableDateForArrow(disableState, month, year) {
    var disableArrow;
    if (disableState === "past") {
        disableArrow = !!(currentDate.getMonth() >= month - 1 && currentDate.getFullYear() >= year);
    }
    else if (disableState === "future") {
        disableArrow = !!(currentDate.getMonth() <= month - 1 && currentDate.getFullYear() <= year);
    }
    return disableArrow;
}

___$insertStyle(".cld_showDays select:first-child {\n  margin-right: 10px;\n}\n\n.cld_container select {\n  border-color: #fff;\n  padding: 5px 2px;\n  font-size: 15px;\n  border-radius: 3px;\n  outline: none;\n  background-color: transparent;\n  border: none;\n}\n\nselect::-ms-expand {\n  background-color: red;\n}\n\n.cld_container select:hover {\n  background-color: #fff;\n}\n\n.cld_container option {\n  font-size: small;\n}\n\n.cld_container select:hover {\n  cursor: pointer;\n}\n\n.cld_container select.cld_disableArrow {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  opacity: 1;\n  background-color: transparent;\n  border-color: transparent;\n}\n\n.cld_container select:disabled:hover.cld_disableArrow {\n  cursor: unset;\n}");

var months$1 = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
];
var currentDate$1 = new Date();
/**
 * @param {*} props all props
 * @returns {object} returns a select field(Month)
 */
function SelectMonthField(_a) {
    var disableState = _a.disableState, dynMonth = _a.dynMonth, dynYear = _a.dynYear, handleChangeSelect = _a.handleChangeSelect, showSelectMonthArrow = _a.showSelectMonthArrow, minDate = _a.minDate, maxDate = _a.maxDate;
    /**
     * @param {number} index contain id
     * @returns {boolean} returns a boolean value
     */
    var disableMonthFunc = function (index) {
        if (disableState === "past") {
            if (minDate && maxDate) {
                var dateSetPast = new Date(minDate) < new Date() ? new Date() : new Date(minDate);
                return (dateSetPast.getFullYear() === dynYear && dateSetPast.getMonth() > index) || (new Date(maxDate).getFullYear() === dynYear && new Date(maxDate).getMonth() < index);
            }
            if (minDate && new Date(minDate) > new Date()) {
                return new Date(minDate).getFullYear() === dynYear && new Date(minDate).getMonth() > index;
            }
            if (maxDate) {
                return (currentDate$1.getFullYear() === dynYear && currentDate$1.getMonth() > index) || (new Date(maxDate).getFullYear() === dynYear && new Date(maxDate).getMonth() < index);
            }
            return currentDate$1.getFullYear() === dynYear && currentDate$1.getMonth() > index;
        }
        else if (disableState === "future") {
            if (minDate && maxDate) {
                var dateSet = new Date(maxDate) > new Date() ? new Date() : new Date(maxDate);
                return (new Date(minDate).getFullYear() === dynYear && new Date(minDate).getMonth() > index) || (dateSet.getFullYear() === dynYear && dateSet.getMonth() < index);
            }
            if (minDate && new Date(minDate) < new Date()) {
                return (new Date(minDate).getFullYear() === dynYear && new Date(minDate).getMonth() > index) || (currentDate$1.getFullYear() === dynYear && currentDate$1.getMonth() < index);
            }
            if (maxDate && new Date(maxDate) < new Date()) {
                return new Date(maxDate).getFullYear() === dynYear && new Date(maxDate).getMonth() < index;
            }
            return currentDate$1.getFullYear() === dynYear && currentDate$1.getMonth() < index;
        }
        if (minDate && maxDate) {
            return (new Date(minDate).getFullYear() === dynYear && new Date(minDate).getMonth() > index) || (new Date(maxDate).getFullYear() === dynYear && new Date(maxDate).getMonth() < index);
        }
        if (minDate && !disableState) {
            return new Date(minDate).getFullYear() === dynYear && new Date(minDate).getMonth() > index;
        }
        if (maxDate && !disableState) {
            return new Date(maxDate).getFullYear() === dynYear && new Date(maxDate).getMonth() < index;
        }
        return;
    };
    return (React.createElement("select", { disabled: showSelectMonthArrow, className: "" + (showSelectMonthArrow && "cld_disableArrow"), id: "selectMonth", value: dynMonth - 1, onChange: function (e) { return handleChangeSelect(e); } }, months$1.map(function (data, index) {
        return (React.createElement("option", { disabled: disableMonthFunc(index), key: data, value: index }, data));
    })));
}
/**
 * @param {*} props all props
 * @returns {object} returns a select field(Month)
 */
function SelectYearField(_a) {
    var dynYear = _a.dynYear, startAndendYearOptions = _a.startAndendYearOptions, handleChangeSelect = _a.handleChangeSelect, showSelectYearArrow = _a.showSelectYearArrow;
    /**
     *
     * @returns {Array} returns no. of year values
     */
    var yearOptions = function () {
        var yearoption = [];
        var startYearOption = startAndendYearOptions.startYearOption, endYearOption = startAndendYearOptions.endYearOption;
        for (var n = startYearOption; n <= endYearOption; n += 1) {
            yearoption.push(n);
        }
        return yearoption;
    };
    return (React.createElement("select", { disabled: showSelectYearArrow, className: "" + (showSelectYearArrow && "cld_disableArrow"), id: "selectYear", value: dynYear, onChange: function (e) { return handleChangeSelect(e); } }, yearOptions().map(function (data) {
        return (React.createElement("option", { key: data, value: data }, data));
    })));
}

/**
 * @param {object} date contain date
 * @param {number} addupDay to plus one date
 * @returns {string} returns date
 */
var addDays = function (date, addupDay) {
    if (addupDay === void 0) { addupDay = 1; }
    var result = new Date(date);
    result.setDate(result.getDate() + addupDay);
    return result;
};
/**
 * @param {object} start contain startdate
 * @param {object} end contain enddate
 * @param {object} range contain the date
 * @returns {string} returns dateRange
 */
var dateRange = function (start, end, range) {
    if (range === void 0) { range = []; }
    if (new Date(formatDay(start)) > new Date(formatDay(end)))
        return range;
    var next = addDays(start, 1);
    return dateRange(next, end, tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(range)), [start]));
};
/**
 * @param {int} The month number, 0 based
 * @param {int} The year, not zero based, required to account for leap years
 * @return {Date[]} List with date objects for each day of the month
 */
function getDaysInMonth(month, year) {
    var date = new Date(year, month, 1);
    var monthIndays = [];
    while (date.getMonth() === month) {
        monthIndays.push(new Date(date));
        date.setDate(date.getDate() + 1);
    }
    return monthIndays;
}

___$insertStyle(".cld_container {\n  box-shadow: 0px 1px 5px 1px #dddddd;\n  padding: 1%;\n  border-radius: 5px;\n  background: #f1f1f1;\n  box-shadow: 0px 0px 15px 0px #607d8b;\n}\n\n.cld_slotWidth {\n  width: 40%;\n  min-width: 30rem;\n}\n\n.cld_avlSlotWidth {\n  width: 38%;\n  min-width: 27rem;\n}\n\n.cld_noslotWidth {\n  width: 23em;\n  min-width: 15em;\n}\n\n.cld_btnAlign {\n  display: flex;\n  justify-content: space-between;\n  margin: 0px 1px 6px 1px;\n}\n\n.cld_monthYearAlign {\n  display: flex;\n  justify-content: center;\n  margin: 0px 1px 6px 1px;\n}\n\n.cld_btnAlign button:disabled,\n.cld_btnAlign button:disabled:hover {\n  cursor: unset;\n  background-color: #d0d0d0;\n  box-shadow: none;\n}\n\n.cld_btnAlign button {\n  cursor: pointer;\n  font-size: 12px;\n  padding: 7px;\n  height: fit-content;\n  border-radius: 2px;\n  border: none;\n  box-shadow: 0px 0px 2.4px 0px #8a8a8a;\n  background-color: #ffffff;\n  color: #849095;\n}\n\n.cld_btnAlign button:hover {\n  background-color: #f1f1f1;\n}\n\n.cld_showDays {\n  display: flex;\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.cld_highlightFirstNum {\n  color: #ffffff;\n  background-color: #3ecf8e;\n  border-top-left-radius: 10px;\n  border-bottom-left-radius: 10px;\n  padding-inline-end: 10px;\n}\n\n.cld_highlightNum {\n  color: #ffffff;\n}\n\n.cld_highlightLastNum {\n  color: #ffffff;\n  border-top-right-radius: 10px;\n  border-bottom-right-radius: 10px;\n  padding-inline-start: 10px;\n}\n\n.cld_highlightNumCircle {\n  border-radius: 20px;\n  color: #ffffff;\n  margin: 0 5px;\n}\n\n.cld_blueHighlight {\n  background-color: #3d91ff;\n}\n\n.cld_greenHighlight {\n  background-color: #3ecf8e;\n}\n\n.cld_inrangeBlue {\n  background-color: #aacbf7;\n}\n\n.cld_inrangeGreen {\n  background-color: #b8ead4;\n}\n\n.cld_container td:hover .cld_inrangeLastIndex {\n  border-top-right-radius: 10px;\n  border-bottom-right-radius: 10px;\n}\n\n.cld_container td:hover .cld_inrangeFirstIndex {\n  border-top-left-radius: 10px;\n  border-bottom-left-radius: 10px;\n}\n\n.cld_container td:hover .cld_inrangeIndexBlue {\n  background-color: #aacbf7;\n}\n\n.cld_container td:hover .cld_inrangeIndexGreen {\n  background-color: #b8ead4;\n}\n\n/* table */\n.cld_container table {\n  border-collapse: collapse;\n  width: 100%;\n  background: #ffffff;\n  table-layout: fixed;\n  box-shadow: 0px 0px 1px 0px #b4b4b4;\n  border-radius: 2px;\n}\n\n.cld_noslotWidth td,\n.cld_noslotWidth th {\n  border: 1px solid #f1f1f1;\n  padding: 8px;\n  text-align: center;\n}\n\n.cld_slotWidth td,\n.cld_slotWidth th,\n.cld_avlSlotWidth td,\n.cld_avlSlotWidth th {\n  border: 1px solid #a5a5a5;\n  padding: 8px;\n  text-align: center;\n}\n\n.cld_container th {\n  font-weight: 400;\n  color: #849095;\n  font-size: 14px;\n}\n\n.cld_container td {\n  padding: 8px 0px;\n  cursor: pointer;\n  position: relative;\n  font-size: 14px;\n}\n\n.cld_cellHover {\n  position: relative;\n  padding: 3px;\n}\n\n.cld_cellHoverMg {\n  margin: 15px 0;\n  padding: 2px;\n}\n\n.cld_cellAvailableMg {\n  margin-top: 14px;\n  margin-bottom: 4px;\n}\n\n.cld_cellSingleMultiple {\n  margin: 0 5px;\n}\n\n.cld_cellHoverMgbt {\n  margin: 15px 5px;\n}\n\n.cld_cellHoverMgbtSingle {\n  margin: 15px 5px 3px 5px;\n}\n\n.cld_container td:nth-child(n + 7) div.cld_highlightNum,\n.cld_container td:nth-child(n + 7) div.cld_highlightFirstNum,\n.cld_container td:nth-child(n + 7) div.cld_highlightLastNum,\n.cld_container td:nth-child(n + 7) div.cld_inrangeBlue,\n.cld_container td:nth-child(n + 7) div.cld_inrangeGreen,\n.cld_container td:nth-child(n + 7) div.cld_disablebgColor {\n  border-bottom-right-radius: 10px;\n  border-top-right-radius: 10px;\n  margin-right: 5px;\n}\n\n.cld_container td:nth-child(7n + 1) div.cld_highlightNum,\n.cld_container td:nth-child(7n + 1) div.cld_highlightLastNum,\n.cld_container td:nth-child(7n + 1) div.cld_highlightFirstNum,\n.cld_container td:nth-child(7n + 1) div.cld_inrangeBlue,\n.cld_container td:nth-child(7n + 1) div.cld_inrangeGreen,\n.cld_container td:nth-child(7n + 1) div.cld_disablebgColor {\n  border-bottom-left-radius: 10px;\n  border-top-left-radius: 10px;\n  margin-left: 5px;\n}\n\n.cld_container td:hover .cld_cellHover.cld_cellActive:after {\n  content: \"\";\n  position: absolute;\n  top: -2px;\n  right: 0px;\n  bottom: -2px;\n  left: 0px;\n  border-radius: 20px;\n}\n\n.cld_container td:hover .cld_cellHover.cld_cellGreenActive:after {\n  border: 1px solid #008000;\n}\n\n.cld_container td:hover .cld_cellHover.cld_cellBlueActive:after {\n  border: 1px solid #004baf;\n}\n\n.cld_disableDate {\n  color: #c4c4c4;\n}\n\n.cld_disablebgColor {\n  color: #ffffff;\n  background: #b4b4b4;\n}\n\n/* slots */\n.cld_slots {\n  font-size: 13px;\n  width: 25px;\n  height: 18px;\n  padding-inline-start: 4px;\n  font-weight: 500;\n}\n\n.cld_availableSlots {\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0 0 16px 0;\n  color: #64d464;\n  background: #def5de;\n  box-shadow: 0px 0px 3px 0px #29ef29;\n  text-align: left;\n}\n\n.cld_totalSlots {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  border-radius: 16px 0 0 0;\n  box-shadow: 0px 0px 3px 0px #3e82d4;\n  background: #dde2ef;\n  color: #2680eb;\n}\n\n.cld_currentDay::before {\n  content: \"\";\n  position: absolute;\n  bottom: 2px;\n  left: 51%;\n  transform: translate(-50%, 0);\n  width: 17px;\n  height: 2px;\n  border-radius: 2px;\n}\n\n.cld_currentDay.cld_currentDayBlue::before {\n  background: #3d91ff;\n}\n\n.cld_currentDay.cld_currentDayGreen::before {\n  background: #3ecf8e;\n}\n\n.cld_currentDay.cld_highlightNum::before,\n.cld_currentDay.cld_highlightLastNum::before,\n.cld_currentDay.cld_highlightFirstNum::before,\n.cld_currentDay.cld_highlightNumCircle::before,\n.cld_disablebgColor.cld_currentDay::before {\n  background: #ffffff;\n}\n\n.startDateDisablebg {\n  color: #ffffff;\n  background: #b4b4b4;\n  border-bottom-left-radius: 10px;\n  border-top-left-radius: 10px;\n  margin-left: 5px;\n}\n\n.endDateDisablebg {\n  color: #ffffff;\n  background: #b4b4b4;\n  border-bottom-right-radius: 10px;\n  border-top-right-radius: 10px;\n  margin-right: 5px;\n}\n\n.cld_container td:nth-child(n + 7) div.startDateDisablebg {\n  border-radius: 10px;\n  margin-right: 5px;\n}\n\n.cld_container td:nth-child(7n + 1) div.endDateDisablebg {\n  border-radius: 10px;\n  margin-left: 5px;\n}");

___$insertStyle(".cld_slotContainer {\n  display: flex;\n  height: 10px;\n  margin-top: 10px;\n}\n\n.cld_slotContainer > div {\n  margin-right: 12px;\n}\n\n.cld_slot {\n  display: flex;\n  align-items: center;\n}\n\n.cld_slotInfoSize {\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  margin-right: 5px;\n}\n\n.cld_slotInfoSize ~ span {\n  font-size: 11px;\n  font-weight: 500;\n  color: #383838;\n}\n\n.cld_slotInfoSelectedBlueClr {\n  background-color: #3d91ff;\n}\n\n.cld_slotInfoSelectedGreenClr {\n  background-color: #3ecf8e;\n}\n\n.cld_slotInfoDisabledClr {\n  background-color: #b4b4b4;\n}\n\n.cld_slotInfoAvailableClr {\n  background-color: #64d464;\n}\n\n.cld_slotInfoTotalClr {\n  background-color: #2680eb;\n}");

/**
 * @param {*} props all the props needed for show the slotInfo
 * @returns {boolean} return slotInfo
 */
function Legends(_a) {
    var singleSlotState = _a.singleSlotState, duelSlotState = _a.duelSlotState, templateClr = _a.templateClr;
    var templateSelectedClr = React.useMemo(function () {
        return templateClr === "blue" ? "cld_slotInfoSelectedBlueClr" : "cld_slotInfoSelectedGreenClr";
    }, [templateClr]);
    return (React.createElement("div", { className: "cld_slotContainer" },
        React.createElement("div", { className: "cld_slot" },
            React.createElement("p", { className: templateSelectedClr + " cld_slotInfoSize" }),
            React.createElement("span", { className: "cld_slotInfoLabel" }, "Selected Date")),
        React.createElement("div", { className: "cld_slot" },
            React.createElement("p", { className: "cld_slotInfoSize cld_slotInfoDisabledClr" }),
            React.createElement("span", { className: "cld_slotInfoLabel" }, "Disabled Date")),
        (singleSlotState || duelSlotState) && (React.createElement("div", { className: "cld_slot" },
            React.createElement("p", { className: "cld_slotInfoSize cld_slotInfoAvailableClr" }),
            React.createElement("span", { className: "cld_slotInfoLabel" }, "Available Slots"))),
        duelSlotState && (React.createElement("div", { className: "cld_slot" },
            React.createElement("p", { className: "cld_slotInfoSize cld_slotInfoTotalClr" }),
            React.createElement("span", { className: "cld_slotInfoLabel" }, "Total Slots")))));
}

var days$2 = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
/**
 * @param {*} props all the props needed for customize the calendar
 * @returns {React.ReactElement} returns a calendar with single, multiple and range with slots options
 */
function Calendar(_a) {
    var selectDateType = _a.selectDateType, disableDates = _a.disableDates, disableCertainDates = _a.disableCertainDates, duelSlotDates = _a.duelSlotDates, singleSlotDates = _a.singleSlotDates, onSelect = _a.onSelect, _b = _a.slotInfo, slotInfo = _b === void 0 ? true : _b, _c = _a.showDateInputField, showDateInputField = _c === void 0 ? true : _c, _d = _a.showArrow, showArrow = _d === void 0 ? true : _d, showSelectMonthArrow = _a.showSelectMonthArrow, showSelectYearArrow = _a.showSelectYearArrow, showDatelabel = _a.showDatelabel, templateClr = _a.templateClr, minDate = _a.minDate, maxDate = _a.maxDate, _e = _a.defaultValue, defaultValue = _e === void 0 ? {} : _e, disableDays = _a.disableDays;
    var disableState = React.useMemo(function () {
        return disableDates || "";
    }, [disableDates]);
    var selectType = React.useMemo(function () {
        return selectDateType || "single";
    }, [selectDateType]);
    var disableCertainDate = React.useMemo(function () {
        return disableCertainDates || [];
    }, [disableCertainDates]);
    var singleSlots = React.useMemo(function () {
        return singleSlotDates || [];
    }, [singleSlotDates]);
    var duelSlots = React.useMemo(function () {
        return duelSlotDates || [];
    }, [duelSlotDates]);
    var disableDay = React.useMemo(function () {
        return (disableDays === null || disableDays === void 0 ? void 0 : disableDays.map(function (l) { return l.toLowerCase(); })) || [];
    }, [disableDays]);
    var _f = tslib.__read(React.useState(), 2), getDate = _f[0], setGetDate = _f[1];
    var _g = tslib.__read(React.useState(), 2), getStartDay = _g[0], setGetStartDay = _g[1];
    var _h = tslib.__read(React.useState([]), 2), calenderDates = _h[0], setCalenderDates = _h[1];
    var _j = tslib.__read(React.useState(), 2), dynMonth = _j[0], setDynMonth = _j[1];
    var _k = tslib.__read(React.useState(), 2), dynYear = _k[0], setDynYear = _k[1];
    var _l = tslib.__read(React.useState([]), 2), baseId = _l[0], setBaseId = _l[1];
    var _m = tslib.__read(React.useState([]), 2), rangeId = _m[0], setRangeId = _m[1];
    var _o = tslib.__read(React.useState(), 2), inRange = _o[0], setInRange = _o[1];
    var _p = tslib.__read(React.useState([]), 2), slotsDate = _p[0], setSlotsDate = _p[1];
    var _q = tslib.__read(React.useState(), 2), disableArrow = _q[0], setDisableArrow = _q[1];
    var _r = tslib.__read(React.useState(), 2), daysInMonth = _r[0], setDaysInMonth = _r[1];
    var _s = tslib.__read(React.useState(""), 2), startDate = _s[0], setStartDate = _s[1];
    var _t = tslib.__read(React.useState([]), 2), multipleDate = _t[0], setMultipleDate = _t[1];
    var _u = tslib.__read(React.useState({
        startDate: "",
        endDate: "",
    }), 2), startAndendDate = _u[0], setStartAndendDate = _u[1];
    var _v = tslib.__read(React.useState({
        startYearOption: 1921,
        endYearOption: 2100,
    }), 2), startAndendYearOptions = _v[0], setstartAndendYearOptions = _v[1];
    var handleDisableArrow = React.useCallback(function () {
        setDisableArrow(getDisableDateForArrow(disableState, dynMonth, dynYear));
        if ((disableDay === null || disableDay === void 0 ? void 0 : disableDay.length) > 0) {
            setDaysInMonth(getDaysInMonth(dynMonth - 1, dynYear));
        }
    }, [disableDay, disableState, dynMonth, dynYear]);
    React.useEffect(function () {
        handleDisableArrow();
    }, [handleDisableArrow]);
    React.useEffect(function () {
        var currentdate;
        if (minDate && new Date(minDate) > new Date()) {
            currentdate = new Date(minDate);
        }
        else if (minDate && maxDate && new Date(minDate) < new Date() && new Date(maxDate) < new Date()) {
            currentdate = new Date(minDate);
        }
        else if (maxDate && new Date(maxDate) < new Date()) {
            currentdate = new Date(new Date(maxDate));
        }
        else {
            currentdate = new Date();
        }
        var findDaysInMonth = new Date(currentdate.getFullYear(), currentdate.getMonth() + 1, 0).getDate();
        var findStartDayInMonth = new Date(currentdate.getFullYear(), currentdate.getMonth(), 1).getDay();
        setGetDate(findDaysInMonth);
        setGetStartDay(findStartDayInMonth);
        setDynMonth(currentdate.getMonth() + 1);
        setDynYear(currentdate.getFullYear());
    }, [minDate, maxDate]);
    React.useEffect(function () {
        if (disableState === "past" || disableState === "future" || minDate || maxDate) {
            setstartAndendYearOptions(getDisableYear(disableState, minDate, maxDate));
        }
    }, [disableState, minDate, maxDate]);
    React.useEffect(function () {
        var slotDateArr = [];
        var slotState = (singleSlots.length > 0 && singleSlots) || (duelSlots.length > 0 && duelSlots) || [];
        slotState.forEach(function (slDt) {
            slotDateArr.push(formatDay(new Date(slDt.date)));
        });
        setSlotsDate(slotDateArr);
    }, [duelSlots, singleSlots]);
    var defaultDependency = JSON.stringify(defaultValue);
    React.useEffect(function () {
        if (selectDateType === "range" && (defaultValue && defaultValue.startDate && defaultValue.endDate)) {
            var defaultRange = dateRange(new Date(defaultValue.startDate), new Date(defaultValue.endDate));
            var defaultAllRangeDate = defaultRange.map(function (date) { return "" + addZero(date.getDate()) + addZero(date.getMonth() + 1) + date.getFullYear(); });
            setRangeId(defaultAllRangeDate);
            setStartAndendDate({
                startDate: setCurrentTime(new Date(defaultValue.startDate)),
                endDate: setCurrentTime(new Date(defaultValue.endDate))
            });
            return;
        }
        if (selectDateType === "multiple" && defaultValue && defaultValue.length > 0) {
            var setDefaultDate_1 = [];
            var getInitailActualDate_1 = [];
            defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.forEach(function (initialDate) {
                var initialNewDate = new Date(initialDate);
                setDefaultDate_1.push("" + addZero(initialNewDate.getDate()) + addZero(initialNewDate.getMonth() + 1) + initialNewDate.getFullYear());
                getInitailActualDate_1.push(initialNewDate);
            });
            var multipleDefaultDate = setDefaultDate_1;
            setMultipleDate(getInitailActualDate_1);
            setBaseId(multipleDefaultDate);
            return;
        }
        if (defaultValue && defaultValue.date) {
            var singleDefaultDate = new Date(defaultValue.date);
            var singleDefaultId = "" + addZero(singleDefaultDate.getDate()) + addZero(singleDefaultDate.getMonth() + 1) + singleDefaultDate.getFullYear();
            setStartDate(singleDefaultDate);
            setBaseId([singleDefaultId]);
            return;
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [selectDateType, defaultDependency]);
    var rangeCalculater = React.useCallback(function (id) {
        var idDate = new Date(id);
        if (rangeId.length === 0) {
            var convertID = "" + addZero(idDate.getDate()) + addZero(idDate.getMonth() + 1) + idDate.getFullYear();
            setRangeId([convertID]);
            setStartAndendDate(function (prevState) { return (tslib.__assign(tslib.__assign({}, prevState), { startDate: setCurrentTime(idDate) })); });
            setInRange(null);
        }
        else if (rangeId.length === 1 && formatDay(idDate) !== formatDay(startAndendDate.startDate)) {
            var getStartDate = void 0;
            var getEndDate = void 0;
            var findGreater = new Date(startAndendDate.startDate) < idDate;
            if (findGreater) {
                getStartDate = startAndendDate.startDate;
                getEndDate = idDate;
            }
            else {
                getStartDate = idDate;
                getEndDate = startAndendDate.startDate;
            }
            var range = dateRange(new Date(getStartDate), new Date(getEndDate));
            var allRangeDate = range.map(function (date) { return "" + addZero(date.getDate()) + addZero(date.getMonth() + 1) + date.getFullYear(); });
            setRangeId(allRangeDate);
            setInRange(null);
            if (findGreater) {
                setStartAndendDate({
                    startDate: startAndendDate.startDate,
                    endDate: setCurrentTime(idDate),
                });
            }
            else {
                setStartAndendDate({
                    startDate: setCurrentTime(idDate),
                    endDate: startAndendDate.startDate,
                });
            }
        }
        else {
            var convertID = "" + addZero(idDate.getDate()) + addZero(idDate.getMonth() + 1) + idDate.getFullYear();
            setRangeId([convertID]);
            setStartAndendDate({
                startDate: setCurrentTime(idDate),
            });
        }
    }, [rangeId, startAndendDate]);
    React.useEffect(function () {
        if (onSelect instanceof Function)
            if (selectType === "multiple") {
                onSelect(multipleDate);
            }
            else if (selectType === "range") {
                onSelect(startAndendDate);
            }
            else {
                startDate && onSelect(startDate);
            }
    }, [startDate, multipleDate, startAndendDate, onSelect, selectType]);
    var highLight = React.useCallback(function (id, actualDateId) {
        switch (selectType) {
            case "single":
                setBaseId([id]);
                setStartDate(setCurrentTime(actualDateId));
                break;
            case "multiple":
                if (!baseId.includes(id)) {
                    setBaseId(function (oldArray) { return tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(oldArray)), [id]); });
                    setMultipleDate(function (oldArray) { return tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(oldArray)), [setCurrentTime(actualDateId)]); });
                }
                else {
                    var findedId_1 = baseId.findIndex(function (li) { return li === id; });
                    var removedSelect = baseId.filter(function (_i, index) { return findedId_1 !== index; });
                    var removedActualDateId = multipleDate.filter(function (_i, index) { return findedId_1 !== index; });
                    setBaseId(removedSelect);
                    setMultipleDate(removedActualDateId);
                }
                break;
            case "range":
                rangeCalculater(id);
                break;
        }
    }, [baseId, multipleDate, rangeCalculater, selectType]);
    /**
     * @param {object} event mouseHover data-info
     */
    var handleMouseEnter = function (event) {
        setInRange(event.target.dataset.info);
    };
    var handleRenderDate = React.useCallback(function () {
        var noOfDate = [];
        var templateHighLightbg;
        var templateRangeHighLightbg;
        var templateBorder;
        var templateCurrentDay;
        if (templateClr === "blue") {
            templateHighLightbg = "cld_blueHighlight";
            templateRangeHighLightbg = "cld_inrangeBlue cld_inrangeIndexBlue";
            templateBorder = "cld_cellBlueActive";
            templateCurrentDay = "cld_currentDayBlue";
        }
        else {
            templateHighLightbg = "cld_greenHighlight";
            templateRangeHighLightbg = "cld_inrangeGreen cld_inrangeIndexGreen";
            templateBorder = "cld_cellGreenActive";
            templateCurrentDay = "cld_currentDayGreen";
        }
        var _loop_1 = function (i) {
            if (i <= getStartDay) {
                noOfDate.push(React.createElement("td", null));
            }
            else {
                var dateId_1 = "" + addZero(i - getStartDay) + addZero(dynMonth) + dynYear;
                var dateTypeId_1 = dynYear + "-" + addZero(dynMonth) + "-" + addZero(i - getStartDay);
                // range classname for start,between and end
                var rangeHightLight = void 0;
                if (rangeId[0] === dateId_1) {
                    rangeHightLight = templateHighLightbg + " cld_highlightFirstNum";
                }
                else if (rangeId[rangeId.length - 1] === dateId_1) {
                    rangeHightLight = templateHighLightbg + " cld_highlightLastNum";
                }
                else if (rangeId.includes(dateId_1)) {
                    rangeHightLight = templateHighLightbg + " cld_highlightNum";
                }
                // firstOrder change className
                var rangeStartDate = startAndendDate.startDate && startAndendDate.startDate;
                var rangeEndDate = startAndendDate.endDate && startAndendDate.endDate;
                if (rangeId.length === 1 && inRange && rangeStartDate.getDate() > Number(inRange)) {
                    rangeHightLight = rangeId[0] === dateId_1 && templateHighLightbg + " cld_highlightLastNum";
                }
                // classname for range, single and multiple
                var highLightNum = void 0;
                if (selectType === "range") {
                    highLightNum = rangeHightLight;
                }
                else if (baseId.includes(dateId_1)) {
                    highLightNum = templateHighLightbg + " cld_highlightNumCircle";
                }
                // startDate and endDate between ranges
                var inRangeCondition = void 0;
                if (rangeId.length === 1 && inRange) {
                    if (dynYear === rangeStartDate.getFullYear() && dynMonth === rangeStartDate.getMonth() + 1) {
                        inRangeCondition =
                            (Number(inRange) >= i - getStartDay &&
                                rangeStartDate.getDate() < i - getStartDay &&
                                templateRangeHighLightbg + " cld_inrangeLastIndex") ||
                                (Number(inRange) <= i - getStartDay &&
                                    rangeStartDate.getDate() > i - getStartDay &&
                                    templateRangeHighLightbg + " cld_inrangeFirstIndex");
                    }
                    else if (rangeStartDate < new Date(dynYear + "-" + dynMonth + "-" + Number(inRange))) {
                        inRangeCondition = Number(inRange) >= i - getStartDay && templateRangeHighLightbg + " cld_inrangeLastIndex";
                    }
                    else {
                        inRangeCondition =
                            Number(inRange) <= i - getStartDay && templateRangeHighLightbg + " cld_inrangeFirstIndex";
                    }
                }
                var disableDate = (disableState &&
                    !(minDate && disableDates === "past") &&
                    !(maxDate && disableDates === "future") &&
                    getDisableDate(new Date(dateTypeId_1), disableState)) ||
                    (minDate &&
                        setMinDate(minDate && disableDates === "past" && new Date(minDate) < new Date() ? new Date() : new Date(minDate), new Date(dateTypeId_1))) ||
                    (maxDate &&
                        setMaxDate(maxDate && disableDates === "future" && new Date(maxDate) > new Date() ? new Date() : new Date(maxDate), new Date(dateTypeId_1)));
                var showDisableWhenRange = rangeId.length > 1 && (disableCertainDate.length > 0 || disableDay.length > 0) &&
                    getDisableWhenRange(disableCertainDate, disableDay, new Date(dateTypeId_1), rangeStartDate, rangeEndDate, daysInMonth, startAndendDate);
                var disableSpecificDate = disableCertainDate.length > 0 && getDisableCertainDate(new Date(dateTypeId_1), disableCertainDate);
                // disableDay
                var disableDayState = (disableDay === null || disableDay === void 0 ? void 0 : disableDay.length) > 0 && getDisableDays(disableDay, dateTypeId_1);
                // dualSlots || singleSlots
                var slotsState = duelSlots.length > 0 || singleSlots.length > 0;
                var slotClass = void 0;
                if (slotsState) {
                    if (selectType === "range") {
                        if (singleSlots.length > 0) {
                            slotClass = "cld_cellAvailableMg";
                        }
                        else {
                            slotClass = "cld_cellHoverMg";
                        }
                    }
                    else {
                        slotClass = singleSlots.length > 0 ? "cld_cellHoverMgbtSingle" : "cld_cellHoverMgbt";
                    }
                }
                var disableDateRangeClass = void 0;
                if (disableDate) {
                    disableDateRangeClass = disableDate;
                }
                else if (disableSpecificDate) {
                    disableDateRangeClass = disableSpecificDate;
                }
                else if (disableDayState) {
                    disableDateRangeClass = disableDayState;
                }
                else {
                    disableDateRangeClass = highLightNum + " " + (selectType !== "range" && !slotsState && "cld_cellSingleMultiple") + " " + (rangeId.length !== 1 && templateBorder + " cld_cellActive") + " " + inRangeCondition;
                }
                // slot
                var slotIndex = slotsState && duelSlots.length > 0
                    ? duelSlots[slotsDate.indexOf(formatDay(new Date(dateTypeId_1)))]
                    : singleSlots[slotsDate.indexOf(formatDay(new Date(dateTypeId_1)))];
                // currentDay
                var currentDayClass = formatDay(new Date(dateTypeId_1)) === formatDay(new Date()) && templateCurrentDay + " cld_currentDay";
                // merge all classname
                var tdClass = slotClass + " " + showDisableWhenRange + " " + currentDayClass + " " + disableDateRangeClass + " cld_cellHover";
                // remove false and undefined in classname
                var tdStyles = tdClass.trim().split("false ").join("").split("undefined ").join("");
                noOfDate.push(React.createElement("td", { onMouseEnter: (!disableDate || !disableSpecificDate || !disableDayState) && rangeId.length === 1 ? handleMouseEnter : undefined, "data-info": i - getStartDay, onClick: disableDate || disableSpecificDate || disableDayState
                        ? undefined
                        : function () { return highLight(selectType === "range" ? dateTypeId_1 : dateId_1, dateTypeId_1); }, "aria-hidden": "true" },
                    React.createElement("div", null,
                        slotsState && (React.createElement("span", { "data-info": i - getStartDay, className: "cld_slots cld_availableSlots" }, slotIndex ? slotIndex.avaliableSlot : 0)),
                        React.createElement("div", { "data-info": i - getStartDay, className: tdStyles }, i - getStartDay),
                        duelSlots.length > 0 && (React.createElement("span", { "data-info": i - getStartDay, className: "cld_slots cld_totalSlots" }, slotIndex ? slotIndex.totalSlot : 0)))));
            }
        };
        for (var i = 1; i <= getDate + getStartDay; i += 1) {
            _loop_1(i);
        }
        var trDate = [];
        for (var j = 0; j < noOfDate.length; j += 1) {
            var count = 0 + j;
            if (j % 7 === 0) {
                trDate.push(React.createElement("tr", { key: count },
                    noOfDate[count + 0] || React.createElement("td", { key: count + 0 }),
                    noOfDate[count + 1] || React.createElement("td", { key: count + 1 }),
                    noOfDate[count + 2] || React.createElement("td", { key: count + 2 }),
                    noOfDate[count + 3] || React.createElement("td", { key: count + 3 }),
                    noOfDate[count + 4] || React.createElement("td", { key: count + 4 }),
                    noOfDate[count + 5] || React.createElement("td", { key: count + 5 }),
                    noOfDate[count + 6] || React.createElement("td", { key: count + 6 })));
                count += 1;
            }
        }
        setCalenderDates(trDate);
    }, [
        templateClr,
        getDate,
        getStartDay,
        dynMonth,
        dynYear,
        rangeId,
        startAndendDate,
        inRange,
        selectType,
        baseId,
        disableState,
        minDate,
        disableDates,
        maxDate,
        disableCertainDate,
        disableDay,
        daysInMonth,
        duelSlots,
        singleSlots,
        slotsDate,
        highLight
    ]);
    React.useEffect(function () {
        handleRenderDate();
    }, [handleRenderDate, dynMonth, dynYear, baseId, rangeId, inRange]);
    /**
     * Action type for decrease the month and year
     */
    var handleLeft = function () {
        handleDisableArrow();
        setGetDate(new Date(dynYear, dynMonth - 1, 0).getDate());
        setGetStartDay(new Date(dynYear, dynMonth - 2, 1).getDay());
        if (dynMonth === 1) {
            setDynYear(dynYear - 1);
            setDynMonth(12);
        }
        else {
            setDynMonth(dynMonth - 1);
        }
    };
    /**
     * Action type for increase the month and year
     */
    var handleRight = function () {
        handleDisableArrow();
        setGetDate(new Date(dynYear, dynMonth + 1, 0).getDate());
        setGetStartDay(new Date(dynYear, dynMonth, 1).getDay());
        if (dynMonth === 12) {
            setDynYear(dynYear + 1);
            setDynMonth(1);
        }
        else {
            setDynMonth(dynMonth + 1);
        }
    };
    /**
     * Action type for select the specific month
     *
     * @param {object} e contain selected option value
     */
    var handleSelectMonth = function (e) {
        setDynMonth(Number(e.target.value) + 1);
        setGetDate(new Date(dynYear, Number(e.target.value) + 1, 0).getDate());
        setGetStartDay(new Date(dynYear, Number(e.target.value), 1).getDay());
    };
    /**
     * Action type for select the specific year
     *
     * @param {object} e contain selected option value
     */
    var handleSelectYear = function (e) {
        setDynYear(Number(e.target.value));
        setGetDate(new Date(e.target.value, dynMonth, 0).getDate());
        setGetStartDay(new Date(e.target.value, dynMonth - 1, 1).getDay());
    };
    /**
     * Action type for select the specific year
     *
     * @param {object} id contain selected date
     */
    var rangeCalculaterFromField = function (id) {
        if (id.startDateFromField && id.endDateFromField) {
            var getStartDate = id.startDateFromField;
            var getEndDate = id.endDateFromField;
            var range = dateRange(new Date(getStartDate), new Date(getEndDate));
            var allRangeDate = range.map(function (date) { return "" + addZero(date.getDate()) + addZero(date.getMonth() + 1) + date.getFullYear(); });
            setRangeId(allRangeDate);
            setStartAndendDate({
                startDate: setCurrentTime(id.startDateFromField),
                endDate: setCurrentTime(id.endDateFromField),
            });
        }
        else {
            var idDate = new Date(id.startDateFromField || id.endDateFromField);
            var convertID = "" + addZero(idDate.getDate()) + addZero(idDate.getMonth() + 1) + idDate.getFullYear();
            setRangeId([convertID]);
            setStartAndendDate(function (prevState) { return (tslib.__assign(tslib.__assign({}, prevState), { startDate: setCurrentTime(id.startDateFromField) || setCurrentTime(id.endDateFromField) })); });
        }
        if (id.from) {
            var refreshDate = id.from === "startDateSelect" ? new Date(id.startDateFromField) : new Date(id.endDateFromField);
            setDynMonth(refreshDate.getMonth() + 1);
            setGetDate(new Date(refreshDate.getFullYear(), refreshDate.getMonth() + 1, 0).getDate());
            setGetStartDay(new Date(refreshDate.getFullYear(), refreshDate.getMonth(), 1).getDay());
            setDynYear(refreshDate.getFullYear());
        }
    };
    /**
     * Return the selected date range from date-input field
     *
     * @param {object} da contain selected option value
     */
    var setFieldValue = function (da) {
        if (selectType !== "range") {
            var selDt = new Date(da.startDateFromField);
            var fieldFindDaysInMonth = new Date(selDt.getFullYear(), selDt.getMonth() + 1, 0).getDate();
            var fieldFindStartDayInMonth = new Date(selDt.getFullYear(), selDt.getMonth(), 1).getDay();
            var dateIdFromFiled_1 = "" + addZero(selDt.getDate()) + addZero(selDt.getMonth() + 1) + selDt.getFullYear();
            var actualDateFromFiled_1 = selDt.getFullYear() + "-" + (selDt.getMonth() + 1) + "-" + selDt.getDate();
            setDynYear(selDt.getFullYear());
            setDynMonth(selDt.getMonth() + 1);
            setGetDate(fieldFindDaysInMonth);
            setGetStartDay(fieldFindStartDayInMonth);
            switch (selectType) {
                case "single":
                    setBaseId([dateIdFromFiled_1]);
                    setStartDate(setCurrentTime(actualDateFromFiled_1));
                    break;
                case "multiple":
                    if (!baseId.includes(dateIdFromFiled_1)) {
                        setBaseId(function (oldArray) { return tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(oldArray)), [dateIdFromFiled_1]); });
                        setMultipleDate(function (oldArray) { return tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(oldArray)), [setCurrentTime(actualDateFromFiled_1)]); });
                    }
                    break;
            }
        }
        else {
            rangeCalculaterFromField(da);
        }
    };
    /**
     *@returns {string} seletedDate from calendar single || multiple || range
     */
    var selectedDateFromCldFunc = function () {
        var selDate;
        if (selectType === "single") {
            selDate = startDate;
        }
        else if (selectType === "multiple") {
            selDate = multipleDate ? multipleDate[multipleDate.length - 1] : "";
        }
        else {
            selDate = startAndendDate;
        }
        return selDate;
    };
    return (React.createElement(React.Fragment, null, (calenderDates === null || calenderDates === void 0 ? void 0 : calenderDates.length) > 0 &&
        React.createElement("div", { className: (duelSlots.length > 0 ? "cld_slotWidth" : singleSlots.length > 0 ? "cld_avlSlotWidth" : "cld_noslotWidth") + " cld_container" },
            React.createElement("div", null,
                showDateInputField && (React.createElement(CldDateField, { selectedDate: function (da) { return setFieldValue(da); }, selectType: selectType, selectedDateFromCld: selectedDateFromCldFunc(), disableState: disableState, propsMinDate: minDate, propsMaxDate: maxDate, disableCertainDate: disableCertainDate, disableDay: disableDay, daysInMonth: daysInMonth, showDatelabel: showDatelabel, templateClr: templateClr })),
                React.createElement("div", { className: "" + (showArrow ? "cld_btnAlign" : "cld_monthYearAlign") },
                    showArrow && (React.createElement("button", { disabled: disableLeftArrow(disableState, disableArrow, dynYear, dynMonth, minDate), onClick: function () { return handleLeft(); }, type: "button" }, "\u25C0")),
                    React.createElement("div", { className: "cld_showDays" },
                        React.createElement(SelectMonthField, { disableState: disableState, dynMonth: dynMonth, dynYear: dynYear, handleChangeSelect: function (e) { return handleSelectMonth(e); }, showSelectMonthArrow: showSelectMonthArrow, minDate: minDate, maxDate: maxDate }),
                        React.createElement(SelectYearField, { startAndendYearOptions: startAndendYearOptions, dynYear: dynYear, handleChangeSelect: function (e) { return handleSelectYear(e); }, showSelectYearArrow: showSelectYearArrow })),
                    showArrow && (React.createElement("button", { 
                        // disabled={(disableState === "future" && disableArrow) || (dynYear === 2100 && dynMonth === 12)}
                        disabled: disableRightArrow(disableState, disableArrow, dynYear, dynMonth, maxDate), onClick: function () { return handleRight(); }, type: "button" }, "\u25B6")))),
            React.createElement("table", { onMouseLeave: rangeId.length === 1 ? function () { return setInRange(null); } : undefined },
                React.createElement("thead", null,
                    React.createElement("tr", null, days$2.map(function (d) { return (React.createElement("th", { key: d }, d)); }))),
                React.createElement("tbody", null, calenderDates)),
            slotInfo && (React.createElement(Legends, { templateClr: templateClr, singleSlotState: singleSlots.length > 0, duelSlotState: duelSlots.length > 0 })))));
}

___$insertStyle("body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}");

var App = function (_a) {
    var selectDateType = _a.selectDateType, disableDates = _a.disableDates, disableCertainDates = _a.disableCertainDates, duelSlotDates = _a.duelSlotDates, singleSlotDates = _a.singleSlotDates, onSelect = _a.onSelect, slotInfo = _a.slotInfo, showDateInputField = _a.showDateInputField, showArrow = _a.showArrow, showSelectMonthArrow = _a.showSelectMonthArrow, showSelectYearArrow = _a.showSelectYearArrow, showDatelabel = _a.showDatelabel, templateClr = _a.templateClr, minDate = _a.minDate, maxDate = _a.maxDate, disableDays = _a.disableDays, defaultValue = _a.defaultValue;
    return (React.createElement(Calendar, { selectDateType: selectDateType, disableDates: disableDates, disableCertainDates: disableCertainDates, duelSlotDates: duelSlotDates, singleSlotDates: singleSlotDates, onSelect: function (date) { return onSelect && onSelect(date); }, slotInfo: slotInfo, showDateInputField: showDateInputField, showArrow: showArrow, showSelectMonthArrow: showSelectMonthArrow, showSelectYearArrow: showSelectYearArrow, showDatelabel: showDatelabel, templateClr: templateClr, minDate: minDate, maxDate: maxDate, disableDays: disableDays, defaultValue: defaultValue }));
};

exports.default = App;
//# sourceMappingURL=index.js.map
